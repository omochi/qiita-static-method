; ModuleID = '-'
source_filename = "-"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.9"

%Vs5Int32 = type <{ i32 }>
%Sp = type <{ i8* }>
%Vs6UInt32 = type <{ i32 }>
%struct._SwiftEmptyArrayStorage = type { %struct.HeapObject, %struct._SwiftArrayBodyStorage }
%struct.HeapObject = type { %struct.HeapMetadata*, %struct.StrongRefCount, %struct.WeakRefCount }
%struct.HeapMetadata = type opaque
%struct.StrongRefCount = type { i32 }
%struct.WeakRefCount = type { i32 }
%struct._SwiftArrayBodyStorage = type { i64, i64 }
%swift.refcounted = type { %swift.type*, i32, i32 }
%swift.type = type { i64 }
%swift.protocol = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i16, i16, i32 }
%objc_class = type { %objc_class*, %objc_class*, %swift.opaque*, %swift.opaque*, i64 }
%swift.opaque = type opaque
%C4Main7Company = type <{ %swift.refcounted, %SS, %Sa }>
%SS = type <{ %Vs11_StringCore }>
%Vs11_StringCore = type <{ %GSqSv_, %Su, %GSqPs9AnyObject__ }>
%GSqSv_ = type <{ [8 x i8] }>
%Su = type <{ i64 }>
%GSqPs9AnyObject__ = type <{ [8 x i8] }>
%Sa = type <{ %Vs12_ArrayBuffer }>
%Vs12_ArrayBuffer = type <{ %Vs14_BridgeStorage }>
%Vs14_BridgeStorage = type <{ %swift.bridge* }>
%swift.bridge = type opaque
%C4Main12PaperCompany = type <{ %swift.refcounted, %SS, %Sa }>
%swift.protocol_conformance = type { i32, i32, i32, i32 }
%swift.type_metadata_record = type { i32, i32 }
%V4Main8Employee = type <{ %SS, %Si }>
%Si = type <{ i64 }>
%objc_object = type opaque
%GCs23_ContiguousArrayStorageSS_ = type <{ %swift.refcounted }>
%GCs19_AnyIteratorBoxBaseSS_ = type opaque
%GSqSS_ = type <{ [24 x i8], [1 x i8] }>
%Sq = type <{}>
%Cs19_AnyIteratorBoxBase = type <{ %swift.refcounted }>
%VSS9UTF16View = type <{ %Si, %Si, %Vs11_StringCore }>
%Vs9_Buffer32 = type <{ %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8, %Vs5UInt8 }>
%Vs5UInt8 = type <{ i8 }>
%GVs16IndexingIteratorGSRVs5UInt8__ = type <{ %GSRVs5UInt8_, %Si }>
%GSRVs5UInt8_ = type <{ %GSqGSPVs5UInt8__, %GSqGSPVs5UInt8__ }>
%GSqGSPVs5UInt8__ = type <{ [8 x i8] }>
%Vs4UTF8 = type <{ %Vs6UInt32, %Vs5UInt8 }>
%Cs27_ContiguousArrayStorageBase = type opaque
%Vs22_ContiguousArrayBuffer = type <{ %Vs20ManagedBufferPointer }>
%Vs20ManagedBufferPointer = type <{ %swift.refcounted* }>

@_TZvOs11CommandLine5_argcVs5Int32 = external global %Vs5Int32, align 4
@globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_token4 = external global i64, align 8
@_TZvOs11CommandLine11_unsafeArgvGSpGSqGSpVs4Int8___ = external global %Sp, align 8
@_Tvs19_emptyStringStorageVs6UInt32 = external global %Vs6UInt32, align 4
@_swiftEmptyArrayStorage = external global %struct._SwiftEmptyArrayStorage, align 8
@_swift_allocObject = external global %swift.refcounted* (%swift.type*, i64, i64)*
@_TMLGCs23_ContiguousArrayStorageSS_ = linkonce_odr hidden global %swift.type* null, align 8
@_TMSS = external global %swift.type, align 8
@_TMVs10_ArrayBody = external global %swift.type, align 8
@0 = private unnamed_addr constant [7 x i8] c"(name=\00"
@1 = private unnamed_addr constant [13 x i8] c", employees=\00"
@_TMLGSaV4Main8Employee_ = linkonce_odr hidden global %swift.type* null, align 8
@_TWPSSs16TextOutputStreams = external global i8*, align 8
@2 = private unnamed_addr constant [2 x i8] c")\00"
@_swift_retain = external global void (%swift.refcounted*)*
@_swift_release = external global void (%swift.refcounted*)*
@3 = private unnamed_addr constant [2 x i8] c"/\00"
@_TMLGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___ = linkonce_odr hidden global %swift.type* null, align 8
@_TMLGVs16IndexingIteratorGSaSS__ = linkonce_odr hidden global %swift.type* null, align 8
@_TMLGSaSS_ = linkonce_odr hidden global %swift.type* null, align 8
@_TWLGSaSS_urGSax_s13IndexableBases = linkonce_odr hidden global i8** null, align 8
@_TWLGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols = linkonce_odr hidden global i8** null, align 8
@_TMLGCs19_AnyIteratorBoxBaseSS_ = linkonce_odr hidden global %swift.type* null, align 8
@4 = private unnamed_addr constant [182 x i8] c"/Library/Caches/com.apple.xbs/Binaries/swiftlang/swiftlang-800.0.63~2/TempContent/Objects/BNI_assert_lightweight/swift-macosx-x86_64/stdlib/public/core/8/ExistentialCollection.swift\00"
@5 = private unnamed_addr constant [3 x i8] c"33\00"
@_TMLGCs23_ContiguousArrayStorageP__ = linkonce_odr hidden global %swift.type* null, align 8
@_TMLP_ = linkonce_odr hidden global %swift.type* null, align 8
@_swift_getExistentialTypeMetadata = external global %swift.type* (i64, %swift.protocol**)*
@_TMSi = external global %swift.type, align 8
@6 = private unnamed_addr constant [4 x i8] c"abc\00"
@7 = private unnamed_addr constant [22 x i8] c"3/apple/banana/cherry\00"
@_swift_isUniquelyReferenced_nonNull_native = external global i1 (%swift.refcounted*)*
@8 = private unnamed_addr constant [32 x i8] c"CatWorld/3/tama/5/mike/6/kuro/7\00"
@9 = private unnamed_addr constant [7 x i8] c", age=\00"
@_TWPV4Main8Employees23CustomStringConvertibleS_ = constant [1 x i8*] [i8* bitcast ({ i64, i64, i64 } (%V4Main8Employee*, %swift.type*, i8**)* @_TTWV4Main8Employees23CustomStringConvertibleS_FS1_g11descriptionSS to i8*)], align 8
@_TWPC4Main7Companys23CustomStringConvertibleS_ = constant [1 x i8*] [i8* bitcast ({ i64, i64, i64 } (%C4Main7Company**, %swift.type*, i8**)* @_TTWC4Main7Companys23CustomStringConvertibleS_FS1_g11descriptionSS to i8*)], align 8
@_TWPSi4Main8LoadableS_ = hidden constant [2 x i8*] [i8* bitcast (%swift.type* ()* @_TMaSi to i8*), i8* bitcast (void (%Si*, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type*, %swift.type*, i8**)* @_TTWSi4Main8LoadableS_ZFS0_4loadfT8iteratorGVs11AnyIteratorSS__wx6Loaded to i8*)], align 8
@_TWPSS4Main8LoadableS_ = hidden constant [2 x i8*] [i8* bitcast (%swift.type* ()* @_TMaSS to i8*), i8* bitcast (void (%SS*, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type*, %swift.type*, i8**)* @_TTWSS4Main8LoadableS_ZFS0_4loadfT8iteratorGVs11AnyIteratorSS__wx6Loaded to i8*)], align 8
@_TWPV4Main8EmployeeS_8LoadableS_ = hidden constant [2 x i8*] [i8* bitcast (%swift.type* ()* @_TMaV4Main8Employee to i8*), i8* bitcast (void (%V4Main8Employee*, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type*, %swift.type*, i8**)* @_TTWV4Main8EmployeeS_8LoadableS_ZFS1_4loadfT8iteratorGVs11AnyIteratorSS__wx6Loaded to i8*)], align 8
@_TWPC4Main7CompanyS_8LoadableS_ = hidden constant [2 x i8*] [i8* bitcast (%swift.type* ()* @_TMaC4Main7Company to i8*), i8* bitcast (void (%C4Main7Company**, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type*, %swift.type*, i8**)* @_TTWC4Main7CompanyS_8LoadableS_ZFS1_4loadfT8iteratorGVs11AnyIteratorSS__wx6Loaded to i8*)], align 8
@_swift_slowDealloc = external global void (i8*, i64, i64)*
@_swift_slowAlloc = external global i8* (i64, i64)*
@_TWVV4Main8Employee = hidden constant [20 x i8*] [i8* bitcast (void ([24 x i8]*, %swift.type*)* @_TwXXV4Main8Employee to i8*), i8* bitcast (%swift.opaque* ([24 x i8]*, [24 x i8]*, %swift.type*)* @_TwCPV4Main8Employee to i8*), i8* bitcast (%swift.opaque* ([24 x i8]*, %swift.type*)* @_TwprV4Main8Employee to i8*), i8* bitcast (void ([24 x i8]*, %swift.type*)* @_TwdeV4Main8Employee to i8*), i8* bitcast (void (%swift.opaque*, %swift.type*)* @_TwxxV4Main8Employee to i8*), i8* bitcast (%swift.opaque* ([24 x i8]*, %swift.opaque*, %swift.type*)* @_TwCpV4Main8Employee to i8*), i8* bitcast (%swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)* @_TwcpV4Main8Employee to i8*), i8* bitcast (%swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)* @_TwcaV4Main8Employee to i8*), i8* bitcast (%swift.opaque* ([24 x i8]*, %swift.opaque*, %swift.type*)* @_TwTkV4Main8Employee to i8*), i8* bitcast (i8* (i8*, i8*, %swift.type*)* @__swift_memcpy32_8 to i8*), i8* bitcast (%swift.opaque* (%swift.opaque*, %swift.opaque*, %swift.type*)* @_TwtaV4Main8Employee to i8*), i8* bitcast (%swift.opaque* ([24 x i8]*, %swift.type*)* @_TwalV4Main8Employee to i8*), i8* bitcast (i8* (i8**, i8**, %swift.type*)* @__swift_copy_outline_pointer to i8*), i8* bitcast (void (%swift.opaque*, i64, %swift.type*)* @_TwXxV4Main8Employee to i8*), i8* bitcast (%swift.opaque* (%swift.opaque*, %swift.opaque*, i64, %swift.type*)* @_TwCcV4Main8Employee to i8*), i8* bitcast (i8* (i8*, i8*, i64, %swift.type*)* @__swift_memmove_array32_8 to i8*), i8* bitcast (i8* (i8*, i8*, i64, %swift.type*)* @__swift_memmove_array32_8 to i8*), i8* inttoptr (i64 32 to i8*), i8* inttoptr (i64 196615 to i8*), i8* inttoptr (i64 32 to i8*)], align 8
@10 = private constant [16 x i8] c"V4Main8Employee\00"
@11 = private constant [10 x i8] c"name\00age\00\00"
@_TMnV4Main8Employee = hidden constant <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }> <{ i32 trunc (i64 sub (i64 ptrtoint ([16 x i8]* @10 to i64), i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>* @_TMnV4Main8Employee to i64)) to i32), i32 2, i32 3, i32 trunc (i64 sub (i64 ptrtoint ([10 x i8]* @11 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>* @_TMnV4Main8Employee to i64), i64 12)) to i32), i32 trunc (i64 sub (i64 ptrtoint (%swift.type** (%swift.type*)* @get_field_types_Employee to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>* @_TMnV4Main8Employee to i64), i64 16)) to i32), i32 1, i32 trunc (i64 sub (i64 ptrtoint (%swift.type* ()* @_TMaV4Main8Employee to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>* @_TMnV4Main8Employee to i64), i64 24)) to i32), i32 5, i32 0, i32 0, i32 0 }>, section "__TEXT,__const", align 8
@_TMfV4Main8Employee = internal constant <{ i8**, i64, i64, %swift.type*, i64, i64 }> <{ i8** getelementptr inbounds ([20 x i8*], [20 x i8*]* @_TWVV4Main8Employee, i32 0, i32 0), i64 1, i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>* @_TMnV4Main8Employee to i64), i64 add (i64 ptrtoint (<{ i8**, i64, i64, %swift.type*, i64, i64 }>* @_TMfV4Main8Employee to i64), i64 16)), %swift.type* null, i64 0, i64 24 }>, align 8
@12 = private constant [16 x i8] c"V4Main8Employee\00", section "__TEXT,__swift3_typeref, regular, no_dead_strip"
@13 = private constant [3 x i8] c"SS\00", section "__TEXT,__swift3_typeref, regular, no_dead_strip"
@14 = private constant [5 x i8] c"name\00", section "__TEXT,__swift3_reflstr, regular, no_dead_strip"
@15 = private constant [3 x i8] c"Si\00", section "__TEXT,__swift3_typeref, regular, no_dead_strip"
@16 = private constant [4 x i8] c"age\00", section "__TEXT,__swift3_reflstr, regular, no_dead_strip"
@_TMRfV4Main8Employee = internal constant <{ i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }> <{ i32 trunc (i64 sub (i64 ptrtoint ([16 x i8]* @12 to i64), i64 ptrtoint (<{ i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }>* @_TMRfV4Main8Employee to i64)) to i32), i16 0, i16 12, i32 2, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([3 x i8]* @13 to i64), i64 add (i64 ptrtoint (<{ i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }>* @_TMRfV4Main8Employee to i64), i64 16)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([5 x i8]* @14 to i64), i64 add (i64 ptrtoint (<{ i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }>* @_TMRfV4Main8Employee to i64), i64 20)) to i32), i32 0, i32 trunc (i64 sub (i64 ptrtoint ([3 x i8]* @15 to i64), i64 add (i64 ptrtoint (<{ i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }>* @_TMRfV4Main8Employee to i64), i64 28)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([4 x i8]* @16 to i64), i64 add (i64 ptrtoint (<{ i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }>* @_TMRfV4Main8Employee to i64), i64 32)) to i32) }>, section "__TEXT,__swift3_fieldmd, regular, no_dead_strip", align 4
@_TWVBo = external global i8*, align 8
@_TMmC4Main7Company = hidden global %objc_class { %objc_class* @"OBJC_METACLASS_$_SwiftObject", %objc_class* @"OBJC_METACLASS_$_SwiftObject", %swift.opaque* @_objc_empty_cache, %swift.opaque* null, i64 ptrtoint ({ i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8* }* @_METACLASS_DATA__TtC4Main7Company to i64) }, align 8
@"OBJC_CLASS_$_SwiftObject" = external global %objc_class, align 8
@_objc_empty_cache = external global %swift.opaque
@_TWvdvC4Main7Company4nameSS = hidden constant i64 16, align 8
@17 = private unnamed_addr constant [5 x i8] c"name\00"
@18 = private constant [1 x i8] zeroinitializer
@_TWvdvC4Main7Company9employeesGSaVS_8Employee_ = hidden constant i64 40, align 8
@19 = private unnamed_addr constant [10 x i8] c"employees\00"
@"OBJC_METACLASS_$_SwiftObject" = external global %objc_class, align 8
@20 = private unnamed_addr constant [18 x i8] c"_TtC4Main7Company\00"
@_METACLASS_DATA__TtC4Main7Company = private constant { i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8* } { i32 129, i32 40, i32 40, i32 0, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @20, i64 0, i64 0), i8* null, i8* null, i8* null, i8* null, i8* null }, section "__DATA, __objc_const", align 8
@_IVARS__TtC4Main7Company = private constant { i32, i32, [2 x { i64*, i8*, i8*, i32, i32 }] } { i32 32, i32 2, [2 x { i64*, i8*, i8*, i32, i32 }] [{ i64*, i8*, i8*, i32, i32 } { i64* @_TWvdvC4Main7Company4nameSS, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @17, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @18, i64 0, i64 0), i32 3, i32 24 }, { i64*, i8*, i8*, i32, i32 } { i64* @_TWvdvC4Main7Company9employeesGSaVS_8Employee_, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @19, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @18, i64 0, i64 0), i32 3, i32 8 }] }, section "__DATA, __objc_const", align 8
@_DATA__TtC4Main7Company = private constant { i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32, i32, [2 x { i64*, i8*, i8*, i32, i32 }] }*, i8*, i8* } { i32 128, i32 16, i32 48, i32 0, i8* null, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @20, i64 0, i64 0), i8* null, i8* null, { i32, i32, [2 x { i64*, i8*, i8*, i32, i32 }] }* @_IVARS__TtC4Main7Company, i8* null, i8* null }, section "__DATA, __objc_const", align 8
@21 = private constant [15 x i8] c"C4Main7Company\00"
@22 = private constant [16 x i8] c"name\00employees\00\00"
@_TMnC4Main7Company = hidden constant <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }> <{ i32 trunc (i64 sub (i64 ptrtoint ([15 x i8]* @21 to i64), i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>* @_TMnC4Main7Company to i64)) to i32), i32 2, i32 18, i32 trunc (i64 sub (i64 ptrtoint ([16 x i8]* @22 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>* @_TMnC4Main7Company to i64), i64 12)) to i32), i32 trunc (i64 sub (i64 ptrtoint (%swift.type** (%swift.type*)* @get_field_types_Company to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>* @_TMnC4Main7Company to i64), i64 16)) to i32), i32 0, i32 trunc (i64 sub (i64 ptrtoint (%swift.type* ()* @_TMaC4Main7Company to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>* @_TMnC4Main7Company to i64), i64 24)) to i32), i32 10, i32 0, i32 0, i32 0 }>, section "__TEXT,__const", align 8
@_TWoFC4Main7Companyg4nameSS = hidden constant i64 96, align 8
@_TWoFC4Main7Companys4nameSS = hidden constant i64 104, align 8
@_TWoFC4Main7Companym4nameSS = hidden constant i64 112, align 8
@_TWoFC4Main7Companyg9employeesGSaVS_8Employee_ = hidden constant i64 120, align 8
@_TWoFC4Main7Companys9employeesGSaVS_8Employee_ = hidden constant i64 128, align 8
@_TWoFC4Main7Companym9employeesGSaVS_8Employee_ = hidden constant i64 136, align 8
@_TWoFC4Main7CompanyCfT4nameSS9employeesGSaVS_8Employee__S0_ = hidden constant i64 144, align 8
@_TWoFC4Main7Companyg11descriptionSS = hidden constant i64 152, align 8
@_TMLC4Main7Company = hidden global %swift.type* null, align 8
@_swift_getInitializedObjCClass = external global %objc_class* (%objc_class*)*
@_TMfC4Main7Company = internal global <{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }> <{ void (%C4Main7Company*)* @_TFC4Main7CompanyD, i8** @_TWVBo, i64 ptrtoint (%objc_class* @_TMmC4Main7Company to i64), %objc_class* @"OBJC_CLASS_$_SwiftObject", %swift.opaque* @_objc_empty_cache, %swift.opaque* null, i64 add (i64 ptrtoint ({ i32, i32, i32, i32, i8*, i8*, i8*, i8*, { i32, i32, [2 x { i64*, i8*, i8*, i32, i32 }] }*, i8*, i8* }* @_DATA__TtC4Main7Company to i64), i64 1), i32 3, i32 0, i32 48, i16 7, i16 0, i32 176, i32 16, i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>* @_TMnC4Main7Company to i64), i64 add (i64 ptrtoint (<{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main7Company to i64), i64 80)), i8* null, { i64, i64, i64 } (%C4Main7Company*)* @_TFC4Main7Companyg4nameSS, void (i64, i64, i64, %C4Main7Company*)* @_TFC4Main7Companys4nameSS, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)* @_TFC4Main7Companym4nameSS, %swift.bridge* (%C4Main7Company*)* @_TFC4Main7Companyg9employeesGSaVS_8Employee_, void (%swift.bridge*, %C4Main7Company*)* @_TFC4Main7Companys9employeesGSaVS_8Employee_, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)* @_TFC4Main7Companym9employeesGSaVS_8Employee_, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)* @_TFC4Main7CompanycfT4nameSS9employeesGSaVS_8Employee__S0_, { i64, i64, i64 } (%C4Main7Company*)* @_TFC4Main7Companyg11descriptionSS, i64 16, i64 40 }>, align 8
@23 = private constant [15 x i8] c"C4Main7Company\00", section "__TEXT,__swift3_typeref, regular, no_dead_strip"
@24 = private constant [20 x i8] c"GSaV4Main8Employee_\00", section "__TEXT,__swift3_typeref, regular, no_dead_strip"
@25 = private constant [10 x i8] c"employees\00", section "__TEXT,__swift3_reflstr, regular, no_dead_strip"
@_TMRfC4Main7Company = internal constant <{ i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }> <{ i32 trunc (i64 sub (i64 ptrtoint ([15 x i8]* @23 to i64), i64 ptrtoint (<{ i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }>* @_TMRfC4Main7Company to i64)) to i32), i16 1, i16 12, i32 2, i32 0, i32 trunc (i64 sub (i64 ptrtoint ([3 x i8]* @13 to i64), i64 add (i64 ptrtoint (<{ i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }>* @_TMRfC4Main7Company to i64), i64 16)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([5 x i8]* @14 to i64), i64 add (i64 ptrtoint (<{ i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }>* @_TMRfC4Main7Company to i64), i64 20)) to i32), i32 0, i32 trunc (i64 sub (i64 ptrtoint ([20 x i8]* @24 to i64), i64 add (i64 ptrtoint (<{ i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }>* @_TMRfC4Main7Company to i64), i64 28)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([10 x i8]* @25 to i64), i64 add (i64 ptrtoint (<{ i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }>* @_TMRfC4Main7Company to i64), i64 32)) to i32) }>, section "__TEXT,__swift3_fieldmd, regular, no_dead_strip", align 4
@26 = private constant [17 x i8] c"P4Main8Loadable_\00", section "__TEXT,__swift3_typeref, regular, no_dead_strip"
@_TMRfP4Main8Loadable_ = internal constant <{ i32, i16, i16, i32 }> <{ i32 trunc (i64 sub (i64 ptrtoint ([17 x i8]* @26 to i64), i64 ptrtoint (<{ i32, i16, i16, i32 }>* @_TMRfP4Main8Loadable_ to i64)) to i32), i16 4, i16 12, i32 0 }>, section "__TEXT,__swift3_fieldmd, regular, no_dead_strip", align 4
@27 = private unnamed_addr constant [20 x i8] c"_TtP4Main8Loadable_\00"
@_TMp4Main8Loadable = hidden constant %swift.protocol { i8* null, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @27, i64 0, i64 0), i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i32 72, i32 7, i16 0, i16 0, i32 0 }, align 8
@_TMmC4Main12PaperCompany = hidden global %objc_class { %objc_class* @"OBJC_METACLASS_$_SwiftObject", %objc_class* @_TMmC4Main7Company, %swift.opaque* @_objc_empty_cache, %swift.opaque* null, i64 ptrtoint ({ i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8* }* @_METACLASS_DATA__TtC4Main12PaperCompany to i64) }, align 8
@28 = private unnamed_addr constant [24 x i8] c"_TtC4Main12PaperCompany\00"
@_METACLASS_DATA__TtC4Main12PaperCompany = private constant { i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8* } { i32 129, i32 40, i32 40, i32 0, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @28, i64 0, i64 0), i8* null, i8* null, i8* null, i8* null, i8* null }, section "__DATA, __objc_const", align 8
@_DATA__TtC4Main12PaperCompany = private constant { i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8* } { i32 128, i32 48, i32 48, i32 0, i8* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @28, i64 0, i64 0), i8* null, i8* null, i8* null, i8* null, i8* null }, section "__DATA, __objc_const", align 8
@29 = private constant [21 x i8] c"C4Main12PaperCompany\00"
@_TMnC4Main12PaperCompany = hidden constant <{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }> <{ i32 trunc (i64 sub (i64 ptrtoint ([21 x i8]* @29 to i64), i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>* @_TMnC4Main12PaperCompany to i64)) to i32), i32 0, i32 20, i32 trunc (i64 sub (i64 ptrtoint ([1 x i8]* @18 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>* @_TMnC4Main12PaperCompany to i64), i64 12)) to i32), i32 trunc (i64 sub (i64 ptrtoint (%swift.type** (%swift.type*)* @get_field_types_PaperCompany to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>* @_TMnC4Main12PaperCompany to i64), i64 16)) to i32), i32 0, i32 trunc (i64 sub (i64 ptrtoint (%swift.type* ()* @_TMaC4Main12PaperCompany to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>* @_TMnC4Main12PaperCompany to i64), i64 24)) to i32), i32 20, i32 0, i32 0, i32 0 }>, section "__TEXT,__const", align 8
@_TMLC4Main12PaperCompany = hidden global %swift.type* null, align 8
@_TMfC4Main12PaperCompany = internal global <{ void (%C4Main12PaperCompany*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main12PaperCompany* (i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }> <{ void (%C4Main12PaperCompany*)* @_TFC4Main12PaperCompanyD, i8** @_TWVBo, i64 ptrtoint (%objc_class* @_TMmC4Main12PaperCompany to i64), %swift.type* bitcast (i64* getelementptr inbounds (<{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main7Company, i32 0, i32 2) to %swift.type*), %swift.opaque* @_objc_empty_cache, %swift.opaque* null, i64 add (i64 ptrtoint ({ i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i8*, i8* }* @_DATA__TtC4Main12PaperCompany to i64), i64 1), i32 3, i32 0, i32 48, i16 7, i16 0, i32 176, i32 16, i64 sub (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }>* @_TMnC4Main12PaperCompany to i64), i64 add (i64 ptrtoint (<{ void (%C4Main12PaperCompany*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main12PaperCompany* (i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main12PaperCompany to i64), i64 80)), i8* null, { i64, i64, i64 } (%C4Main7Company*)* @_TFC4Main7Companyg4nameSS, void (i64, i64, i64, %C4Main7Company*)* @_TFC4Main7Companys4nameSS, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)* @_TFC4Main7Companym4nameSS, %swift.bridge* (%C4Main7Company*)* @_TFC4Main7Companyg9employeesGSaVS_8Employee_, void (%swift.bridge*, %C4Main7Company*)* @_TFC4Main7Companys9employeesGSaVS_8Employee_, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)* @_TFC4Main7Companym9employeesGSaVS_8Employee_, %C4Main12PaperCompany* (i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*)* @_TFC4Main12PaperCompanycfT4nameSS9employeesGSaVS_8Employee__S0_, { i64, i64, i64 } (%C4Main7Company*)* @_TFC4Main7Companyg11descriptionSS, i64 16, i64 40 }>, align 8
@30 = private constant [21 x i8] c"C4Main12PaperCompany\00", section "__TEXT,__swift3_typeref, regular, no_dead_strip"
@_TMRfC4Main12PaperCompany = internal constant <{ i32, i16, i16, i32 }> <{ i32 trunc (i64 sub (i64 ptrtoint ([21 x i8]* @30 to i64), i64 ptrtoint (<{ i32, i16, i16, i32 }>* @_TMRfC4Main12PaperCompany to i64)) to i32), i16 1, i16 12, i32 0 }>, section "__TEXT,__swift3_fieldmd, regular, no_dead_strip", align 4
@31 = private constant [14 x i8] c"Ps9AnyObject_\00", section "__TEXT,__swift3_typeref, regular, no_dead_strip"
@32 = private constant [6 x i8] c"super\00", section "__TEXT,__swift3_typeref, regular, no_dead_strip"
@_TMRsC4Main12PaperCompany = internal constant <{ i32, i32, i32, i32, i32, i32 }> <{ i32 trunc (i64 sub (i64 ptrtoint ([21 x i8]* @30 to i64), i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRsC4Main12PaperCompany to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([14 x i8]* @31 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRsC4Main12PaperCompany to i64), i64 4)) to i32), i32 1, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([6 x i8]* @32 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRsC4Main12PaperCompany to i64), i64 16)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([15 x i8]* @23 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRsC4Main12PaperCompany to i64), i64 20)) to i32) }>, section "__TEXT,__swift3_assocty, regular, no_dead_strip", align 4
@"_swift_FORCE_LOAD_$_swiftFoundation" = external global i1
@"_swift_FORCE_LOAD_$_swiftFoundation_$_Main" = weak hidden constant i1* @"_swift_FORCE_LOAD_$_swiftFoundation"
@"_swift_FORCE_LOAD_$_swiftObjectiveC" = external global i1
@"_swift_FORCE_LOAD_$_swiftObjectiveC_$_Main" = weak hidden constant i1* @"_swift_FORCE_LOAD_$_swiftObjectiveC"
@"_swift_FORCE_LOAD_$_swiftDarwin" = external global i1
@"_swift_FORCE_LOAD_$_swiftDarwin_$_Main" = weak hidden constant i1* @"_swift_FORCE_LOAD_$_swiftDarwin"
@"_swift_FORCE_LOAD_$_swiftIOKit" = external global i1
@"_swift_FORCE_LOAD_$_swiftIOKit_$_Main" = weak hidden constant i1* @"_swift_FORCE_LOAD_$_swiftIOKit"
@"_swift_FORCE_LOAD_$_swiftDispatch" = external global i1
@"_swift_FORCE_LOAD_$_swiftDispatch_$_Main" = weak hidden constant i1* @"_swift_FORCE_LOAD_$_swiftDispatch"
@"_swift_FORCE_LOAD_$_swiftCoreGraphics" = external global i1
@"_swift_FORCE_LOAD_$_swiftCoreGraphics_$_Main" = weak hidden constant i1* @"_swift_FORCE_LOAD_$_swiftCoreGraphics"
@"\01l_protocol_conformances" = private constant [6 x %swift.protocol_conformance] [%swift.protocol_conformance { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @got._TMps23CustomStringConvertible to i64), i64 ptrtoint ([6 x %swift.protocol_conformance]* @"\01l_protocol_conformances" to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64* getelementptr inbounds (<{ i8**, i64, i64, %swift.type*, i64, i64 }>, <{ i8**, i64, i64, %swift.type*, i64, i64 }>* @_TMfV4Main8Employee, i32 0, i32 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 0, i32 1) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([1 x i8*]* @_TWPV4Main8Employees23CustomStringConvertibleS_ to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 0, i32 2) to i64)) to i32), i32 1 }, %swift.protocol_conformance { i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol** @got._TMps23CustomStringConvertible to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 1, i32 0) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint (i64* getelementptr inbounds (<{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main7Company, i32 0, i32 2) to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 1, i32 1) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([1 x i8*]* @_TWPC4Main7Companys23CustomStringConvertibleS_ to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 1, i32 2) to i64)) to i32), i32 15 }, %swift.protocol_conformance { i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol* @_TMp4Main8Loadable to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 2, i32 0) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.type** @got._TMSi to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 2, i32 1) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint ([2 x i8*]* @_TWPSi4Main8LoadableS_ to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 2, i32 2) to i64)) to i32), i32 1 }, %swift.protocol_conformance { i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol* @_TMp4Main8Loadable to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 3, i32 0) to i64)) to i32), i32 add (i32 trunc (i64 sub (i64 ptrtoint (%swift.type** @got._TMSS to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 3, i32 1) to i64)) to i32), i32 1), i32 trunc (i64 sub (i64 ptrtoint ([2 x i8*]* @_TWPSS4Main8LoadableS_ to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 3, i32 2) to i64)) to i32), i32 1 }, %swift.protocol_conformance { i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol* @_TMp4Main8Loadable to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 4, i32 0) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (i64* getelementptr inbounds (<{ i8**, i64, i64, %swift.type*, i64, i64 }>, <{ i8**, i64, i64, %swift.type*, i64, i64 }>* @_TMfV4Main8Employee, i32 0, i32 1) to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 4, i32 1) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([2 x i8*]* @_TWPV4Main8EmployeeS_8LoadableS_ to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 4, i32 2) to i64)) to i32), i32 1 }, %swift.protocol_conformance { i32 trunc (i64 sub (i64 ptrtoint (%swift.protocol* @_TMp4Main8Loadable to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 5, i32 0) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint (i64* getelementptr inbounds (<{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main7Company, i32 0, i32 2) to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 5, i32 1) to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([2 x i8*]* @_TWPC4Main7CompanyS_8LoadableS_ to i64), i64 ptrtoint (i32* getelementptr inbounds ([6 x %swift.protocol_conformance], [6 x %swift.protocol_conformance]* @"\01l_protocol_conformances", i32 0, i32 5, i32 2) to i64)) to i32), i32 15 }], section "__TEXT, __swift2_proto, regular, no_dead_strip", align 8
@_TMps23CustomStringConvertible = external global %swift.protocol, align 8
@got._TMps23CustomStringConvertible = private unnamed_addr constant %swift.protocol* @_TMps23CustomStringConvertible
@33 = private constant [7 x i8] c"Loaded\00", section "__TEXT,__swift3_typeref, regular, no_dead_strip"
@_TMRaSi4Main8LoadableS_ = internal constant <{ i32, i32, i32, i32, i32, i32 }> <{ i32 trunc (i64 sub (i64 ptrtoint ([3 x i8]* @15 to i64), i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaSi4Main8LoadableS_ to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([17 x i8]* @26 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaSi4Main8LoadableS_ to i64), i64 4)) to i32), i32 1, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([7 x i8]* @33 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaSi4Main8LoadableS_ to i64), i64 16)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([3 x i8]* @15 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaSi4Main8LoadableS_ to i64), i64 20)) to i32) }>, section "__TEXT,__swift3_assocty, regular, no_dead_strip", align 4
@got._TMSi = private unnamed_addr constant %swift.type* @_TMSi
@_TMRaSS4Main8LoadableS_ = internal constant <{ i32, i32, i32, i32, i32, i32 }> <{ i32 trunc (i64 sub (i64 ptrtoint ([3 x i8]* @13 to i64), i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaSS4Main8LoadableS_ to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([17 x i8]* @26 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaSS4Main8LoadableS_ to i64), i64 4)) to i32), i32 1, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([7 x i8]* @33 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaSS4Main8LoadableS_ to i64), i64 16)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([3 x i8]* @13 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaSS4Main8LoadableS_ to i64), i64 20)) to i32) }>, section "__TEXT,__swift3_assocty, regular, no_dead_strip", align 4
@got._TMSS = private unnamed_addr constant %swift.type* @_TMSS
@_TMRaV4Main8EmployeeS_8LoadableS_ = internal constant <{ i32, i32, i32, i32, i32, i32 }> <{ i32 trunc (i64 sub (i64 ptrtoint ([16 x i8]* @12 to i64), i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaV4Main8EmployeeS_8LoadableS_ to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([17 x i8]* @26 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaV4Main8EmployeeS_8LoadableS_ to i64), i64 4)) to i32), i32 1, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([7 x i8]* @33 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaV4Main8EmployeeS_8LoadableS_ to i64), i64 16)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([16 x i8]* @12 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaV4Main8EmployeeS_8LoadableS_ to i64), i64 20)) to i32) }>, section "__TEXT,__swift3_assocty, regular, no_dead_strip", align 4
@_TMRaC4Main7CompanyS_8LoadableS_ = internal constant <{ i32, i32, i32, i32, i32, i32 }> <{ i32 trunc (i64 sub (i64 ptrtoint ([15 x i8]* @23 to i64), i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaC4Main7CompanyS_8LoadableS_ to i64)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([17 x i8]* @26 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaC4Main7CompanyS_8LoadableS_ to i64), i64 4)) to i32), i32 1, i32 8, i32 trunc (i64 sub (i64 ptrtoint ([7 x i8]* @33 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaC4Main7CompanyS_8LoadableS_ to i64), i64 16)) to i32), i32 trunc (i64 sub (i64 ptrtoint ([15 x i8]* @23 to i64), i64 add (i64 ptrtoint (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaC4Main7CompanyS_8LoadableS_ to i64), i64 20)) to i32) }>, section "__TEXT,__swift3_assocty, regular, no_dead_strip", align 4
@"\01l_type_metadata_table" = private constant [1 x %swift.type_metadata_record] [%swift.type_metadata_record { i32 trunc (i64 sub (i64 ptrtoint (i64* getelementptr inbounds (<{ void (%C4Main12PaperCompany*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main12PaperCompany* (i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main12PaperCompany*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main12PaperCompany* (i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main12PaperCompany, i32 0, i32 2) to i64), i64 ptrtoint ([1 x %swift.type_metadata_record]* @"\01l_type_metadata_table" to i64)) to i32), i32 15 }], section "__TEXT, __swift2_types, regular, no_dead_strip", align 8
@__swift_reflection_version = linkonce_odr hidden constant i16 1
@field_type_vector_PaperCompany = private global %swift.type** null
@field_type_vector_Company = private global %swift.type** null
@field_type_vector_Employee = private global %swift.type** null
@_TMVs6UInt16 = external global %swift.type, align 8
@_TMVs18_StringBufferIVars = external global %swift.type, align 8
@_TMLGCs18_HeapBufferStorageVs18_StringBufferIVarsVs6UInt16_ = linkonce_odr hidden global %swift.type* null, align 8
@_TMLGCs23_ContiguousArrayStorageV4Main8Employee_ = linkonce_odr hidden global %swift.type* null, align 8
@"\01L_selector_data(count)" = private global [6 x i8] c"count\00", section "__TEXT,__objc_methname,cstring_literals", align 1
@"\01L_selector(count)" = private externally_initialized global i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"\01L_selector_data(count)", i64 0, i64 0), section "__DATA,__objc_selrefs,literal_pointers,no_dead_strip", align 8
@_PROTOCOL__TtPs9AnyObject_ = private constant { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i8*, i8*, i8* } { i8* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @34, i64 0, i64 0), i8* null, i8* null, i8* null, i8* null, i8* null, i8* null, i32 96, i32 65, i8* null, i8* null, i8* null }, section "__DATA, __objc_const", align 8
@"\01l_OBJC_LABEL_PROTOCOL_$__TtPs9AnyObject_" = weak hidden global i8* bitcast ({ i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i8*, i8*, i8* }* @_PROTOCOL__TtPs9AnyObject_ to i8*), section "__DATA,__objc_protolist,coalesced,no_dead_strip", align 8
@"\01l_OBJC_PROTOCOL_REFERENCE_$__TtPs9AnyObject_" = weak hidden global i8* bitcast ({ i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i32, i32, i8*, i8*, i8* }* @_PROTOCOL__TtPs9AnyObject_ to i8*), section "__DATA,__objc_protorefs,coalesced,no_dead_strip", align 8
@34 = private unnamed_addr constant [17 x i8] c"_TtPs9AnyObject_\00"
@objc_classes = internal global [2 x i8*] [i8* bitcast (%swift.type* @_TMC4Main7Company to i8*), i8* bitcast (%swift.type* @_TMC4Main12PaperCompany to i8*)], section "__DATA, __objc_classlist, regular, no_dead_strip", align 8
@llvm.used = appending global [25 x i8*] [i8* bitcast ([6 x %swift.protocol_conformance]* @"\01l_protocol_conformances" to i8*), i8* bitcast ([1 x %swift.type_metadata_record]* @"\01l_type_metadata_table" to i8*), i8* bitcast (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaC4Main7CompanyS_8LoadableS_ to i8*), i8* bitcast (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaSS4Main8LoadableS_ to i8*), i8* bitcast (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaSi4Main8LoadableS_ to i8*), i8* bitcast (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRaV4Main8EmployeeS_8LoadableS_ to i8*), i8* bitcast (<{ i32, i16, i16, i32 }>* @_TMRfC4Main12PaperCompany to i8*), i8* bitcast (<{ i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }>* @_TMRfC4Main7Company to i8*), i8* bitcast (<{ i32, i16, i16, i32 }>* @_TMRfP4Main8Loadable_ to i8*), i8* bitcast (<{ i32, i16, i16, i32, i32, i32, i32, i32, i32, i32 }>* @_TMRfV4Main8Employee to i8*), i8* bitcast (<{ i32, i32, i32, i32, i32, i32 }>* @_TMRsC4Main12PaperCompany to i8*), i8* bitcast ({ i64, i64, i64 } (%C4Main7Company**, %swift.type*, i8**)* @_TTWC4Main7Companys23CustomStringConvertibleS_FS1_g11descriptionSS to i8*), i8* bitcast ({ i64, i64, i64 } (%V4Main8Employee*, %swift.type*, i8**)* @_TTWV4Main8Employees23CustomStringConvertibleS_FS1_g11descriptionSS to i8*), i8* bitcast ([1 x i8*]* @_TWPC4Main7Companys23CustomStringConvertibleS_ to i8*), i8* bitcast ([1 x i8*]* @_TWPV4Main8Employees23CustomStringConvertibleS_ to i8*), i8* bitcast (i8** ()* @_TWaC4Main7Companys23CustomStringConvertibleS_ to i8*), i8* bitcast (i8** ()* @_TWaV4Main8Employees23CustomStringConvertibleS_ to i8*), i8* bitcast (i16* @__swift_reflection_version to i8*), i8* bitcast (i1** @"_swift_FORCE_LOAD_$_swiftCoreGraphics_$_Main" to i8*), i8* bitcast (i1** @"_swift_FORCE_LOAD_$_swiftDarwin_$_Main" to i8*), i8* bitcast (i1** @"_swift_FORCE_LOAD_$_swiftDispatch_$_Main" to i8*), i8* bitcast (i1** @"_swift_FORCE_LOAD_$_swiftFoundation_$_Main" to i8*), i8* bitcast (i1** @"_swift_FORCE_LOAD_$_swiftIOKit_$_Main" to i8*), i8* bitcast (i1** @"_swift_FORCE_LOAD_$_swiftObjectiveC_$_Main" to i8*), i8* bitcast ([2 x i8*]* @objc_classes to i8*)], section "llvm.metadata"
@llvm.compiler.used = appending global [2 x i8*] [i8* bitcast (i8** @"\01L_selector(count)" to i8*), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"\01L_selector_data(count)", i32 0, i32 0)], section "llvm.metadata"
@_swift_release_n = external global void (%swift.refcounted*, i32)*

@_TMV4Main8Employee = hidden alias %swift.type, bitcast (i64* getelementptr inbounds (<{ i8**, i64, i64, %swift.type*, i64, i64 }>, <{ i8**, i64, i64, %swift.type*, i64, i64 }>* @_TMfV4Main8Employee, i32 0, i32 1) to %swift.type*)
@_TMC4Main7Company = hidden alias %swift.type, bitcast (i64* getelementptr inbounds (<{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main7Company, i32 0, i32 2) to %swift.type*)
@_TMC4Main12PaperCompany = hidden alias %swift.type, bitcast (i64* getelementptr inbounds (<{ void (%C4Main12PaperCompany*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main12PaperCompany* (i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main12PaperCompany*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main12PaperCompany* (i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main12PaperCompany, i32 0, i32 2) to %swift.type*)

define i32 @main(i32, i8**) #0 {
entry:
  store i32 %0, i32* getelementptr inbounds (%Vs5Int32, %Vs5Int32* @_TZvOs11CommandLine5_argcVs5Int32, i64 0, i32 0), align 4
  %2 = load i64, i64* @globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_token4, align 8
  %3 = icmp eq i64 %2, -1
  br i1 %3, label %once_done, label %once_not_done

once_not_done:                                    ; preds = %entry
  tail call void @swift_once(i64* nonnull @globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_token4, i8* nonnull bitcast (void ()* @globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_func4 to i8*))
  br label %once_done

once_done:                                        ; preds = %once_not_done, %entry
  store i8** %1, i8*** bitcast (%Sp* @_TZvOs11CommandLine11_unsafeArgvGSpGSqGSpVs4Int8___ to i8***), align 8
  tail call void @_TF4Main4mainFT_T_()
  ret i32 0
}

; Function Attrs: norecurse nounwind
define hidden void @_TFV4Main8EmployeeCfT4nameSS3ageSi_S0_(%V4Main8Employee* noalias nocapture sret, i64, i64, i64, i64) #1 {
entry:
  %5 = bitcast %V4Main8Employee* %0 to i64*
  store i64 %1, i64* %5, align 8
  %.name._core._countAndFlags._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  store i64 %2, i64* %.name._core._countAndFlags._value, align 8
  %.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 0, i32 0, i32 2
  %6 = bitcast %GSqPs9AnyObject__* %.name._core._owner to i64*
  store i64 %3, i64* %6, align 8
  %.age._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 1, i32 0
  store i64 %4, i64* %.age._value, align 8
  ret void
}

define hidden { i64, i64, i64 } @_TFV4Main8Employeeg11descriptionSS(%V4Main8Employee* noalias nocapture readonly dereferenceable(32)) #0 {
entry:
  %1 = bitcast %V4Main8Employee* %0 to i64*
  %2 = load i64, i64* %1, align 8
  %.name._core._countAndFlags._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %3 = load i64, i64* %.name._core._countAndFlags._value, align 8
  %.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 0, i32 0, i32 2
  %4 = bitcast %GSqPs9AnyObject__* %.name._core._owner to i64*
  %5 = load i64, i64* %4, align 8
  %.age._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 1, i32 0
  %6 = load i64, i64* %.age._value, align 8
  %7 = tail call { i64, i64, i64 } @_TTSf4s___TFV4Main8Employeeg11descriptionSS(i64 %2, i64 %3, i64 %5, i64 %6) #21
  ret { i64, i64, i64 } %7
}

; Function Attrs: nounwind
define hidden { i64, i64, i64 } @_TFV4Main8Employeeg4nameSS(%V4Main8Employee* noalias nocapture readonly dereferenceable(32)) #2 {
entry:
  %1 = bitcast %V4Main8Employee* %0 to i64*
  %2 = load i64, i64* %1, align 8
  %.name._core._countAndFlags._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %3 = load i64, i64* %.name._core._countAndFlags._value, align 8
  %.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 0, i32 0, i32 2
  %4 = bitcast %GSqPs9AnyObject__* %.name._core._owner to i64*
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to %objc_object*
  %7 = insertvalue { i64, i64, i64 } undef, i64 %2, 0
  %8 = insertvalue { i64, i64, i64 } %7, i64 %3, 1
  %9 = insertvalue { i64, i64, i64 } %8, i64 %5, 2
  tail call void @swift_unknownRetain(%objc_object* %6) #22
  ret { i64, i64, i64 } %9
}

; Function Attrs: nounwind
define hidden void @_TFV4Main8Employees4nameSS(i64, i64, i64, %V4Main8Employee* nocapture dereferenceable(32)) #2 {
entry:
  %.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %3, i64 0, i32 0, i32 0, i32 2
  %4 = bitcast %GSqPs9AnyObject__* %.name._core._owner to i64*
  %5 = bitcast %GSqPs9AnyObject__* %.name._core._owner to %objc_object**
  %6 = load %objc_object*, %objc_object** %5, align 8
  %7 = bitcast %V4Main8Employee* %3 to i64*
  store i64 %0, i64* %7, align 8
  %.name._core1._countAndFlags._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %3, i64 0, i32 0, i32 0, i32 1, i32 0
  store i64 %1, i64* %.name._core1._countAndFlags._value, align 8
  store i64 %2, i64* %4, align 8
  tail call void @swift_unknownRelease(%objc_object* %6) #22
  ret void
}

; Function Attrs: norecurse nounwind readnone
define hidden { i8*, i64 } @_TFV4Main8Employeem4nameSS(i8* nocapture readnone, [24 x i8]* nocapture readnone dereferenceable(24), %V4Main8Employee* nocapture dereferenceable(32)) #3 {
entry:
  %3 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %4 = insertvalue { i8*, i64 } undef, i8* %3, 0
  %5 = insertvalue { i8*, i64 } %4, i64 0, 1
  ret { i8*, i64 } %5
}

; Function Attrs: norecurse nounwind readonly
define hidden i64 @_TFV4Main8Employeeg3ageSi(%V4Main8Employee* noalias nocapture readonly dereferenceable(32)) #4 {
entry:
  %.age._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 1, i32 0
  %1 = load i64, i64* %.age._value, align 8
  ret i64 %1
}

; Function Attrs: norecurse nounwind
define hidden void @_TFV4Main8Employees3ageSi(i64, %V4Main8Employee* nocapture dereferenceable(32)) #1 {
entry:
  %.age._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %1, i64 0, i32 1, i32 0
  store i64 %0, i64* %.age._value, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone
define hidden { i8*, i64 } @_TFV4Main8Employeem3ageSi(i8* nocapture readnone, [24 x i8]* nocapture readnone dereferenceable(24), %V4Main8Employee* nocapture dereferenceable(32)) #3 {
entry:
  %.age = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %2, i64 0, i32 1
  %3 = bitcast %Si* %.age to i8*
  %4 = insertvalue { i8*, i64 } undef, i8* %3, 0
  %5 = insertvalue { i8*, i64 } %4, i64 0, 1
  ret { i8*, i64 } %5
}

define { i64, i64, i64 } @_TTWV4Main8Employees23CustomStringConvertibleS_FS1_g11descriptionSS(%V4Main8Employee* noalias nocapture readonly dereferenceable(32), %swift.type* nocapture readnone %Self, i8** nocapture readnone %SelfWitnessTable) #0 {
entry:
  %1 = bitcast %V4Main8Employee* %0 to i64*
  %2 = load i64, i64* %1, align 8
  %.name._core._countAndFlags._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 0, i32 0, i32 1, i32 0
  %3 = load i64, i64* %.name._core._countAndFlags._value, align 8
  %.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 0, i32 0, i32 2
  %4 = bitcast %GSqPs9AnyObject__* %.name._core._owner to i64*
  %5 = load i64, i64* %4, align 8
  %.age._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 1, i32 0
  %6 = load i64, i64* %.age._value, align 8
  %7 = inttoptr i64 %5 to %objc_object*
  tail call void @swift_unknownRetain(%objc_object* %7) #22
  %8 = tail call { i64, i64, i64 } @_TTSf4s___TFV4Main8Employeeg11descriptionSS(i64 %2, i64 %3, i64 %5, i64 %6) #21
  tail call void @swift_unknownRelease(%objc_object* %7) #22
  ret { i64, i64, i64 } %8
}

; Function Attrs: nounwind
define hidden noalias %C4Main7Company* @_TFC4Main7CompanyCfT4nameSS9employeesGSaVS_8Employee__S0_(i64, i64, i64, %swift.bridge*, %swift.type* nocapture readnone) #2 {
  %6 = tail call noalias %C4Main7Company* @_TFC4Main7CompanyCfT4nameSS9employeesGSaVS_8Employee__S0__merged(i64 %0, i64 %1, i64 %2, %swift.bridge* %3, %swift.type* nocapture readnone %4, %swift.type** @_TMLC4Main7Company, %objc_class* bitcast (i64* getelementptr inbounds (<{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main7Company, i64 0, i32 2) to %objc_class*)) #2
  ret %C4Main7Company* %6
}

define hidden { i64, i64, i64 } @_TFC4Main7Companyg11descriptionSS(%C4Main7Company*) #0 {
entry:
  %buffer17 = alloca [152 x i8], align 8
  %1 = alloca %Sa, align 8
  %2 = alloca %SS, align 16
  %3 = load %swift.type*, %swift.type** @_TMLGCs23_ContiguousArrayStorageSS_, align 8
  %4 = icmp eq %swift.type* %3, null
  br i1 %4, label %cacheIsNull.i, label %_TMaGCs23_ContiguousArrayStorageSS_.exit

cacheIsNull.i:                                    ; preds = %entry
  %5 = tail call %swift.type* @_TMaCs23_ContiguousArrayStorage(%swift.type* nonnull @_TMSS) #17
  store atomic %swift.type* %5, %swift.type** @_TMLGCs23_ContiguousArrayStorageSS_ release, align 8
  br label %_TMaGCs23_ContiguousArrayStorageSS_.exit

_TMaGCs23_ContiguousArrayStorageSS_.exit:         ; preds = %entry, %cacheIsNull.i
  %6 = phi %swift.type* [ %3, %entry ], [ %5, %cacheIsNull.i ]
  %7 = bitcast [152 x i8]* %buffer17 to %objc_object*
  %8 = bitcast %objc_object* %7 to %swift.refcounted*
  %9 = call %swift.refcounted* @swift_initStackObject(%swift.type* %6, %swift.refcounted* %8)
  %10 = bitcast %swift.refcounted* %9 to %objc_object*
  %11 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 1
  %._storage.count._value = bitcast %swift.refcounted* %11 to i64*
  %12 = bitcast %swift.refcounted* %11 to <2 x i64>*
  store <2 x i64> <i64 5, i64 10>, <2 x i64>* %12, align 8
  %13 = bitcast %objc_object* %10 to %swift.bridge*
  %14 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 2
  %15 = bitcast %swift.refcounted* %14 to %SS*
  %16 = call { i64, i64, i64 } @_TTSgq5SSSSs20TextOutputStreamables___TFs27_toStringReadOnlyStreamableuRxs20TextOutputStreamablerFxSS(i64 ptrtoint ([7 x i8]* @0 to i64), i64 6, i64 0)
  %17 = extractvalue { i64, i64, i64 } %16, 0
  %18 = extractvalue { i64, i64, i64 } %16, 1
  %19 = extractvalue { i64, i64, i64 } %16, 2
  %20 = bitcast %swift.refcounted* %14 to i64*
  store i64 %17, i64* %20, align 8
  %._core._countAndFlags = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 2, i32 1
  %._core._countAndFlags._value = bitcast i32* %._core._countAndFlags to i64*
  store i64 %18, i64* %._core._countAndFlags._value, align 8
  %._core._owner = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 3
  %21 = bitcast %swift.refcounted* %._core._owner to i64*
  store i64 %19, i64* %21, align 8
  %22 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 3, i32 1
  %23 = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 0, i32 0
  %24 = load %swift.type*, %swift.type** %23, align 8
  %25 = icmp eq %swift.type* %24, bitcast (i64* getelementptr inbounds (<{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main7Company, i64 0, i32 2) to %swift.type*)
  br i1 %25, label %64, label %86

; <label>:26                                      ; preds = %64, %88, %110
  %27 = phi %swift.bridge* [ %135, %110 ], [ %107, %88 ], [ %83, %64 ]
  %.in = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 6, i32 1
  %28 = bitcast %Sa* %1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %28)
  %._buffer._storage.rawValue = getelementptr inbounds %Sa, %Sa* %1, i64 0, i32 0, i32 0, i32 0
  store %swift.bridge* %27, %swift.bridge** %._buffer._storage.rawValue, align 8
  %29 = getelementptr inbounds %SS, %SS* %2, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 24, i8* %29)
  %30 = bitcast %SS* %2 to i64*
  store i64 ptrtoint (%Vs6UInt32* @_Tvs19_emptyStringStorageVs6UInt32 to i64), i64* %30, align 16
  %._core3._countAndFlags._value = getelementptr inbounds %SS, %SS* %2, i64 0, i32 0, i32 1, i32 0
  %._core3._owner = getelementptr inbounds %SS, %SS* %2, i64 0, i32 0, i32 2
  %31 = bitcast %GSqPs9AnyObject__* %._core3._owner to i64*
  %32 = bitcast %Sa* %1 to %swift.opaque*
  %33 = bitcast %SS* %2 to %swift.opaque*
  %34 = bitcast i64* %._core3._countAndFlags._value to i8*
  call void @llvm.memset.p0i8.i64(i8* %34, i8 0, i64 16, i32 8, i1 false)
  %35 = load %swift.type*, %swift.type** @_TMLGSaV4Main8Employee_, align 8
  %36 = icmp eq %swift.type* %35, null
  br i1 %36, label %cacheIsNull.i18, label %_TMaGSaV4Main8Employee_.exit

cacheIsNull.i18:                                  ; preds = %26
  %37 = call %swift.type* @_TMaSa(%swift.type* nonnull bitcast (i64* getelementptr inbounds (<{ i8**, i64, i64, %swift.type*, i64, i64 }>, <{ i8**, i64, i64, %swift.type*, i64, i64 }>* @_TMfV4Main8Employee, i64 0, i32 1) to %swift.type*)) #17
  store atomic %swift.type* %37, %swift.type** @_TMLGSaV4Main8Employee_ release, align 8
  br label %_TMaGSaV4Main8Employee_.exit

_TMaGSaV4Main8Employee_.exit:                     ; preds = %26, %cacheIsNull.i18
  %38 = phi %swift.type* [ %35, %26 ], [ %37, %cacheIsNull.i18 ]
  call void @_TFs15_print_unlockedu0_R_s16TextOutputStreamrFTxRq__T_(%swift.opaque* noalias nocapture %32, %swift.opaque* nocapture %33, %swift.type* %38, %swift.type* nonnull @_TMSS, i8** nonnull @_TWPSSs16TextOutputStreams)
  %39 = bitcast %SS* %2 to <2 x i64>*
  %40 = load <2 x i64>, <2 x i64>* %39, align 16
  %41 = load i64, i64* %31, align 16
  call void @llvm.lifetime.end(i64 24, i8* %29)
  call void @llvm.lifetime.end(i64 8, i8* %28)
  %42 = bitcast i32* %.in to <2 x i64>*
  store <2 x i64> %40, <2 x i64>* %42, align 8
  %._core5._owner = getelementptr inbounds i32, i32* %.in, i64 4
  %43 = bitcast i32* %._core5._owner to i64*
  store i64 %41, i64* %43, align 8
  %44 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 8
  %45 = call { i64, i64, i64 } @_TTSgq5SSSSs20TextOutputStreamables___TFs27_toStringReadOnlyStreamableuRxs20TextOutputStreamablerFxSS(i64 ptrtoint ([2 x i8]* @2 to i64), i64 1, i64 0)
  %46 = extractvalue { i64, i64, i64 } %45, 0
  %47 = extractvalue { i64, i64, i64 } %45, 1
  %48 = extractvalue { i64, i64, i64 } %45, 2
  %49 = bitcast %swift.refcounted* %44 to i64*
  store i64 %46, i64* %49, align 8
  %._core6._countAndFlags = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 8, i32 1
  %._core6._countAndFlags._value = bitcast i32* %._core6._countAndFlags to i64*
  store i64 %47, i64* %._core6._countAndFlags._value, align 8
  %._core6._owner = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 9
  %50 = bitcast %swift.refcounted* %._core6._owner to i64*
  store i64 %48, i64* %50, align 8
  %51 = call { i64, i64, i64 } @_TTSfq4g_d___TFSSCft19stringInterpolationGSaSS__SS(%swift.bridge* nonnull %13)
  %52 = bitcast %objc_object* %10 to %GCs23_ContiguousArrayStorageSS_*
  %53 = getelementptr inbounds %GCs23_ContiguousArrayStorageSS_, %GCs23_ContiguousArrayStorageSS_* %52, i64 0, i32 0
  call void @swift_setDeallocating(%swift.refcounted* %53) #22
  %54 = load i64, i64* %._storage.count._value, align 8, !range !28
  %55 = icmp eq i64 %54, 0
  br i1 %55, label %exit, label %loop.preheader

loop.preheader:                                   ; preds = %_TMaGSaV4Main8Employee_.exit
  br label %loop

loop:                                             ; preds = %loop.preheader, %loop
  %56 = phi %SS* [ %61, %loop ], [ %15, %loop.preheader ]
  %57 = phi i64 [ %60, %loop ], [ %54, %loop.preheader ]
  %._core8._owner = getelementptr inbounds %SS, %SS* %56, i64 0, i32 0, i32 2
  %58 = bitcast %GSqPs9AnyObject__* %._core8._owner to %objc_object**
  %59 = load %objc_object*, %objc_object** %58, align 8
  call void @swift_unknownRelease(%objc_object* %59) #22
  %60 = add i64 %57, -1
  %61 = getelementptr inbounds %SS, %SS* %56, i64 1
  %62 = icmp eq i64 %60, 0
  br i1 %62, label %exit.loopexit, label %loop

exit.loopexit:                                    ; preds = %loop
  br label %exit

exit:                                             ; preds = %exit.loopexit, %_TMaGSaV4Main8Employee_.exit
  %63 = bitcast %objc_object* %10 to i8*
  call void @llvm.lifetime.end(i64 -1, i8* %63)
  ret { i64, i64, i64 } %51

; <label>:64                                      ; preds = %_TMaGCs23_ContiguousArrayStorageSS_.exit
  %._core13 = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 1, i32 0
  %65 = bitcast %Vs11_StringCore* %._core13 to i64*
  %66 = load i64, i64* %65, align 8
  %._core13._countAndFlags._value = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 1, i32 0, i32 1, i32 0
  %67 = load i64, i64* %._core13._countAndFlags._value, align 8
  %._core13._owner = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 1, i32 0, i32 2
  %68 = bitcast %GSqPs9AnyObject__* %._core13._owner to i64*
  %69 = load i64, i64* %68, align 8
  %70 = call { i64, i64, i64 } @_TTSgq5SSSSs20TextOutputStreamables___TFs27_toStringReadOnlyStreamableuRxs20TextOutputStreamablerFxSS(i64 %66, i64 %67, i64 %69)
  %71 = extractvalue { i64, i64, i64 } %70, 0
  %72 = extractvalue { i64, i64, i64 } %70, 1
  %73 = extractvalue { i64, i64, i64 } %70, 2
  %74 = bitcast i32* %22 to i64*
  store i64 %71, i64* %74, align 8
  %._core14._countAndFlags = getelementptr inbounds i32, i32* %22, i64 2
  %._core14._countAndFlags._value = bitcast i32* %._core14._countAndFlags to i64*
  store i64 %72, i64* %._core14._countAndFlags._value, align 8
  %._core14._owner = getelementptr inbounds i32, i32* %22, i64 4
  %75 = bitcast i32* %._core14._owner to i64*
  store i64 %73, i64* %75, align 8
  %76 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 5
  %77 = call { i64, i64, i64 } @_TTSgq5SSSSs20TextOutputStreamables___TFs27_toStringReadOnlyStreamableuRxs20TextOutputStreamablerFxSS(i64 ptrtoint ([13 x i8]* @1 to i64), i64 12, i64 0)
  %78 = extractvalue { i64, i64, i64 } %77, 0
  %79 = extractvalue { i64, i64, i64 } %77, 1
  %80 = extractvalue { i64, i64, i64 } %77, 2
  %81 = bitcast %swift.refcounted* %76 to i64*
  store i64 %78, i64* %81, align 8
  %._core15._countAndFlags = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 5, i32 1
  %._core15._countAndFlags._value = bitcast i32* %._core15._countAndFlags to i64*
  store i64 %79, i64* %._core15._countAndFlags._value, align 8
  %._core15._owner = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 6
  %82 = bitcast %swift.refcounted* %._core15._owner to i64*
  store i64 %80, i64* %82, align 8
  %._buffer16._storage.rawValue = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %83 = load %swift.bridge*, %swift.bridge** %._buffer16._storage.rawValue, align 8
  %84 = inttoptr i64 %69 to %objc_object*
  call void @swift_unknownRetain(%objc_object* %84) #22
  %85 = call %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge* %83) #22
  br label %26

; <label>:86                                      ; preds = %_TMaGCs23_ContiguousArrayStorageSS_.exit
  %87 = icmp eq %swift.type* %24, bitcast (i64* getelementptr inbounds (<{ void (%C4Main12PaperCompany*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main12PaperCompany* (i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main12PaperCompany*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main12PaperCompany* (i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main12PaperCompany, i64 0, i32 2) to %swift.type*)
  br i1 %87, label %88, label %110

; <label>:88                                      ; preds = %86
  %._core9 = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 1, i32 0
  %89 = bitcast %Vs11_StringCore* %._core9 to i64*
  %90 = load i64, i64* %89, align 8
  %._core9._countAndFlags._value = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 1, i32 0, i32 1, i32 0
  %91 = load i64, i64* %._core9._countAndFlags._value, align 8
  %._core9._owner = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 1, i32 0, i32 2
  %92 = bitcast %GSqPs9AnyObject__* %._core9._owner to i64*
  %93 = load i64, i64* %92, align 8
  %94 = call { i64, i64, i64 } @_TTSgq5SSSSs20TextOutputStreamables___TFs27_toStringReadOnlyStreamableuRxs20TextOutputStreamablerFxSS(i64 %90, i64 %91, i64 %93)
  %95 = extractvalue { i64, i64, i64 } %94, 0
  %96 = extractvalue { i64, i64, i64 } %94, 1
  %97 = extractvalue { i64, i64, i64 } %94, 2
  %98 = bitcast i32* %22 to i64*
  store i64 %95, i64* %98, align 8
  %._core10._countAndFlags = getelementptr inbounds i32, i32* %22, i64 2
  %._core10._countAndFlags._value = bitcast i32* %._core10._countAndFlags to i64*
  store i64 %96, i64* %._core10._countAndFlags._value, align 8
  %._core10._owner = getelementptr inbounds i32, i32* %22, i64 4
  %99 = bitcast i32* %._core10._owner to i64*
  store i64 %97, i64* %99, align 8
  %100 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 5
  %101 = call { i64, i64, i64 } @_TTSgq5SSSSs20TextOutputStreamables___TFs27_toStringReadOnlyStreamableuRxs20TextOutputStreamablerFxSS(i64 ptrtoint ([13 x i8]* @1 to i64), i64 12, i64 0)
  %102 = extractvalue { i64, i64, i64 } %101, 0
  %103 = extractvalue { i64, i64, i64 } %101, 1
  %104 = extractvalue { i64, i64, i64 } %101, 2
  %105 = bitcast %swift.refcounted* %100 to i64*
  store i64 %102, i64* %105, align 8
  %._core11._countAndFlags = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 5, i32 1
  %._core11._countAndFlags._value = bitcast i32* %._core11._countAndFlags to i64*
  store i64 %103, i64* %._core11._countAndFlags._value, align 8
  %._core11._owner = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 6
  %106 = bitcast %swift.refcounted* %._core11._owner to i64*
  store i64 %104, i64* %106, align 8
  %._buffer12._storage.rawValue = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %107 = load %swift.bridge*, %swift.bridge** %._buffer12._storage.rawValue, align 8
  %108 = inttoptr i64 %93 to %objc_object*
  call void @swift_unknownRetain(%objc_object* %108) #22
  %109 = call %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge* %107) #22
  br label %26

; <label>:110                                     ; preds = %86
  %111 = getelementptr inbounds %swift.type, %swift.type* %24, i64 10
  %112 = bitcast %swift.type* %111 to { i64, i64, i64 } (%C4Main7Company*)**
  %113 = load { i64, i64, i64 } (%C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)** %112, align 8, !invariant.load !29
  %114 = call { i64, i64, i64 } %113(%C4Main7Company* nonnull %0)
  %115 = extractvalue { i64, i64, i64 } %114, 0
  %116 = extractvalue { i64, i64, i64 } %114, 1
  %117 = extractvalue { i64, i64, i64 } %114, 2
  %118 = call { i64, i64, i64 } @_TTSgq5SSSSs20TextOutputStreamables___TFs27_toStringReadOnlyStreamableuRxs20TextOutputStreamablerFxSS(i64 %115, i64 %116, i64 %117)
  %119 = extractvalue { i64, i64, i64 } %118, 0
  %120 = extractvalue { i64, i64, i64 } %118, 1
  %121 = extractvalue { i64, i64, i64 } %118, 2
  %122 = bitcast i32* %22 to i64*
  store i64 %119, i64* %122, align 8
  %._core1._countAndFlags = getelementptr inbounds i32, i32* %22, i64 2
  %._core1._countAndFlags._value = bitcast i32* %._core1._countAndFlags to i64*
  store i64 %120, i64* %._core1._countAndFlags._value, align 8
  %._core1._owner = getelementptr inbounds i32, i32* %22, i64 4
  %123 = bitcast i32* %._core1._owner to i64*
  store i64 %121, i64* %123, align 8
  %124 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 5
  %125 = call { i64, i64, i64 } @_TTSgq5SSSSs20TextOutputStreamables___TFs27_toStringReadOnlyStreamableuRxs20TextOutputStreamablerFxSS(i64 ptrtoint ([13 x i8]* @1 to i64), i64 12, i64 0)
  %126 = extractvalue { i64, i64, i64 } %125, 0
  %127 = extractvalue { i64, i64, i64 } %125, 1
  %128 = extractvalue { i64, i64, i64 } %125, 2
  %129 = bitcast %swift.refcounted* %124 to i64*
  store i64 %126, i64* %129, align 8
  %._core2._countAndFlags = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 5, i32 1
  %._core2._countAndFlags._value = bitcast i32* %._core2._countAndFlags to i64*
  store i64 %127, i64* %._core2._countAndFlags._value, align 8
  %._core2._owner = getelementptr inbounds %swift.refcounted, %swift.refcounted* %9, i64 6
  %130 = bitcast %swift.refcounted* %._core2._owner to i64*
  store i64 %128, i64* %130, align 8
  %131 = bitcast %C4Main7Company* %0 to %swift.bridge* (%C4Main7Company*)***
  %132 = load %swift.bridge* (%C4Main7Company*)**, %swift.bridge* (%C4Main7Company*)*** %131, align 8
  %133 = getelementptr inbounds %swift.bridge* (%C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)** %132, i64 13
  %134 = load %swift.bridge* (%C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)** %133, align 8, !invariant.load !29
  %135 = call %swift.bridge* %134(%C4Main7Company* nonnull %0)
  br label %26
}

; Function Attrs: nounwind
define hidden { i64, i64, i64 } @_TFC4Main7Companyg4nameSS(%C4Main7Company* nocapture readonly) #2 {
entry:
  %._core = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 1, i32 0
  %1 = bitcast %Vs11_StringCore* %._core to i64*
  %2 = load i64, i64* %1, align 8
  %._core._countAndFlags._value = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 1, i32 0, i32 1, i32 0
  %3 = load i64, i64* %._core._countAndFlags._value, align 8
  %._core._owner = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 1, i32 0, i32 2
  %4 = bitcast %GSqPs9AnyObject__* %._core._owner to i64*
  %5 = load i64, i64* %4, align 8
  %6 = inttoptr i64 %5 to %objc_object*
  %7 = insertvalue { i64, i64, i64 } undef, i64 %2, 0
  %8 = insertvalue { i64, i64, i64 } %7, i64 %3, 1
  %9 = insertvalue { i64, i64, i64 } %8, i64 %5, 2
  tail call void @swift_unknownRetain(%objc_object* %6) #22
  ret { i64, i64, i64 } %9
}

; Function Attrs: nounwind
define hidden void @_TFC4Main7Companys4nameSS(i64, i64, i64, %C4Main7Company* nocapture) #2 {
entry:
  %._core = getelementptr inbounds %C4Main7Company, %C4Main7Company* %3, i64 0, i32 1, i32 0
  %._core._owner = getelementptr inbounds %C4Main7Company, %C4Main7Company* %3, i64 0, i32 1, i32 0, i32 2
  %4 = bitcast %GSqPs9AnyObject__* %._core._owner to i64*
  %5 = bitcast %GSqPs9AnyObject__* %._core._owner to %objc_object**
  %6 = load %objc_object*, %objc_object** %5, align 8
  %7 = bitcast %Vs11_StringCore* %._core to i64*
  store i64 %0, i64* %7, align 8
  %._core1._countAndFlags._value = getelementptr inbounds %C4Main7Company, %C4Main7Company* %3, i64 0, i32 1, i32 0, i32 1, i32 0
  store i64 %1, i64* %._core1._countAndFlags._value, align 8
  store i64 %2, i64* %4, align 8
  tail call void @swift_unknownRelease(%objc_object* %6) #22
  ret void
}

; Function Attrs: norecurse nounwind readnone
define hidden { i8*, i64 } @_TFC4Main7Companym4nameSS(i8* nocapture readnone, [24 x i8]* nocapture readnone dereferenceable(24), %C4Main7Company*) #3 {
entry:
  %3 = getelementptr inbounds %C4Main7Company, %C4Main7Company* %2, i64 0, i32 1, i32 0, i32 0, i32 0, i64 0
  %4 = insertvalue { i8*, i64 } undef, i8* %3, 0
  %5 = insertvalue { i8*, i64 } %4, i64 0, 1
  ret { i8*, i64 } %5
}

; Function Attrs: nounwind
define hidden %swift.bridge* @_TFC4Main7Companyg9employeesGSaVS_8Employee_(%C4Main7Company* nocapture readonly) #2 {
entry:
  %._buffer._storage.rawValue = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %1 = load %swift.bridge*, %swift.bridge** %._buffer._storage.rawValue, align 8
  %2 = tail call %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge* %1) #22
  ret %swift.bridge* %1
}

; Function Attrs: nounwind
define hidden void @_TFC4Main7Companys9employeesGSaVS_8Employee_(%swift.bridge*, %C4Main7Company* nocapture) #2 {
entry:
  %._buffer._storage.rawValue = getelementptr inbounds %C4Main7Company, %C4Main7Company* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %2 = load %swift.bridge*, %swift.bridge** %._buffer._storage.rawValue, align 8
  store %swift.bridge* %0, %swift.bridge** %._buffer._storage.rawValue, align 8
  tail call void @swift_bridgeObjectRelease(%swift.bridge* %2) #22
  ret void
}

; Function Attrs: norecurse nounwind readnone
define hidden { i8*, i64 } @_TFC4Main7Companym9employeesGSaVS_8Employee_(i8* nocapture readnone, [24 x i8]* nocapture readnone dereferenceable(24), %C4Main7Company*) #3 {
entry:
  %3 = getelementptr inbounds %C4Main7Company, %C4Main7Company* %2, i64 0, i32 2
  %4 = bitcast %Sa* %3 to i8*
  %5 = insertvalue { i8*, i64 } undef, i8* %4, 0
  %6 = insertvalue { i8*, i64 } %5, i64 0, 1
  ret { i8*, i64 } %6
}

define { i64, i64, i64 } @_TTWC4Main7Companys23CustomStringConvertibleS_FS1_g11descriptionSS(%C4Main7Company** noalias nocapture readonly dereferenceable(8), %swift.type* nocapture readnone %Self, i8** nocapture readnone %SelfWitnessTable) #0 {
entry:
  %1 = load %C4Main7Company*, %C4Main7Company** %0, align 8
  %2 = getelementptr inbounds %C4Main7Company, %C4Main7Company* %1, i64 0, i32 0, i32 0
  %3 = load %swift.type*, %swift.type** %2, align 8
  %4 = icmp eq %swift.type* %3, bitcast (i64* getelementptr inbounds (<{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main7Company, i64 0, i32 2) to %swift.type*)
  br i1 %4, label %12, label %18

; <label>:5                                       ; preds = %12, %20, %26
  %6 = phi i64 [ %32, %26 ], [ %23, %20 ], [ %15, %12 ]
  %7 = phi i64 [ %33, %26 ], [ %24, %20 ], [ %16, %12 ]
  %8 = phi i64 [ %34, %26 ], [ %25, %20 ], [ %17, %12 ]
  %9 = insertvalue { i64, i64, i64 } undef, i64 %6, 0
  %10 = insertvalue { i64, i64, i64 } %9, i64 %7, 1
  %11 = insertvalue { i64, i64, i64 } %10, i64 %8, 2
  ret { i64, i64, i64 } %11

; <label>:12                                      ; preds = %entry
  %13 = getelementptr inbounds %C4Main7Company, %C4Main7Company* %1, i64 0, i32 0
  tail call void @rt_swift_retain(%swift.refcounted* %13) #22
  %14 = tail call { i64, i64, i64 } @_TFC4Main7Companyg11descriptionSS(%C4Main7Company* %1) #21
  tail call void @rt_swift_release(%swift.refcounted* %13) #22
  %15 = extractvalue { i64, i64, i64 } %14, 0
  %16 = extractvalue { i64, i64, i64 } %14, 1
  %17 = extractvalue { i64, i64, i64 } %14, 2
  br label %5

; <label>:18                                      ; preds = %entry
  %19 = icmp eq %swift.type* %3, bitcast (i64* getelementptr inbounds (<{ void (%C4Main12PaperCompany*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main12PaperCompany* (i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main12PaperCompany*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main12PaperCompany* (i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main12PaperCompany, i64 0, i32 2) to %swift.type*)
  br i1 %19, label %20, label %26

; <label>:20                                      ; preds = %18
  %21 = getelementptr inbounds %C4Main7Company, %C4Main7Company* %1, i64 0, i32 0
  tail call void @rt_swift_retain(%swift.refcounted* %21) #22
  %22 = tail call { i64, i64, i64 } @_TFC4Main7Companyg11descriptionSS(%C4Main7Company* %1) #21
  tail call void @rt_swift_release(%swift.refcounted* %21) #22
  %23 = extractvalue { i64, i64, i64 } %22, 0
  %24 = extractvalue { i64, i64, i64 } %22, 1
  %25 = extractvalue { i64, i64, i64 } %22, 2
  br label %5

; <label>:26                                      ; preds = %18
  %27 = getelementptr inbounds %swift.type, %swift.type* %3, i64 17
  %28 = bitcast %swift.type* %27 to { i64, i64, i64 } (%C4Main7Company*)**
  %29 = load { i64, i64, i64 } (%C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)** %28, align 8, !invariant.load !29
  %30 = getelementptr inbounds %C4Main7Company, %C4Main7Company* %1, i64 0, i32 0
  tail call void @rt_swift_retain(%swift.refcounted* %30) #22
  %31 = tail call { i64, i64, i64 } %29(%C4Main7Company* %1) #21
  tail call void @rt_swift_release(%swift.refcounted* %30) #22
  %32 = extractvalue { i64, i64, i64 } %31, 0
  %33 = extractvalue { i64, i64, i64 } %31, 1
  %34 = extractvalue { i64, i64, i64 } %31, 2
  br label %5
}

define hidden void @_TF4Main4loaduRxS_8Loadablexzwx6LoadedrFT6stringSS_x(%swift.opaque* noalias nocapture sret, i64, i64, i64, %swift.type* %T, i8** %T.Loadable) #0 {
entry:
  %4 = tail call %swift.bridge* @_TFE10FoundationSS10componentsfT11separatedBySS_GSaSS_(i64 ptrtoint ([2 x i8]* @3 to i64), i64 1, i64 0, i64 %1, i64 %2, i64 %3)
  %5 = load %swift.type*, %swift.type** @_TMLGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___, align 8
  %6 = icmp eq %swift.type* %5, null
  br i1 %6, label %cacheIsNull.i, label %_TMaGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___.exit

cacheIsNull.i:                                    ; preds = %entry
  %7 = tail call %swift.type* @_TMaGVs16IndexingIteratorGSaSS__() #17
  %8 = load i8**, i8*** @_TWLGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols, align 8
  %9 = icmp eq i8** %8, null
  br i1 %9, label %cacheIsNull.i.i, label %_TWlGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols.exit.i

cacheIsNull.i.i:                                  ; preds = %cacheIsNull.i
  %10 = tail call i8** @_TWauRxs13IndexableBaserGVs16IndexingIteratorx_s16IteratorProtocols(%swift.type* %7) #17
  store atomic i8** %10, i8*** @_TWLGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols release, align 8
  br label %_TWlGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols.exit.i

_TWlGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols.exit.i: ; preds = %cacheIsNull.i.i, %cacheIsNull.i
  %11 = phi i8** [ %8, %cacheIsNull.i ], [ %10, %cacheIsNull.i.i ]
  %12 = tail call %swift.type* @_TMaCs12_IteratorBox(%swift.type* %7, i8** %11) #17
  store atomic %swift.type* %12, %swift.type** @_TMLGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___ release, align 8
  br label %_TMaGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___.exit

_TMaGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___.exit: ; preds = %entry, %_TWlGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols.exit.i
  %13 = phi %swift.type* [ %5, %entry ], [ %12, %_TWlGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols.exit.i ]
  %14 = getelementptr inbounds %swift.type, %swift.type* %13, i64 6, i32 0
  %15 = load i64, i64* %14, align 8
  %16 = and i64 %15, 4294967295
  %17 = lshr i64 %15, 32
  %18 = and i64 %17, 65535
  %19 = tail call noalias %swift.refcounted* @rt_swift_allocObject(%swift.type* %13, i64 %16, i64 %18) #22
  %20 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %19, i64 1
  %._elements._buffer._storage.rawValue = bitcast %swift.refcounted* %20 to %swift.bridge**
  store %swift.bridge* %4, %swift.bridge** %._elements._buffer._storage.rawValue, align 8
  %._position = getelementptr inbounds %swift.refcounted, %swift.refcounted* %19, i64 1, i32 1
  %._position._value = bitcast i32* %._position to i64*
  store i64 0, i64* %._position._value, align 8
  %21 = bitcast %swift.refcounted* %19 to %GCs19_AnyIteratorBoxBaseSS_*
  %22 = getelementptr inbounds i8*, i8** %T.Loadable, i64 1
  %23 = bitcast i8** %22 to void (%swift.opaque*, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type*, %swift.type*, i8**)**
  %24 = load void (%swift.opaque*, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type*, %swift.type*, i8**)*, void (%swift.opaque*, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type*, %swift.type*, i8**)** %23, align 8, !invariant.load !29, !noalias !30
  tail call void %24(%swift.opaque* noalias nocapture sret %0, %GCs19_AnyIteratorBoxBaseSS_* %21, %swift.type* %T, %swift.type* %T, i8** %T.Loadable)
  %25 = inttoptr i64 %3 to %objc_object*
  tail call void @swift_unknownRelease(%objc_object* %25) #22
  ret void
}

define hidden void @_TF4Main4loaduRxS_8Loadablexzwx6LoadedrFT8iteratorGVs11AnyIteratorSS__x(%swift.opaque* noalias nocapture sret, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type* %T, i8** %T.Loadable) #0 {
entry:
  %2 = getelementptr inbounds i8*, i8** %T.Loadable, i64 1
  %3 = bitcast i8** %2 to void (%swift.opaque*, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type*, %swift.type*, i8**)**
  %4 = load void (%swift.opaque*, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type*, %swift.type*, i8**)*, void (%swift.opaque*, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type*, %swift.type*, i8**)** %3, align 8, !invariant.load !29
  tail call void %4(%swift.opaque* noalias nocapture sret %0, %GCs19_AnyIteratorBoxBaseSS_* %1, %swift.type* %T, %swift.type* %T, i8** %T.Loadable)
  ret void
}

define hidden %swift.bridge* @_TF4Main9loadArrayuRxS_8Loadablexzwx6LoadedrFT6stringSS_GSax_(i64, i64, i64, %swift.type* %T, i8** %T.Loadable) #0 {
entry:
  %3 = tail call %swift.bridge* @_TFE10FoundationSS10componentsfT11separatedBySS_GSaSS_(i64 ptrtoint ([2 x i8]* @3 to i64), i64 1, i64 0, i64 %0, i64 %1, i64 %2)
  %4 = load %swift.type*, %swift.type** @_TMLGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___, align 8
  %5 = icmp eq %swift.type* %4, null
  br i1 %5, label %cacheIsNull.i, label %_TMaGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___.exit

cacheIsNull.i:                                    ; preds = %entry
  %6 = tail call %swift.type* @_TMaGVs16IndexingIteratorGSaSS__() #17
  %7 = load i8**, i8*** @_TWLGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols, align 8
  %8 = icmp eq i8** %7, null
  br i1 %8, label %cacheIsNull.i.i, label %_TWlGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols.exit.i

cacheIsNull.i.i:                                  ; preds = %cacheIsNull.i
  %9 = tail call i8** @_TWauRxs13IndexableBaserGVs16IndexingIteratorx_s16IteratorProtocols(%swift.type* %6) #17
  store atomic i8** %9, i8*** @_TWLGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols release, align 8
  br label %_TWlGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols.exit.i

_TWlGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols.exit.i: ; preds = %cacheIsNull.i.i, %cacheIsNull.i
  %10 = phi i8** [ %7, %cacheIsNull.i ], [ %9, %cacheIsNull.i.i ]
  %11 = tail call %swift.type* @_TMaCs12_IteratorBox(%swift.type* %6, i8** %10) #17
  store atomic %swift.type* %11, %swift.type** @_TMLGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___ release, align 8
  br label %_TMaGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___.exit

_TMaGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___.exit: ; preds = %entry, %_TWlGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols.exit.i
  %12 = phi %swift.type* [ %4, %entry ], [ %11, %_TWlGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols.exit.i ]
  %13 = getelementptr inbounds %swift.type, %swift.type* %12, i64 6, i32 0
  %14 = load i64, i64* %13, align 8
  %15 = and i64 %14, 4294967295
  %16 = lshr i64 %14, 32
  %17 = and i64 %16, 65535
  %18 = tail call noalias %swift.refcounted* @rt_swift_allocObject(%swift.type* %12, i64 %15, i64 %17) #22
  %19 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %18, i64 1
  %._elements._buffer._storage.rawValue = bitcast %swift.refcounted* %19 to %swift.bridge**
  store %swift.bridge* %3, %swift.bridge** %._elements._buffer._storage.rawValue, align 8
  %._position = getelementptr inbounds %swift.refcounted, %swift.refcounted* %18, i64 1, i32 1
  %._position._value = bitcast i32* %._position to i64*
  store i64 0, i64* %._position._value, align 8
  %20 = bitcast %swift.refcounted* %18 to %GCs19_AnyIteratorBoxBaseSS_*
  %21 = tail call %swift.bridge* @_TZFe4MainRxS_8Loadablexzwx6LoadedrSa4loadfT8iteratorGVs11AnyIteratorSS__GSax_(%GCs19_AnyIteratorBoxBaseSS_* %20, %swift.type* %T, i8** %T.Loadable)
  %22 = inttoptr i64 %2 to %objc_object*
  tail call void @swift_unknownRelease(%objc_object* %22) #22
  ret %swift.bridge* %21
}

define hidden %swift.bridge* @_TF4Main9loadArrayuRxS_8Loadablexzwx6LoadedrFT8iteratorGVs11AnyIteratorSS__GSax_(%GCs19_AnyIteratorBoxBaseSS_*, %swift.type* %T, i8** %T.Loadable) #0 {
entry:
  %1 = tail call %swift.bridge* @_TZFe4MainRxS_8Loadablexzwx6LoadedrSa4loadfT8iteratorGVs11AnyIteratorSS__GSax_(%GCs19_AnyIteratorBoxBaseSS_* %0, %swift.type* %T, i8** %T.Loadable)
  ret %swift.bridge* %1
}

define hidden %swift.bridge* @_TZFe4MainRxS_8Loadablexzwx6LoadedrSa4loadfT8iteratorGVs11AnyIteratorSS__GSax_(%GCs19_AnyIteratorBoxBaseSS_*, %swift.type* %Element, i8** %Element.Loadable) #0 {
entry:
  %1 = alloca %Sa, align 8
  %2 = alloca %GSqSS_, align 8
  %3 = alloca [24 x i8], align 8
  %4 = bitcast %Sa* %1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %4)
  %5 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 25, i8* %5)
  %6 = load %swift.type*, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_, align 8
  %7 = icmp eq %swift.type* %6, null
  br i1 %7, label %cacheIsNull.i, label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

cacheIsNull.i:                                    ; preds = %entry
  %8 = tail call %swift.type* @_TMaCs19_AnyIteratorBoxBase(%swift.type* nonnull @_TMSS) #17
  store atomic %swift.type* %8, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_ release, align 8
  br label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

_TMaGCs19_AnyIteratorBoxBaseSS_.exit:             ; preds = %entry, %cacheIsNull.i
  %9 = phi %swift.type* [ %6, %entry ], [ %8, %cacheIsNull.i ]
  %10 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %swift.type**
  %11 = load %swift.type*, %swift.type** %10, align 8
  %12 = icmp eq %swift.type* %11, %9
  br i1 %12, label %37, label %38

; <label>:13                                      ; preds = %38
  %14 = inttoptr i64 %51 to %objc_object*
  tail call void @swift_unknownRetain(%objc_object* %14) #22
  %15 = tail call { i64, i1 } @_TFSiCfTSS5radixSi_GSqSi_(i64 %45, i64 %48, i64 %51, i64 10)
  %16 = extractvalue { i64, i1 } %15, 0
  %17 = extractvalue { i64, i1 } %15, 1
  br i1 %17, label %56, label %18

; <label>:18                                      ; preds = %13
  tail call void @swift_unknownRelease(%objc_object* %14) #22
  tail call void @rt_swift_retain(%swift.refcounted* nonnull bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.refcounted*)) #22
  %19 = tail call %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge* nonnull bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.bridge*)) #22
  %20 = tail call i8* @_TFVs12_ArrayBufferg19firstElementAddressGSpx_(%swift.bridge* nonnull bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.bridge*), %swift.type* %Element)
  tail call void @swift_bridgeObjectRelease(%swift.bridge* nonnull bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.bridge*)) #22
  %._buffer._storage.rawValue = getelementptr inbounds %Sa, %Sa* %1, i64 0, i32 0, i32 0, i32 0
  store %swift.bridge* bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.bridge*), %swift.bridge** %._buffer._storage.rawValue, align 8
  %21 = icmp slt i64 %16, 0
  br i1 %21, label %55, label %22

; <label>:22                                      ; preds = %18
  %23 = icmp eq i64 %16, 0
  br i1 %23, label %..loopexit_crit_edge, label %.preheader

..loopexit_crit_edge:                             ; preds = %22
  %.pre9 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %swift.refcounted*
  br label %.loopexit

.preheader:                                       ; preds = %22
  %24 = getelementptr inbounds [24 x i8], [24 x i8]* %3, i64 0, i64 0
  %25 = getelementptr inbounds %swift.type, %swift.type* %Element, i64 -1
  %26 = bitcast %swift.type* %25 to i8***
  %27 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %swift.refcounted*
  %28 = getelementptr inbounds i8*, i8** %Element.Loadable, i64 1
  %29 = bitcast i8** %28 to void (%swift.opaque*, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type*, %swift.type*, i8**)**
  %Element.valueWitnesses.pre = load i8**, i8*** %26, align 8, !invariant.load !29
  %.phi.trans.insert = getelementptr inbounds i8*, i8** %Element.valueWitnesses.pre, i64 11
  %.phi.trans.insert3 = bitcast i8** %.phi.trans.insert to %swift.opaque* ([24 x i8]*, %swift.type*)**
  %.pre = load %swift.opaque* ([24 x i8]*, %swift.type*)*, %swift.opaque* ([24 x i8]*, %swift.type*)** %.phi.trans.insert3, align 8, !invariant.load !29
  %.pre4 = load void (%swift.opaque*, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type*, %swift.type*, i8**)*, void (%swift.opaque*, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type*, %swift.type*, i8**)** %29, align 8, !invariant.load !29, !noalias !33
  %.phi.trans.insert5 = getelementptr inbounds i8*, i8** %Element.valueWitnesses.pre, i64 3
  %.phi.trans.insert6 = bitcast i8** %.phi.trans.insert5 to void ([24 x i8]*, %swift.type*)**
  %.pre7 = load void ([24 x i8]*, %swift.type*)*, void ([24 x i8]*, %swift.type*)** %.phi.trans.insert6, align 8, !invariant.load !29
  br label %31

.loopexit.loopexit:                               ; preds = %31
  %.pre8 = load %swift.bridge*, %swift.bridge** %._buffer._storage.rawValue, align 8
  br label %.loopexit

.loopexit:                                        ; preds = %..loopexit_crit_edge, %.loopexit.loopexit
  %.pre-phi = phi %swift.refcounted* [ %.pre9, %..loopexit_crit_edge ], [ %27, %.loopexit.loopexit ]
  %30 = phi %swift.bridge* [ bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.bridge*), %..loopexit_crit_edge ], [ %.pre8, %.loopexit.loopexit ]
  call void @rt_swift_release(%swift.refcounted* %.pre-phi) #22
  call void @llvm.lifetime.end(i64 8, i8* nonnull %4)
  ret %swift.bridge* %30

; <label>:31                                      ; preds = %.preheader, %31
  %32 = phi i64 [ %33, %31 ], [ 0, %.preheader ]
  %33 = add i64 %32, 1
  call void @llvm.lifetime.start(i64 24, i8* %24)
  %34 = call %swift.opaque* %.pre([24 x i8]* nonnull %3, %swift.type* %Element) #22
  call void @rt_swift_retain(%swift.refcounted* %27) #22
  call void %.pre4(%swift.opaque* noalias nocapture sret %34, %GCs19_AnyIteratorBoxBaseSS_* %0, %swift.type* %Element, %swift.type* %Element, i8** %Element.Loadable)
  %35 = call %swift.type* @_TMaSa(%swift.type* %Element) #17
  call void @_TFSa6appendfxT_(%swift.opaque* noalias nocapture %34, %swift.type* %35, %Sa* nocapture nonnull dereferenceable(8) %1)
  call void %.pre7([24 x i8]* nonnull %3, %swift.type* %Element) #22
  call void @llvm.lifetime.end(i64 24, i8* %24)
  %36 = icmp eq i64 %33, %16
  br i1 %36, label %.loopexit.loopexit, label %31

; <label>:37                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  tail call void @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never(i64 ptrtoint ([182 x i8]* @4 to i64), i64 181, i8 2, i64 119)
  unreachable

; <label>:38                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  %39 = getelementptr inbounds %swift.type, %swift.type* %11, i64 11
  %40 = bitcast %swift.type* %39 to void (%Sq*, %Cs19_AnyIteratorBoxBase*)**
  %41 = load void (%Sq*, %Cs19_AnyIteratorBoxBase*)*, void (%Sq*, %Cs19_AnyIteratorBoxBase*)** %40, align 8, !invariant.load !29
  %42 = bitcast %GSqSS_* %2 to %Sq*
  %43 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %Cs19_AnyIteratorBoxBase*
  call void %41(%Sq* noalias nocapture sret %42, %Cs19_AnyIteratorBoxBase* %43)
  %44 = bitcast %GSqSS_* %2 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 0, i64 8
  %47 = bitcast i8* %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 0, i64 16
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 1
  %53 = bitcast [1 x i8]* %52 to i1*
  %54 = load i1, i1* %53, align 8
  call void @llvm.lifetime.end(i64 25, i8* %5)
  br i1 %54, label %57, label %13

; <label>:55                                      ; preds = %18
  tail call void asm sideeffect "", "n"(i32 0) #22
  tail call void @llvm.trap()
  unreachable

; <label>:56                                      ; preds = %13
  tail call void asm sideeffect "", "n"(i32 2) #22
  tail call void @llvm.trap()
  unreachable

; <label>:57                                      ; preds = %38
  tail call void asm sideeffect "", "n"(i32 3) #22
  tail call void @llvm.trap()
  unreachable
}

define hidden i64 @_TZFE4MainSi4loadfT8iteratorGVs11AnyIteratorSS__Si(%GCs19_AnyIteratorBoxBaseSS_*) #0 {
entry:
  %1 = alloca %GSqSS_, align 8
  %2 = getelementptr inbounds %GSqSS_, %GSqSS_* %1, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 25, i8* %2)
  %3 = load %swift.type*, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_, align 8
  %4 = icmp eq %swift.type* %3, null
  br i1 %4, label %cacheIsNull.i, label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

cacheIsNull.i:                                    ; preds = %entry
  %5 = tail call %swift.type* @_TMaCs19_AnyIteratorBoxBase(%swift.type* nonnull @_TMSS) #17
  store atomic %swift.type* %5, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_ release, align 8
  br label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

_TMaGCs19_AnyIteratorBoxBaseSS_.exit:             ; preds = %entry, %cacheIsNull.i
  %6 = phi %swift.type* [ %3, %entry ], [ %5, %cacheIsNull.i ]
  %7 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %swift.type**
  %8 = load %swift.type*, %swift.type** %7, align 8
  %9 = icmp eq %swift.type* %8, %6
  br i1 %9, label %17, label %18

; <label>:10                                      ; preds = %18
  %11 = inttoptr i64 %31 to %objc_object*
  tail call void @swift_unknownRetain(%objc_object* %11) #22
  %12 = tail call { i64, i1 } @_TFSiCfTSS5radixSi_GSqSi_(i64 %25, i64 %28, i64 %31, i64 10)
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %35, label %14

; <label>:14                                      ; preds = %10
  tail call void @swift_unknownRelease(%objc_object* %11) #22
  %15 = extractvalue { i64, i1 } %12, 0
  %16 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %swift.refcounted*
  tail call void @rt_swift_release(%swift.refcounted* %16) #22
  ret i64 %15

; <label>:17                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  tail call void @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never(i64 ptrtoint ([182 x i8]* @4 to i64), i64 181, i8 2, i64 119)
  unreachable

; <label>:18                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  %19 = getelementptr inbounds %swift.type, %swift.type* %8, i64 11
  %20 = bitcast %swift.type* %19 to void (%Sq*, %Cs19_AnyIteratorBoxBase*)**
  %21 = load void (%Sq*, %Cs19_AnyIteratorBoxBase*)*, void (%Sq*, %Cs19_AnyIteratorBoxBase*)** %20, align 8, !invariant.load !29
  %22 = bitcast %GSqSS_* %1 to %Sq*
  %23 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %Cs19_AnyIteratorBoxBase*
  call void %21(%Sq* noalias nocapture sret %22, %Cs19_AnyIteratorBoxBase* %23)
  %24 = bitcast %GSqSS_* %1 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = getelementptr inbounds %GSqSS_, %GSqSS_* %1, i64 0, i32 0, i64 8
  %27 = bitcast i8* %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = getelementptr inbounds %GSqSS_, %GSqSS_* %1, i64 0, i32 0, i64 16
  %30 = bitcast i8* %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %GSqSS_, %GSqSS_* %1, i64 0, i32 1
  %33 = bitcast [1 x i8]* %32 to i1*
  %34 = load i1, i1* %33, align 8
  call void @llvm.lifetime.end(i64 25, i8* %2)
  br i1 %34, label %36, label %10

; <label>:35                                      ; preds = %10
  tail call void asm sideeffect "", "n"(i32 0) #22
  tail call void @llvm.trap()
  unreachable

; <label>:36                                      ; preds = %18
  tail call void asm sideeffect "", "n"(i32 1) #22
  tail call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden { i64, i1 } @_TFSiCfTSS5radixSi_GSqSi_(i64, i64, i64, i64) #0 {
entry:
  %4 = alloca %VSS9UTF16View, align 8
  %5 = alloca %VSS9UTF16View, align 8
  %6 = and i64 %1, 4611686018427387903
  %7 = icmp eq i64 %6, 0
  %8 = inttoptr i64 %2 to %objc_object*
  br i1 %7, label %83, label %9

; <label>:9                                       ; preds = %entry
  %._offset._value = getelementptr inbounds %VSS9UTF16View, %VSS9UTF16View* %4, i64 0, i32 0, i32 0
  store i64 0, i64* %._offset._value, align 8
  %._length._value = getelementptr inbounds %VSS9UTF16View, %VSS9UTF16View* %4, i64 0, i32 1, i32 0
  store i64 %6, i64* %._length._value, align 8
  %._core = getelementptr inbounds %VSS9UTF16View, %VSS9UTF16View* %4, i64 0, i32 2
  %10 = bitcast %Vs11_StringCore* %._core to i64*
  store i64 %0, i64* %10, align 8
  %._core._countAndFlags._value = getelementptr inbounds %VSS9UTF16View, %VSS9UTF16View* %4, i64 0, i32 2, i32 1, i32 0
  store i64 %1, i64* %._core._countAndFlags._value, align 8
  %._core._owner = getelementptr inbounds %VSS9UTF16View, %VSS9UTF16View* %4, i64 0, i32 2, i32 2
  %11 = bitcast %GSqPs9AnyObject__* %._core._owner to i64*
  store i64 %2, i64* %11, align 8
  tail call void @swift_unknownRetain(%objc_object* %8) #22
  %12 = call i16 @_TFVSS9UTF16Viewg9subscriptFVS_5IndexVs6UInt16(i64 0, %VSS9UTF16View* noalias nocapture nonnull dereferenceable(40) %4)
  switch i16 %12, label %.thread [
    i16 45, label %13
    i16 43, label %14
  ]

; <label>:13                                      ; preds = %9
  br label %14

; <label>:14                                      ; preds = %9, %13
  %15 = phi i64 [ -9223372036854775808, %13 ], [ 9223372036854775807, %9 ]
  %16 = phi i1 [ true, %13 ], [ false, %9 ]
  %17 = add nsw i64 %6, -1
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %81, label %.thread

.thread:                                          ; preds = %9, %14
  %19 = phi i1 [ %16, %14 ], [ false, %9 ]
  %20 = phi i64 [ %17, %14 ], [ %6, %9 ]
  %21 = phi i64 [ 1, %14 ], [ 0, %9 ]
  %22 = phi i64 [ %15, %14 ], [ 9223372036854775807, %9 ]
  %.off = add i64 %3, -2
  %23 = icmp ugt i64 %.off, 34
  br i1 %23, label %89, label %24

; <label>:24                                      ; preds = %.thread
  %._offset1._value = getelementptr inbounds %VSS9UTF16View, %VSS9UTF16View* %5, i64 0, i32 0, i32 0
  %._length2._value = getelementptr inbounds %VSS9UTF16View, %VSS9UTF16View* %5, i64 0, i32 1, i32 0
  %._core3 = getelementptr inbounds %VSS9UTF16View, %VSS9UTF16View* %5, i64 0, i32 2
  %25 = bitcast %Vs11_StringCore* %._core3 to i64*
  %._core3._countAndFlags._value = getelementptr inbounds %VSS9UTF16View, %VSS9UTF16View* %5, i64 0, i32 2, i32 1, i32 0
  %._core3._owner = getelementptr inbounds %VSS9UTF16View, %VSS9UTF16View* %5, i64 0, i32 2, i32 2
  %26 = bitcast %GSqPs9AnyObject__* %._core3._owner to i64*
  %27 = bitcast %objc_object* %8 to %swift.refcounted*
  tail call void @swift_unknownRetain_n(%swift.refcounted* %27, i32 2)
  br label %28

; <label>:28                                      ; preds = %67, %24
  %29 = phi i64 [ 0, %24 ], [ %63, %67 ]
  %30 = phi i64 [ 0, %24 ], [ %68, %67 ]
  store i64 %21, i64* %._offset1._value, align 8
  store i64 %20, i64* %._length2._value, align 8
  store i64 %0, i64* %25, align 8
  store i64 %1, i64* %._core3._countAndFlags._value, align 8
  store i64 %2, i64* %26, align 8
  tail call void @swift_unknownRetain(%objc_object* %8) #22
  %31 = call i16 @_TFVSS9UTF16Viewg9subscriptFVS_5IndexVs6UInt16(i64 %30, %VSS9UTF16View* noalias nocapture nonnull dereferenceable(40) %5)
  tail call void @swift_unknownRelease(%objc_object* %8) #22
  %.off6 = add i16 %31, -48
  %32 = icmp ult i16 %.off6, 10
  br i1 %32, label %52, label %33

; <label>:33                                      ; preds = %28
  %.off7 = add i16 %31, -97
  %34 = icmp ult i16 %.off7, 26
  br i1 %34, label %49, label %35

; <label>:35                                      ; preds = %33
  %36 = icmp ugt i16 %31, 64
  br i1 %36, label %39, label %37

; <label>:37                                      ; preds = %35
  %38 = bitcast %objc_object* %8 to %swift.refcounted*
  tail call void @swift_unknownRelease_n(%swift.refcounted* %38, i32 2)
  br label %43

; <label>:39                                      ; preds = %35
  %40 = icmp ult i16 %31, 91
  br i1 %40, label %45, label %41

; <label>:41                                      ; preds = %39
  %42 = bitcast %objc_object* %8 to %swift.refcounted*
  tail call void @swift_unknownRelease_n(%swift.refcounted* %42, i32 2)
  br label %43

; <label>:43                                      ; preds = %41, %37
  %44 = bitcast %objc_object* %8 to %swift.refcounted*
  tail call void @swift_unknownRelease_n(%swift.refcounted* %44, i32 2)
  br label %84

; <label>:45                                      ; preds = %39
  %46 = add i16 %31, -65
  %47 = zext i16 %46 to i64
  %48 = add nuw nsw i64 %47, 10
  br label %54

; <label>:49                                      ; preds = %33
  %50 = zext i16 %.off7 to i64
  %51 = add nuw nsw i64 %50, 10
  br label %54

; <label>:52                                      ; preds = %28
  %53 = zext i16 %.off6 to i64
  br label %54

; <label>:54                                      ; preds = %49, %45, %52
  %55 = phi i64 [ %53, %52 ], [ %48, %45 ], [ %51, %49 ]
  %56 = icmp ult i64 %55, %3
  br i1 %56, label %57, label %79

; <label>:57                                      ; preds = %54
  %58 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %29, i64 %3)
  %59 = extractvalue { i64, i1 } %58, 1
  br i1 %59, label %77, label %60

; <label>:60                                      ; preds = %57
  %61 = extractvalue { i64, i1 } %58, 0
  %62 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %61, i64 %55)
  %63 = extractvalue { i64, i1 } %62, 0
  %64 = extractvalue { i64, i1 } %62, 1
  br i1 %64, label %75, label %65

; <label>:65                                      ; preds = %60
  %66 = icmp ugt i64 %63, %22
  br i1 %66, label %73, label %67

; <label>:67                                      ; preds = %65
  %68 = add i64 %30, 1
  %69 = icmp eq i64 %68, %20
  br i1 %69, label %70, label %28

; <label>:70                                      ; preds = %67
  %.lcssa20 = phi i64 [ %63, %67 ]
  %71 = bitcast %objc_object* %8 to %swift.refcounted*
  tail call void @swift_unknownRelease_n(%swift.refcounted* %71, i32 4)
  %72 = sub i64 0, %.lcssa20
  %.8 = select i1 %19, i64 %72, i64 %.lcssa20
  br label %84

; <label>:73                                      ; preds = %65
  %74 = bitcast %objc_object* %8 to %swift.refcounted*
  tail call void @swift_unknownRelease_n(%swift.refcounted* %74, i32 4)
  br label %84

; <label>:75                                      ; preds = %60
  %76 = bitcast %objc_object* %8 to %swift.refcounted*
  tail call void @swift_unknownRelease_n(%swift.refcounted* %76, i32 4)
  br label %84

; <label>:77                                      ; preds = %57
  %78 = bitcast %objc_object* %8 to %swift.refcounted*
  tail call void @swift_unknownRelease_n(%swift.refcounted* %78, i32 4)
  br label %84

; <label>:79                                      ; preds = %54
  %80 = bitcast %objc_object* %8 to %swift.refcounted*
  tail call void @swift_unknownRelease_n(%swift.refcounted* %80, i32 4)
  br label %84

; <label>:81                                      ; preds = %14
  %82 = bitcast %objc_object* %8 to %swift.refcounted*
  tail call void @swift_unknownRelease_n(%swift.refcounted* %82, i32 2)
  br label %84

; <label>:83                                      ; preds = %entry
  tail call void @swift_unknownRelease(%objc_object* %8) #22
  br label %84

; <label>:84                                      ; preds = %70, %43, %73, %75, %77, %79, %81, %83
  %85 = phi i64 [ 0, %83 ], [ 0, %81 ], [ 0, %79 ], [ 0, %77 ], [ 0, %75 ], [ 0, %73 ], [ 0, %43 ], [ %.8, %70 ]
  %86 = phi i1 [ true, %83 ], [ true, %81 ], [ true, %79 ], [ true, %77 ], [ true, %75 ], [ true, %73 ], [ true, %43 ], [ false, %70 ]
  %87 = insertvalue { i64, i1 } undef, i64 %85, 0
  %88 = insertvalue { i64, i1 } %87, i1 %86, 1
  ret { i64, i1 } %88

; <label>:89                                      ; preds = %.thread
  tail call void asm sideeffect "", "n"(i32 1) #22
  tail call void @llvm.trap()
  unreachable
}

define hidden void @_TTWSi4Main8LoadableS_ZFS0_4loadfT8iteratorGVs11AnyIteratorSS__wx6Loaded(%Si* noalias nocapture sret, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type* nocapture readnone, %swift.type* nocapture readnone %Self, i8** nocapture readnone %SelfWitnessTable) #0 {
entry:
  %3 = alloca %GSqSS_, align 8
  %4 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 25, i8* %4)
  %5 = load %swift.type*, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_, align 8
  %6 = icmp eq %swift.type* %5, null
  br i1 %6, label %cacheIsNull.i, label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

cacheIsNull.i:                                    ; preds = %entry
  %7 = tail call %swift.type* @_TMaCs19_AnyIteratorBoxBase(%swift.type* nonnull @_TMSS) #17
  store atomic %swift.type* %7, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_ release, align 8
  br label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

_TMaGCs19_AnyIteratorBoxBaseSS_.exit:             ; preds = %entry, %cacheIsNull.i
  %8 = phi %swift.type* [ %5, %entry ], [ %7, %cacheIsNull.i ]
  %9 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %swift.type**
  %10 = load %swift.type*, %swift.type** %9, align 8
  %11 = icmp eq %swift.type* %10, %8
  br i1 %11, label %19, label %20

; <label>:12                                      ; preds = %20
  %13 = inttoptr i64 %33 to %objc_object*
  tail call void @swift_unknownRetain(%objc_object* %13) #22
  %14 = tail call { i64, i1 } @_TFSiCfTSS5radixSi_GSqSi_(i64 %27, i64 %30, i64 %33, i64 10) #21
  %15 = extractvalue { i64, i1 } %14, 1
  br i1 %15, label %37, label %16

; <label>:16                                      ; preds = %12
  tail call void @swift_unknownRelease(%objc_object* %13) #22
  %17 = extractvalue { i64, i1 } %14, 0
  %18 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %swift.refcounted*
  tail call void @rt_swift_release(%swift.refcounted* %18) #22
  %._value = getelementptr inbounds %Si, %Si* %0, i64 0, i32 0
  store i64 %17, i64* %._value, align 8
  ret void

; <label>:19                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  tail call void @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never(i64 ptrtoint ([182 x i8]* @4 to i64), i64 181, i8 2, i64 119) #21
  unreachable

; <label>:20                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  %21 = getelementptr inbounds %swift.type, %swift.type* %10, i64 11
  %22 = bitcast %swift.type* %21 to void (%Sq*, %Cs19_AnyIteratorBoxBase*)**
  %23 = load void (%Sq*, %Cs19_AnyIteratorBoxBase*)*, void (%Sq*, %Cs19_AnyIteratorBoxBase*)** %22, align 8, !invariant.load !29
  %24 = bitcast %GSqSS_* %3 to %Sq*
  %25 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %Cs19_AnyIteratorBoxBase*
  call void %23(%Sq* noalias nocapture sret %24, %Cs19_AnyIteratorBoxBase* %25) #21
  %26 = bitcast %GSqSS_* %3 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 0, i64 8
  %29 = bitcast i8* %28 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 0, i64 16
  %32 = bitcast i8* %31 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 1
  %35 = bitcast [1 x i8]* %34 to i1*
  %36 = load i1, i1* %35, align 8
  call void @llvm.lifetime.end(i64 25, i8* %4)
  br i1 %36, label %38, label %12

; <label>:37                                      ; preds = %12
  tail call void asm sideeffect "", "n"(i32 0) #22
  tail call void @llvm.trap()
  unreachable

; <label>:38                                      ; preds = %20
  tail call void asm sideeffect "", "n"(i32 1) #22
  tail call void @llvm.trap()
  unreachable
}

define hidden { i64, i64, i64 } @_TZFE4MainSS4loadfT8iteratorGVs11AnyIteratorSS__SS(%GCs19_AnyIteratorBoxBaseSS_*) #0 {
entry:
  %1 = alloca %GSqSS_, align 8
  %2 = getelementptr inbounds %GSqSS_, %GSqSS_* %1, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 25, i8* %2)
  %3 = load %swift.type*, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_, align 8
  %4 = icmp eq %swift.type* %3, null
  br i1 %4, label %cacheIsNull.i, label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

cacheIsNull.i:                                    ; preds = %entry
  %5 = tail call %swift.type* @_TMaCs19_AnyIteratorBoxBase(%swift.type* nonnull @_TMSS) #17
  store atomic %swift.type* %5, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_ release, align 8
  br label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

_TMaGCs19_AnyIteratorBoxBaseSS_.exit:             ; preds = %entry, %cacheIsNull.i
  %6 = phi %swift.type* [ %3, %entry ], [ %5, %cacheIsNull.i ]
  %7 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %swift.type**
  %8 = load %swift.type*, %swift.type** %7, align 8
  %9 = icmp eq %swift.type* %8, %6
  br i1 %9, label %15, label %16

; <label>:10                                      ; preds = %16
  %11 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %swift.refcounted*
  tail call void @rt_swift_release(%swift.refcounted* %11) #22
  %12 = insertvalue { i64, i64, i64 } undef, i64 %23, 0
  %13 = insertvalue { i64, i64, i64 } %12, i64 %26, 1
  %14 = insertvalue { i64, i64, i64 } %13, i64 %29, 2
  ret { i64, i64, i64 } %14

; <label>:15                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  tail call void @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never(i64 ptrtoint ([182 x i8]* @4 to i64), i64 181, i8 2, i64 119)
  unreachable

; <label>:16                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  %17 = getelementptr inbounds %swift.type, %swift.type* %8, i64 11
  %18 = bitcast %swift.type* %17 to void (%Sq*, %Cs19_AnyIteratorBoxBase*)**
  %19 = load void (%Sq*, %Cs19_AnyIteratorBoxBase*)*, void (%Sq*, %Cs19_AnyIteratorBoxBase*)** %18, align 8, !invariant.load !29
  %20 = bitcast %GSqSS_* %1 to %Sq*
  %21 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %Cs19_AnyIteratorBoxBase*
  call void %19(%Sq* noalias nocapture sret %20, %Cs19_AnyIteratorBoxBase* %21)
  %22 = bitcast %GSqSS_* %1 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %GSqSS_, %GSqSS_* %1, i64 0, i32 0, i64 8
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %GSqSS_, %GSqSS_* %1, i64 0, i32 0, i64 16
  %28 = bitcast i8* %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %GSqSS_, %GSqSS_* %1, i64 0, i32 1
  %31 = bitcast [1 x i8]* %30 to i1*
  %32 = load i1, i1* %31, align 8
  call void @llvm.lifetime.end(i64 25, i8* %2)
  br i1 %32, label %33, label %10

; <label>:33                                      ; preds = %16
  tail call void asm sideeffect "", "n"(i32 0) #22
  tail call void @llvm.trap()
  unreachable
}

define hidden void @_TTWSS4Main8LoadableS_ZFS0_4loadfT8iteratorGVs11AnyIteratorSS__wx6Loaded(%SS* noalias nocapture sret, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type* nocapture readnone, %swift.type* nocapture readnone %Self, i8** nocapture readnone %SelfWitnessTable) #0 {
entry:
  %3 = alloca %GSqSS_, align 16
  %4 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 25, i8* %4)
  %5 = load %swift.type*, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_, align 8
  %6 = icmp eq %swift.type* %5, null
  br i1 %6, label %cacheIsNull.i, label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

cacheIsNull.i:                                    ; preds = %entry
  %7 = tail call %swift.type* @_TMaCs19_AnyIteratorBoxBase(%swift.type* nonnull @_TMSS) #17
  store atomic %swift.type* %7, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_ release, align 8
  br label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

_TMaGCs19_AnyIteratorBoxBaseSS_.exit:             ; preds = %entry, %cacheIsNull.i
  %8 = phi %swift.type* [ %5, %entry ], [ %7, %cacheIsNull.i ]
  %9 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %swift.type**
  %10 = load %swift.type*, %swift.type** %9, align 8
  %11 = icmp eq %swift.type* %10, %8
  br i1 %11, label %16, label %17

; <label>:12                                      ; preds = %17
  %13 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %swift.refcounted*
  tail call void @rt_swift_release(%swift.refcounted* %13) #22
  %14 = bitcast %SS* %0 to <2 x i64>*
  store <2 x i64> %24, <2 x i64>* %14, align 8
  %._core._owner = getelementptr inbounds %SS, %SS* %0, i64 0, i32 0, i32 2
  %15 = bitcast %GSqPs9AnyObject__* %._core._owner to i64*
  store i64 %27, i64* %15, align 8
  ret void

; <label>:16                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  tail call void @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never(i64 ptrtoint ([182 x i8]* @4 to i64), i64 181, i8 2, i64 119) #21
  unreachable

; <label>:17                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  %18 = getelementptr inbounds %swift.type, %swift.type* %10, i64 11
  %19 = bitcast %swift.type* %18 to void (%Sq*, %Cs19_AnyIteratorBoxBase*)**
  %20 = load void (%Sq*, %Cs19_AnyIteratorBoxBase*)*, void (%Sq*, %Cs19_AnyIteratorBoxBase*)** %19, align 8, !invariant.load !29
  %21 = bitcast %GSqSS_* %3 to %Sq*
  %22 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %Cs19_AnyIteratorBoxBase*
  call void %20(%Sq* noalias nocapture sret %21, %Cs19_AnyIteratorBoxBase* %22) #21
  %23 = bitcast %GSqSS_* %3 to <2 x i64>*
  %24 = load <2 x i64>, <2 x i64>* %23, align 16
  %25 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 0, i64 16
  %26 = bitcast i8* %25 to i64*
  %27 = load i64, i64* %26, align 16
  %28 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 1
  %29 = bitcast [1 x i8]* %28 to i1*
  %30 = load i1, i1* %29, align 8
  call void @llvm.lifetime.end(i64 25, i8* %4)
  br i1 %30, label %31, label %12

; <label>:31                                      ; preds = %17
  tail call void asm sideeffect "", "n"(i32 0) #22
  tail call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden void @_TFSa6appendfxT_(%swift.opaque* noalias nocapture, %swift.type* nocapture readonly %"Array<Element>", %Sa* nocapture dereferenceable(8)) #0 {
entry:
  tail call void @_TFSa40_makeUniqueAndReserveCapacityIfNotUniquefT_T_(%swift.type* %"Array<Element>", %Sa* nocapture nonnull dereferenceable(8) %1)
  %._buffer._storage.rawValue = getelementptr inbounds %Sa, %Sa* %1, i64 0, i32 0, i32 0, i32 0
  %2 = load %swift.bridge*, %swift.bridge** %._buffer._storage.rawValue, align 8
  %3 = getelementptr inbounds %swift.type, %swift.type* %"Array<Element>", i64 4
  %4 = bitcast %swift.type* %3 to %swift.type**
  %Element = load %swift.type*, %swift.type** %4, align 8, !invariant.load !29
  %5 = tail call %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge* %2) #22
  %6 = tail call i64 @_TFVs12_ArrayBufferg5countSi(%swift.bridge* %2, %swift.type* %Element)
  tail call void @swift_bridgeObjectRelease(%swift.bridge* %2) #22
  %7 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %6, i64 1)
  %8 = extractvalue { i64, i1 } %7, 1
  br i1 %8, label %16, label %9

; <label>:9                                       ; preds = %entry
  %10 = extractvalue { i64, i1 } %7, 0
  %11 = load %swift.bridge*, %swift.bridge** %._buffer._storage.rawValue, align 8
  %12 = tail call %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge* %11) #22
  %13 = tail call i64 @_TFVs12_ArrayBufferg8capacitySi(%swift.bridge* %11, %swift.type* %Element)
  tail call void @swift_bridgeObjectRelease(%swift.bridge* %11) #22
  %14 = icmp sgt i64 %10, %13
  br i1 %14, label %15, label %_TFSa36_reserveCapacityAssumingUniqueBufferfT8oldCountSi_T_.exit, !prof !36

; <label>:15                                      ; preds = %9
  tail call void @_TFSa16_copyToNewBufferfT8oldCountSi_T_(i64 %6, %swift.type* nonnull %"Array<Element>", %Sa* nocapture nonnull dereferenceable(8) %1)
  br label %_TFSa36_reserveCapacityAssumingUniqueBufferfT8oldCountSi_T_.exit

; <label>:16                                      ; preds = %entry
  tail call void asm sideeffect "", "n"(i32 0) #22
  tail call void @llvm.trap()
  unreachable

_TFSa36_reserveCapacityAssumingUniqueBufferfT8oldCountSi_T_.exit: ; preds = %9, %15
  tail call void @_TFSa37_appendElementAssumeUniqueAndCapacityfTSi10newElementx_T_(i64 %6, %swift.opaque* noalias nocapture %0, %swift.type* nonnull %"Array<Element>", %Sa* nocapture nonnull dereferenceable(8) %1)
  ret void
}

define hidden void @_TZFV4Main8Employee4loadfT8iteratorGVs11AnyIteratorSS__S0_(%V4Main8Employee* noalias nocapture sret, %GCs19_AnyIteratorBoxBaseSS_*) #0 {
entry:
  %call.aggresult = alloca %V4Main8Employee, align 16
  %2 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %call.aggresult, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 32, i8* %2)
  call void @_TTSf4g_d___TZFV4Main8Employee4loadfT8iteratorGVs11AnyIteratorSS__S0_(%V4Main8Employee* noalias nocapture nonnull sret %call.aggresult, %GCs19_AnyIteratorBoxBaseSS_* %1) #21
  %3 = bitcast %V4Main8Employee* %call.aggresult to <2 x i64>*
  %4 = load <2 x i64>, <2 x i64>* %3, align 16
  %call.aggresult.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %call.aggresult, i64 0, i32 0, i32 0, i32 2
  %5 = bitcast %GSqPs9AnyObject__* %call.aggresult.name._core._owner to <2 x i64>*
  %6 = load <2 x i64>, <2 x i64>* %5, align 16
  call void @llvm.lifetime.end(i64 32, i8* %2)
  %7 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %swift.refcounted*
  tail call void @rt_swift_release(%swift.refcounted* %7) #22
  %8 = bitcast %V4Main8Employee* %0 to <2 x i64>*
  store <2 x i64> %4, <2 x i64>* %8, align 8
  %.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 0, i32 0, i32 2
  %9 = bitcast %GSqPs9AnyObject__* %.name._core._owner to <2 x i64>*
  store <2 x i64> %6, <2 x i64>* %9, align 8
  ret void
}

define hidden void @_TTWV4Main8EmployeeS_8LoadableS_ZFS1_4loadfT8iteratorGVs11AnyIteratorSS__wx6Loaded(%V4Main8Employee* noalias nocapture sret, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type* nocapture readnone, %swift.type* nocapture readnone %Self, i8** nocapture readnone %SelfWitnessTable) #0 {
entry:
  %call.aggresult = alloca %V4Main8Employee, align 16
  %3 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %call.aggresult, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 32, i8* %3)
  call void @_TTSf4g_d___TZFV4Main8Employee4loadfT8iteratorGVs11AnyIteratorSS__S0_(%V4Main8Employee* noalias nocapture nonnull sret %call.aggresult, %GCs19_AnyIteratorBoxBaseSS_* %1) #21
  %4 = bitcast %V4Main8Employee* %call.aggresult to <2 x i64>*
  %5 = load <2 x i64>, <2 x i64>* %4, align 16
  %call.aggresult.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %call.aggresult, i64 0, i32 0, i32 0, i32 2
  %6 = bitcast %GSqPs9AnyObject__* %call.aggresult.name._core._owner to <2 x i64>*
  %7 = load <2 x i64>, <2 x i64>* %6, align 16
  call void @llvm.lifetime.end(i64 32, i8* %3)
  %8 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %swift.refcounted*
  tail call void @rt_swift_release(%swift.refcounted* %8) #22
  %9 = bitcast %V4Main8Employee* %0 to <2 x i64>*
  store <2 x i64> %5, <2 x i64>* %9, align 8
  %.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 0, i32 0, i32 2
  %10 = bitcast %GSqPs9AnyObject__* %.name._core._owner to <2 x i64>*
  store <2 x i64> %7, <2 x i64>* %10, align 8
  ret void
}

define hidden noalias %C4Main7Company* @_TZFC4Main7Company4loadfT8iteratorGVs11AnyIteratorSS__S0_(%GCs19_AnyIteratorBoxBaseSS_*, %swift.type* nocapture readnone) #0 {
entry:
  %2 = alloca %GSqSS_, align 16
  %3 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 25, i8* %3)
  %4 = load %swift.type*, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_, align 8
  %5 = icmp eq %swift.type* %4, null
  br i1 %5, label %cacheIsNull.i, label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

cacheIsNull.i:                                    ; preds = %entry
  %6 = tail call %swift.type* @_TMaCs19_AnyIteratorBoxBase(%swift.type* nonnull @_TMSS) #17
  store atomic %swift.type* %6, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_ release, align 8
  br label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

_TMaGCs19_AnyIteratorBoxBaseSS_.exit:             ; preds = %entry, %cacheIsNull.i
  %7 = phi %swift.type* [ %4, %entry ], [ %6, %cacheIsNull.i ]
  %8 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %swift.type**
  %9 = load %swift.type*, %swift.type** %8, align 8
  %10 = icmp eq %swift.type* %9, %7
  br i1 %10, label %25, label %26

; <label>:11                                      ; preds = %26
  %12 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %swift.refcounted*
  tail call void @rt_swift_retain(%swift.refcounted* %12) #22
  %13 = tail call %swift.bridge* @_TTSf4g_d___TTSg5V4Main8EmployeeS0_S_8LoadableS____TZFe4MainRxS_8Loadablexzwx6LoadedrSa4loadfT8iteratorGVs11AnyIteratorSS__GSax_(%GCs19_AnyIteratorBoxBaseSS_* nonnull %0)
  tail call void @rt_swift_release(%swift.refcounted* %12) #22
  %14 = load %swift.type*, %swift.type** @_TMLC4Main7Company, align 8
  %15 = icmp eq %swift.type* %14, null
  br i1 %15, label %cacheIsNull.i1, label %_TMaC4Main7Company.exit

cacheIsNull.i1:                                   ; preds = %11
  %16 = tail call %objc_class* @rt_swift_getInitializedObjCClass(%objc_class* nonnull bitcast (i64* getelementptr inbounds (<{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main7Company, i64 0, i32 2) to %objc_class*)) #22
  %17 = bitcast %objc_class* %16 to %swift.type*
  store atomic %swift.type* %17, %swift.type** @_TMLC4Main7Company release, align 8
  br label %_TMaC4Main7Company.exit

_TMaC4Main7Company.exit:                          ; preds = %11, %cacheIsNull.i1
  %18 = phi %swift.type* [ %14, %11 ], [ %17, %cacheIsNull.i1 ]
  %19 = tail call noalias %swift.refcounted* @rt_swift_allocObject(%swift.type* %18, i64 48, i64 7) #22
  %20 = bitcast %swift.refcounted* %19 to %C4Main7Company*
  %21 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %19, i64 1
  %22 = bitcast %swift.refcounted* %21 to <2 x i64>*
  store <2 x i64> %33, <2 x i64>* %22, align 8
  %._core._owner = getelementptr inbounds %swift.refcounted, %swift.refcounted* %19, i64 2
  %23 = bitcast %swift.refcounted* %._core._owner to i64*
  store i64 %36, i64* %23, align 8
  %24 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %19, i64 2, i32 1
  %._buffer._storage.rawValue = bitcast i32* %24 to %swift.bridge**
  store %swift.bridge* %13, %swift.bridge** %._buffer._storage.rawValue, align 8
  tail call void @rt_swift_release(%swift.refcounted* %12) #22
  ret %C4Main7Company* %20

; <label>:25                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  tail call void @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never(i64 ptrtoint ([182 x i8]* @4 to i64), i64 181, i8 2, i64 119)
  unreachable

; <label>:26                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  %27 = getelementptr inbounds %swift.type, %swift.type* %9, i64 11
  %28 = bitcast %swift.type* %27 to void (%Sq*, %Cs19_AnyIteratorBoxBase*)**
  %29 = load void (%Sq*, %Cs19_AnyIteratorBoxBase*)*, void (%Sq*, %Cs19_AnyIteratorBoxBase*)** %28, align 8, !invariant.load !29
  %30 = bitcast %GSqSS_* %2 to %Sq*
  %31 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %Cs19_AnyIteratorBoxBase*
  call void %29(%Sq* noalias nocapture sret %30, %Cs19_AnyIteratorBoxBase* %31)
  %32 = bitcast %GSqSS_* %2 to <2 x i64>*
  %33 = load <2 x i64>, <2 x i64>* %32, align 16
  %34 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 0, i64 16
  %35 = bitcast i8* %34 to i64*
  %36 = load i64, i64* %35, align 16
  %37 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 1
  %38 = bitcast [1 x i8]* %37 to i1*
  %39 = load i1, i1* %38, align 8
  call void @llvm.lifetime.end(i64 25, i8* %3)
  br i1 %39, label %40, label %11

; <label>:40                                      ; preds = %26
  tail call void asm sideeffect "", "n"(i32 0) #22
  tail call void @llvm.trap()
  unreachable
}

define hidden void @_TTWC4Main7CompanyS_8LoadableS_ZFS1_4loadfT8iteratorGVs11AnyIteratorSS__wx6Loaded(%C4Main7Company** noalias nocapture sret, %GCs19_AnyIteratorBoxBaseSS_*, %swift.type* nocapture readnone, %swift.type* nocapture readnone %Self, i8** nocapture readnone %SelfWitnessTable) #0 {
entry:
  %3 = alloca %GSqSS_, align 16
  %4 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 25, i8* %4)
  %5 = load %swift.type*, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_, align 8
  %6 = icmp eq %swift.type* %5, null
  br i1 %6, label %cacheIsNull.i, label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

cacheIsNull.i:                                    ; preds = %entry
  %7 = tail call %swift.type* @_TMaCs19_AnyIteratorBoxBase(%swift.type* nonnull @_TMSS) #17
  store atomic %swift.type* %7, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_ release, align 8
  br label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

_TMaGCs19_AnyIteratorBoxBaseSS_.exit:             ; preds = %entry, %cacheIsNull.i
  %8 = phi %swift.type* [ %5, %entry ], [ %7, %cacheIsNull.i ]
  %9 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %swift.type**
  %10 = load %swift.type*, %swift.type** %9, align 8
  %11 = icmp eq %swift.type* %10, %8
  br i1 %11, label %26, label %27

; <label>:12                                      ; preds = %27
  %13 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %swift.refcounted*
  tail call void @rt_swift_retain(%swift.refcounted* %13) #22
  %14 = tail call %swift.bridge* @_TTSf4g_d___TTSg5V4Main8EmployeeS0_S_8LoadableS____TZFe4MainRxS_8Loadablexzwx6LoadedrSa4loadfT8iteratorGVs11AnyIteratorSS__GSax_(%GCs19_AnyIteratorBoxBaseSS_* nonnull %1) #21
  tail call void @rt_swift_release(%swift.refcounted* %13) #22
  %15 = load %swift.type*, %swift.type** @_TMLC4Main7Company, align 8
  %16 = icmp eq %swift.type* %15, null
  br i1 %16, label %cacheIsNull.i1, label %_TMaC4Main7Company.exit

cacheIsNull.i1:                                   ; preds = %12
  %17 = tail call %objc_class* @rt_swift_getInitializedObjCClass(%objc_class* nonnull bitcast (i64* getelementptr inbounds (<{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main7Company, i64 0, i32 2) to %objc_class*)) #22
  %18 = bitcast %objc_class* %17 to %swift.type*
  store atomic %swift.type* %18, %swift.type** @_TMLC4Main7Company release, align 8
  br label %_TMaC4Main7Company.exit

_TMaC4Main7Company.exit:                          ; preds = %12, %cacheIsNull.i1
  %19 = phi %swift.type* [ %15, %12 ], [ %18, %cacheIsNull.i1 ]
  %20 = tail call noalias %swift.refcounted* @rt_swift_allocObject(%swift.type* %19, i64 48, i64 7) #22
  %21 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %20, i64 1
  %22 = bitcast %swift.refcounted* %21 to <2 x i64>*
  store <2 x i64> %34, <2 x i64>* %22, align 8
  %._core._owner = getelementptr inbounds %swift.refcounted, %swift.refcounted* %20, i64 2
  %23 = bitcast %swift.refcounted* %._core._owner to i64*
  store i64 %37, i64* %23, align 8
  %24 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %20, i64 2, i32 1
  %._buffer._storage.rawValue = bitcast i32* %24 to %swift.bridge**
  store %swift.bridge* %14, %swift.bridge** %._buffer._storage.rawValue, align 8
  tail call void @rt_swift_release(%swift.refcounted* %13) #22
  %25 = bitcast %C4Main7Company** %0 to %swift.refcounted**
  store %swift.refcounted* %20, %swift.refcounted** %25, align 8
  ret void

; <label>:26                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  tail call void @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never(i64 ptrtoint ([182 x i8]* @4 to i64), i64 181, i8 2, i64 119) #21
  unreachable

; <label>:27                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  %28 = getelementptr inbounds %swift.type, %swift.type* %10, i64 11
  %29 = bitcast %swift.type* %28 to void (%Sq*, %Cs19_AnyIteratorBoxBase*)**
  %30 = load void (%Sq*, %Cs19_AnyIteratorBoxBase*)*, void (%Sq*, %Cs19_AnyIteratorBoxBase*)** %29, align 8, !invariant.load !29
  %31 = bitcast %GSqSS_* %3 to %Sq*
  %32 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %Cs19_AnyIteratorBoxBase*
  call void %30(%Sq* noalias nocapture sret %31, %Cs19_AnyIteratorBoxBase* %32) #21
  %33 = bitcast %GSqSS_* %3 to <2 x i64>*
  %34 = load <2 x i64>, <2 x i64>* %33, align 16
  %35 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 0, i64 16
  %36 = bitcast i8* %35 to i64*
  %37 = load i64, i64* %36, align 16
  %38 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 1
  %39 = bitcast [1 x i8]* %38 to i1*
  %40 = load i1, i1* %39, align 8
  call void @llvm.lifetime.end(i64 25, i8* %4)
  br i1 %40, label %41, label %12

; <label>:41                                      ; preds = %27
  tail call void asm sideeffect "", "n"(i32 0) #22
  tail call void @llvm.trap()
  unreachable
}

define hidden void @_TFC4Main12PaperCompanyD(%C4Main12PaperCompany*) #0 {
entry:
  %._core._owner = getelementptr inbounds %C4Main12PaperCompany, %C4Main12PaperCompany* %0, i64 0, i32 1, i32 0, i32 2
  %1 = bitcast %GSqPs9AnyObject__* %._core._owner to %objc_object**
  %2 = load %objc_object*, %objc_object** %1, align 8
  tail call void @swift_unknownRelease(%objc_object* %2) #22
  %._buffer._storage.rawValue = getelementptr inbounds %C4Main12PaperCompany, %C4Main12PaperCompany* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %3 = load %swift.bridge*, %swift.bridge** %._buffer._storage.rawValue, align 8
  tail call void @swift_bridgeObjectRelease(%swift.bridge* %3) #22
  %4 = getelementptr inbounds %C4Main12PaperCompany, %C4Main12PaperCompany* %0, i64 0, i32 0
  tail call void @swift_deallocClassInstance(%swift.refcounted* %4, i64 48, i64 7)
  ret void
}

; Function Attrs: nounwind
define hidden %swift.refcounted* @_TFC4Main12PaperCompanyd(%C4Main12PaperCompany* readonly) #2 {
entry:
  %1 = getelementptr inbounds %C4Main12PaperCompany, %C4Main12PaperCompany* %0, i64 0, i32 0
  %._core._owner = getelementptr inbounds %C4Main12PaperCompany, %C4Main12PaperCompany* %0, i64 0, i32 1, i32 0, i32 2
  %2 = bitcast %GSqPs9AnyObject__* %._core._owner to %objc_object**
  %3 = load %objc_object*, %objc_object** %2, align 8
  tail call void @swift_unknownRelease(%objc_object* %3) #22
  %._buffer._storage.rawValue = getelementptr inbounds %C4Main12PaperCompany, %C4Main12PaperCompany* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %4 = load %swift.bridge*, %swift.bridge** %._buffer._storage.rawValue, align 8
  tail call void @swift_bridgeObjectRelease(%swift.bridge* %4) #22
  ret %swift.refcounted* %1
}

; Function Attrs: norecurse nounwind
define hidden %C4Main12PaperCompany* @_TFC4Main12PaperCompanycfT4nameSS9employeesGSaVS_8Employee__S0_(i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*) #1 {
entry:
  %._core = getelementptr inbounds %C4Main12PaperCompany, %C4Main12PaperCompany* %4, i64 0, i32 1, i32 0
  %5 = bitcast %Vs11_StringCore* %._core to i64*
  store i64 %0, i64* %5, align 8
  %._core._countAndFlags._value = getelementptr inbounds %C4Main12PaperCompany, %C4Main12PaperCompany* %4, i64 0, i32 1, i32 0, i32 1, i32 0
  store i64 %1, i64* %._core._countAndFlags._value, align 8
  %._core._owner = getelementptr inbounds %C4Main12PaperCompany, %C4Main12PaperCompany* %4, i64 0, i32 1, i32 0, i32 2
  %6 = bitcast %GSqPs9AnyObject__* %._core._owner to i64*
  store i64 %2, i64* %6, align 8
  %._buffer._storage.rawValue = getelementptr inbounds %C4Main12PaperCompany, %C4Main12PaperCompany* %4, i64 0, i32 2, i32 0, i32 0, i32 0
  store %swift.bridge* %3, %swift.bridge** %._buffer._storage.rawValue, align 8
  ret %C4Main12PaperCompany* %4
}

; Function Attrs: nounwind
define hidden noalias %C4Main12PaperCompany* @_TFC4Main12PaperCompanyCfT4nameSS9employeesGSaVS_8Employee__S0_(i64, i64, i64, %swift.bridge*, %swift.type* nocapture readnone) #2 {
  %6 = tail call noalias %C4Main7Company* @_TFC4Main7CompanyCfT4nameSS9employeesGSaVS_8Employee__S0__merged(i64 %0, i64 %1, i64 %2, %swift.bridge* %3, %swift.type* nocapture readnone %4, %swift.type** @_TMLC4Main12PaperCompany, %objc_class* bitcast (i64* getelementptr inbounds (<{ void (%C4Main12PaperCompany*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main12PaperCompany* (i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main12PaperCompany*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main12PaperCompany* (i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main12PaperCompany, i64 0, i32 2) to %objc_class*)) #2
  %7 = bitcast %C4Main7Company* %6 to %C4Main12PaperCompany*
  ret %C4Main12PaperCompany* %7
}

; Function Attrs: nounwind
define internal noalias %C4Main7Company* @_TFC4Main7CompanyCfT4nameSS9employeesGSaVS_8Employee__S0__merged(i64, i64, i64, %swift.bridge*, %swift.type* nocapture readnone, %swift.type**, %objc_class*) #2 {
entry:
  %7 = load %swift.type*, %swift.type** %5, align 8
  %8 = icmp eq %swift.type* %7, null
  br i1 %8, label %cacheIsNull.i, label %_TMaC4Main7Company.exit

cacheIsNull.i:                                    ; preds = %entry
  %9 = tail call %objc_class* @rt_swift_getInitializedObjCClass(%objc_class* nonnull %6) #22
  %10 = bitcast %objc_class* %9 to %swift.type*
  store atomic %swift.type* %10, %swift.type** %5 release, align 8
  br label %_TMaC4Main7Company.exit

_TMaC4Main7Company.exit:                          ; preds = %entry, %cacheIsNull.i
  %11 = phi %swift.type* [ %7, %entry ], [ %10, %cacheIsNull.i ]
  %12 = tail call noalias %swift.refcounted* @rt_swift_allocObject(%swift.type* %11, i64 48, i64 7) #22
  %13 = bitcast %swift.refcounted* %12 to %C4Main7Company*
  %14 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %12, i64 1
  %15 = bitcast %swift.refcounted* %14 to i64*
  store i64 %0, i64* %15, align 8
  %._core._countAndFlags = getelementptr inbounds %swift.refcounted, %swift.refcounted* %12, i64 1, i32 1
  %._core._countAndFlags._value = bitcast i32* %._core._countAndFlags to i64*
  store i64 %1, i64* %._core._countAndFlags._value, align 8
  %._core._owner = getelementptr inbounds %swift.refcounted, %swift.refcounted* %12, i64 2
  %16 = bitcast %swift.refcounted* %._core._owner to i64*
  store i64 %2, i64* %16, align 8
  %17 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %12, i64 2, i32 1
  %._buffer._storage.rawValue = bitcast i32* %17 to %swift.bridge**
  store %swift.bridge* %3, %swift.bridge** %._buffer._storage.rawValue, align 8
  ret %C4Main7Company* %13
}

define hidden void @_TF4Main4mainFT_T_() #0 {
entry:
  %protocols.i.i = alloca [0 x %swift.protocol*], align 8
  %reference.raw45 = alloca [2 x %swift.refcounted], align 8
  %reference.raw446 = alloca [2 x %swift.refcounted], align 8
  %0 = alloca %swift.refcounted*, align 8
  %tmpcast = bitcast %swift.refcounted** %0 to %Sa*
  %1 = alloca %swift.refcounted*, align 8
  %tmpcast47 = bitcast %swift.refcounted** %1 to %Sa*
  %2 = alloca %GSqSS_, align 8
  %3 = alloca %GSqSS_, align 16
  %4 = alloca %GSqSS_, align 8
  %reference.raw446.sub = getelementptr inbounds [2 x %swift.refcounted], [2 x %swift.refcounted]* %reference.raw446, i64 0, i64 0
  %reference.raw45.sub = getelementptr inbounds [2 x %swift.refcounted], [2 x %swift.refcounted]* %reference.raw45, i64 0, i64 0
  %5 = tail call %swift.bridge* @_TFE10FoundationSS10componentsfT11separatedBySS_GSaSS_(i64 ptrtoint ([2 x i8]* @3 to i64), i64 1, i64 0, i64 ptrtoint ([3 x i8]* @5 to i64), i64 2, i64 0)
  %6 = load %swift.type*, %swift.type** @_TMLGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___, align 8
  %7 = icmp eq %swift.type* %6, null
  br i1 %7, label %cacheIsNull.i, label %_TMaGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___.exit

cacheIsNull.i:                                    ; preds = %entry
  %8 = tail call %swift.type* @_TMaGVs16IndexingIteratorGSaSS__() #17
  %9 = load i8**, i8*** @_TWLGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols, align 8
  %10 = icmp eq i8** %9, null
  br i1 %10, label %cacheIsNull.i.i, label %_TWlGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols.exit.i

cacheIsNull.i.i:                                  ; preds = %cacheIsNull.i
  %11 = tail call i8** @_TWauRxs13IndexableBaserGVs16IndexingIteratorx_s16IteratorProtocols(%swift.type* %8) #17
  store atomic i8** %11, i8*** @_TWLGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols release, align 8
  br label %_TWlGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols.exit.i

_TWlGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols.exit.i: ; preds = %cacheIsNull.i.i, %cacheIsNull.i
  %12 = phi i8** [ %9, %cacheIsNull.i ], [ %11, %cacheIsNull.i.i ]
  %13 = tail call %swift.type* @_TMaCs12_IteratorBox(%swift.type* %8, i8** %12) #17
  store atomic %swift.type* %13, %swift.type** @_TMLGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___ release, align 8
  br label %_TMaGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___.exit

_TMaGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___.exit: ; preds = %entry, %_TWlGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols.exit.i
  %14 = phi %swift.type* [ %6, %entry ], [ %13, %_TWlGVs16IndexingIteratorGSaSS__uRxs13IndexableBaserGS_x_s16IteratorProtocols.exit.i ]
  %reference.new = call %swift.refcounted* @swift_initStackObject(%swift.type* %14, %swift.refcounted* %reference.raw45.sub) #22
  %15 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %reference.new, i64 1
  %._elements._buffer._storage.rawValue = bitcast %swift.refcounted* %15 to %swift.bridge**
  store %swift.bridge* %5, %swift.bridge** %._elements._buffer._storage.rawValue, align 8
  %._position = getelementptr inbounds %swift.refcounted, %swift.refcounted* %reference.new, i64 1, i32 1
  %._position._value = bitcast i32* %._position to i64*
  store i64 0, i64* %._position._value, align 8
  %16 = bitcast %swift.bridge* %5 to i8*
  %17 = getelementptr inbounds i8, i8* %16, i64 16
  %._storage.count._value = bitcast i8* %17 to i64*
  %18 = load i64, i64* %._storage.count._value, align 8, !range !28
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %337, label %20

; <label>:20                                      ; preds = %_TMaGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___.exit
  %21 = getelementptr inbounds i8, i8* %16, i64 32
  %22 = bitcast i8* %21 to i64*
  %23 = load i64, i64* %22, align 8
  %._core._countAndFlags = getelementptr inbounds i8, i8* %16, i64 40
  %._core._countAndFlags._value = bitcast i8* %._core._countAndFlags to i64*
  %24 = load i64, i64* %._core._countAndFlags._value, align 8
  %._core._owner = getelementptr inbounds i8, i8* %16, i64 48
  %25 = bitcast i8* %._core._owner to i64*
  %26 = load i64, i64* %25, align 8
  store i64 1, i64* %._position._value, align 8
  %27 = inttoptr i64 %26 to %objc_object*
  %28 = bitcast %objc_object* %27 to %swift.refcounted*
  tail call void @swift_unknownRetain_n(%swift.refcounted* %28, i32 2)
  %29 = call { i64, i1 } @_TFSiCfTSS5radixSi_GSqSi_(i64 %23, i64 %24, i64 %26, i64 10)
  %30 = extractvalue { i64, i1 } %29, 0
  %31 = extractvalue { i64, i1 } %29, 1
  br i1 %31, label %352, label %32

; <label>:32                                      ; preds = %20
  call void @swift_unknownRelease(%objc_object* %27) #22
  call void @swift_setDeallocating(%swift.refcounted* nonnull %reference.new) #22
  %33 = load %swift.bridge*, %swift.bridge** %._elements._buffer._storage.rawValue, align 8
  call void @swift_bridgeObjectRelease(%swift.bridge* %33) #22
  %34 = bitcast %swift.refcounted* %reference.new to i8*
  call void @llvm.lifetime.end(i64 -1, i8* %34)
  %35 = load %swift.type*, %swift.type** @_TMLGCs23_ContiguousArrayStorageP__, align 8
  %36 = icmp eq %swift.type* %35, null
  br i1 %36, label %cacheIsNull.i49, label %_TMaGCs23_ContiguousArrayStorageP__.exit

cacheIsNull.i49:                                  ; preds = %32
  %37 = load %swift.type*, %swift.type** @_TMLP_, align 8
  %38 = icmp eq %swift.type* %37, null
  br i1 %38, label %cacheIsNull.i.i50, label %_TMaP_.exit.i

cacheIsNull.i.i50:                                ; preds = %cacheIsNull.i49
  %39 = bitcast [0 x %swift.protocol*]* %protocols.i.i to i8*
  call void @llvm.lifetime.start(i64 0, i8* %39) #22
  %40 = getelementptr inbounds [0 x %swift.protocol*], [0 x %swift.protocol*]* %protocols.i.i, i64 0, i64 0
  %41 = call %swift.type* @rt_swift_getExistentialTypeMetadata(i64 0, %swift.protocol** %40) #22
  call void @llvm.lifetime.end(i64 0, i8* %39) #22
  store atomic %swift.type* %41, %swift.type** @_TMLP_ release, align 8
  br label %_TMaP_.exit.i

_TMaP_.exit.i:                                    ; preds = %cacheIsNull.i.i50, %cacheIsNull.i49
  %42 = phi %swift.type* [ %37, %cacheIsNull.i49 ], [ %41, %cacheIsNull.i.i50 ]
  %43 = call %swift.type* @_TMaCs23_ContiguousArrayStorage(%swift.type* %42) #17
  store atomic %swift.type* %43, %swift.type** @_TMLGCs23_ContiguousArrayStorageP__ release, align 8
  br label %_TMaGCs23_ContiguousArrayStorageP__.exit

_TMaGCs23_ContiguousArrayStorageP__.exit:         ; preds = %32, %_TMaP_.exit.i
  %44 = phi %swift.type* [ %35, %32 ], [ %43, %_TMaP_.exit.i ]
  %45 = call %objc_object* @swift_bufferAllocate(%swift.type* %44, i64 64, i64 7)
  %46 = bitcast %objc_object* %45 to i8*
  %47 = getelementptr inbounds i8, i8* %46, i64 16
  %48 = bitcast i8* %47 to <2 x i64>*
  store <2 x i64> <i64 1, i64 2>, <2 x i64>* %48, align 8
  %49 = bitcast %objc_object* %45 to %swift.bridge*
  %50 = getelementptr inbounds i8, i8* %46, i64 32
  %51 = getelementptr inbounds i8, i8* %46, i64 56
  %52 = bitcast i8* %51 to %swift.type**
  store %swift.type* @_TMSi, %swift.type** %52, align 8
  %object._value = bitcast i8* %50 to i64*
  store i64 %30, i64* %object._value, align 8
  %53 = call { i64, i64, i64 } @_TIFs5printFTGSaP__9separatorSS10terminatorSS_T_A0_()
  %54 = extractvalue { i64, i64, i64 } %53, 0
  %55 = extractvalue { i64, i64, i64 } %53, 1
  %56 = extractvalue { i64, i64, i64 } %53, 2
  %57 = call { i64, i64, i64 } @_TIFs5printFTGSaP__9separatorSS10terminatorSS_T_A1_()
  %58 = extractvalue { i64, i64, i64 } %57, 0
  %59 = extractvalue { i64, i64, i64 } %57, 1
  %60 = extractvalue { i64, i64, i64 } %57, 2
  call void @_TFs5printFTGSaP__9separatorSS10terminatorSS_T_(%swift.bridge* %49, i64 %54, i64 %55, i64 %56, i64 %58, i64 %59, i64 %60)
  %61 = call %swift.bridge* @_TFE10FoundationSS10componentsfT11separatedBySS_GSaSS_(i64 ptrtoint ([2 x i8]* @3 to i64), i64 1, i64 0, i64 ptrtoint ([4 x i8]* @6 to i64), i64 3, i64 0)
  %reference.new5 = call %swift.refcounted* @swift_initStackObject(%swift.type* %14, %swift.refcounted* %reference.raw446.sub) #22
  %62 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %reference.new5, i64 1
  %._elements6._buffer._storage.rawValue = bitcast %swift.refcounted* %62 to %swift.bridge**
  store %swift.bridge* %61, %swift.bridge** %._elements6._buffer._storage.rawValue, align 8
  %._position7 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %reference.new5, i64 1, i32 1
  %._position7._value = bitcast i32* %._position7 to i64*
  store i64 0, i64* %._position7._value, align 8
  %63 = bitcast %swift.bridge* %61 to i8*
  %64 = getelementptr inbounds i8, i8* %63, i64 16
  %._storage9.count._value = bitcast i8* %64 to i64*
  %65 = load i64, i64* %._storage9.count._value, align 8, !range !28
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %338, label %67

; <label>:67                                      ; preds = %_TMaGCs23_ContiguousArrayStorageP__.exit
  %68 = getelementptr inbounds i8, i8* %63, i64 32
  %69 = bitcast i8* %68 to <2 x i64>*
  %70 = load <2 x i64>, <2 x i64>* %69, align 8
  %._core10._owner = getelementptr inbounds i8, i8* %63, i64 48
  %71 = bitcast i8* %._core10._owner to i64*
  %72 = load i64, i64* %71, align 8
  store i64 1, i64* %._position7._value, align 8
  call void @swift_setDeallocating(%swift.refcounted* %reference.new5) #22
  %73 = load %swift.bridge*, %swift.bridge** %._elements6._buffer._storage.rawValue, align 8
  %74 = inttoptr i64 %72 to %objc_object*
  call void @swift_unknownRetain(%objc_object* %74) #22
  call void @swift_bridgeObjectRelease(%swift.bridge* %73) #22
  %75 = bitcast %swift.refcounted* %reference.new5 to i8*
  call void @llvm.lifetime.end(i64 -1, i8* %75)
  %76 = call %objc_object* @swift_bufferAllocate(%swift.type* %44, i64 64, i64 7)
  %77 = bitcast %objc_object* %76 to i8*
  %78 = getelementptr inbounds i8, i8* %77, i64 16
  %79 = bitcast i8* %78 to <2 x i64>*
  store <2 x i64> <i64 1, i64 2>, <2 x i64>* %79, align 8
  %80 = bitcast %objc_object* %76 to %swift.bridge*
  %81 = getelementptr inbounds i8, i8* %77, i64 32
  %82 = getelementptr inbounds i8, i8* %77, i64 56
  %83 = bitcast i8* %82 to %swift.type**
  store %swift.type* @_TMSS, %swift.type** %83, align 8
  %84 = bitcast i8* %81 to <2 x i64>*
  store <2 x i64> %70, <2 x i64>* %84, align 8
  %object13._core._owner = getelementptr inbounds i8, i8* %77, i64 48
  %85 = bitcast i8* %object13._core._owner to i64*
  store i64 %72, i64* %85, align 8
  call void @swift_unknownRetain(%objc_object* %74) #22
  %86 = call { i64, i64, i64 } @_TIFs5printFTGSaP__9separatorSS10terminatorSS_T_A0_()
  %87 = extractvalue { i64, i64, i64 } %86, 0
  %88 = extractvalue { i64, i64, i64 } %86, 1
  %89 = extractvalue { i64, i64, i64 } %86, 2
  %90 = call { i64, i64, i64 } @_TIFs5printFTGSaP__9separatorSS10terminatorSS_T_A1_()
  %91 = extractvalue { i64, i64, i64 } %90, 0
  %92 = extractvalue { i64, i64, i64 } %90, 1
  %93 = extractvalue { i64, i64, i64 } %90, 2
  call void @_TFs5printFTGSaP__9separatorSS10terminatorSS_T_(%swift.bridge* %80, i64 %87, i64 %88, i64 %89, i64 %91, i64 %92, i64 %93)
  %94 = call %swift.bridge* @_TFE10FoundationSS10componentsfT11separatedBySS_GSaSS_(i64 ptrtoint ([2 x i8]* @3 to i64), i64 1, i64 0, i64 ptrtoint ([22 x i8]* @7 to i64), i64 21, i64 0)
  %95 = getelementptr inbounds %swift.type, %swift.type* %14, i64 6, i32 0
  %96 = load i64, i64* %95, align 8
  %97 = and i64 %96, 4294967295
  %98 = lshr i64 %96, 32
  %99 = and i64 %98, 65535
  %100 = call noalias %swift.refcounted* @rt_swift_allocObject(%swift.type* %14, i64 %97, i64 %99) #22
  %101 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %100, i64 1
  %._elements14._buffer._storage.rawValue = bitcast %swift.refcounted* %101 to %swift.bridge**
  store %swift.bridge* %94, %swift.bridge** %._elements14._buffer._storage.rawValue, align 8
  %._position15 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %100, i64 1, i32 1
  %._position15._value = bitcast i32* %._position15 to i64*
  store i64 0, i64* %._position15._value, align 8
  %102 = bitcast %swift.refcounted** %0 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %102)
  %103 = bitcast %swift.bridge* %94 to i8*
  %104 = getelementptr inbounds i8, i8* %103, i64 16
  %._storage17.count._value = bitcast i8* %104 to i64*
  %105 = load i64, i64* %._storage17.count._value, align 8, !range !28
  %106 = icmp eq i64 %105, 0
  %107 = bitcast %swift.bridge* %94 to i8*
  br i1 %106, label %339, label %108

; <label>:108                                     ; preds = %67
  %109 = getelementptr inbounds i8, i8* %103, i64 32
  %110 = bitcast i8* %109 to i64*
  %111 = load i64, i64* %110, align 8
  %._core18._countAndFlags = getelementptr inbounds i8, i8* %103, i64 40
  %._core18._countAndFlags._value = bitcast i8* %._core18._countAndFlags to i64*
  %112 = load i64, i64* %._core18._countAndFlags._value, align 8
  %._core18._owner = getelementptr inbounds i8, i8* %103, i64 48
  %113 = bitcast i8* %._core18._owner to i64*
  %114 = load i64, i64* %113, align 8
  store i64 1, i64* %._position15._value, align 8
  %115 = inttoptr i64 %114 to %objc_object*
  %116 = bitcast %objc_object* %115 to %swift.refcounted*
  tail call void @swift_unknownRetain_n(%swift.refcounted* %116, i32 2)
  %117 = call { i64, i1 } @_TFSiCfTSS5radixSi_GSqSi_(i64 %111, i64 %112, i64 %114, i64 10)
  %118 = extractvalue { i64, i1 } %117, 0
  %119 = extractvalue { i64, i1 } %117, 1
  br i1 %119, label %351, label %120

; <label>:120                                     ; preds = %108
  call void @swift_unknownRelease(%objc_object* %115) #22
  %._buffer._storage.rawValue = bitcast %swift.refcounted** %0 to %swift.bridge**
  store %swift.bridge* bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.bridge*), %swift.bridge** %._buffer._storage.rawValue, align 8
  %121 = icmp slt i64 %118, 0
  br i1 %121, label %340, label %122

; <label>:122                                     ; preds = %120
  %123 = icmp eq i64 %118, 0
  call void @rt_swift_retain(%swift.refcounted* nonnull bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.refcounted*)) #22
  br i1 %123, label %129, label %.preheader53

.preheader53:                                     ; preds = %122
  %124 = bitcast %swift.refcounted* %101 to i8**
  %125 = bitcast %swift.refcounted** %0 to i8**
  %126 = getelementptr inbounds i8, i8* %107, i64 16
  %._storage22.count._value63 = bitcast i8* %126 to i64*
  %127 = load i64, i64* %._storage22.count._value63, align 8, !range !28
  %128 = icmp ugt i64 %127, 1
  br i1 %128, label %.lr.ph.preheader, label %._crit_edge64

.lr.ph.preheader:                                 ; preds = %.preheader53
  br label %.lr.ph

; <label>:129                                     ; preds = %122
  call void @rt_swift_release(%swift.refcounted* nonnull %100) #22
  br label %130

; <label>:130                                     ; preds = %129, %207
  %131 = phi %swift.bridge* [ %.cast, %207 ], [ bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.bridge*), %129 ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %102)
  %132 = call %objc_object* @swift_bufferAllocate(%swift.type* %44, i64 64, i64 7)
  %133 = bitcast %objc_object* %132 to i8*
  %134 = getelementptr inbounds i8, i8* %133, i64 16
  %135 = bitcast i8* %134 to <2 x i64>*
  store <2 x i64> <i64 1, i64 2>, <2 x i64>* %135, align 8
  %136 = bitcast %objc_object* %132 to %swift.bridge*
  %137 = getelementptr inbounds i8, i8* %133, i64 32
  %138 = load %swift.type*, %swift.type** @_TMLGSaSS_, align 8
  %139 = icmp eq %swift.type* %138, null
  br i1 %139, label %cacheIsNull.i51, label %_TMaGSaSS_.exit

cacheIsNull.i51:                                  ; preds = %130
  %140 = call %swift.type* @_TMaSa(%swift.type* nonnull @_TMSS) #17
  store atomic %swift.type* %140, %swift.type** @_TMLGSaSS_ release, align 8
  br label %_TMaGSaSS_.exit

_TMaGSaSS_.exit:                                  ; preds = %130, %cacheIsNull.i51
  %141 = phi %swift.type* [ %138, %130 ], [ %140, %cacheIsNull.i51 ]
  %142 = getelementptr inbounds i8, i8* %133, i64 56
  %143 = bitcast i8* %142 to %swift.type**
  store %swift.type* %141, %swift.type** %143, align 8
  %object30._buffer._storage.rawValue = bitcast i8* %137 to %swift.bridge**
  store %swift.bridge* %131, %swift.bridge** %object30._buffer._storage.rawValue, align 8
  %144 = call %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge* %131) #22
  %145 = call { i64, i64, i64 } @_TIFs5printFTGSaP__9separatorSS10terminatorSS_T_A0_()
  %146 = extractvalue { i64, i64, i64 } %145, 0
  %147 = extractvalue { i64, i64, i64 } %145, 1
  %148 = extractvalue { i64, i64, i64 } %145, 2
  %149 = call { i64, i64, i64 } @_TIFs5printFTGSaP__9separatorSS10terminatorSS_T_A1_()
  %150 = extractvalue { i64, i64, i64 } %149, 0
  %151 = extractvalue { i64, i64, i64 } %149, 1
  %152 = extractvalue { i64, i64, i64 } %149, 2
  call void @_TFs5printFTGSaP__9separatorSS10terminatorSS_T_(%swift.bridge* %136, i64 %146, i64 %147, i64 %148, i64 %150, i64 %151, i64 %152)
  %153 = call %swift.bridge* @_TFE10FoundationSS10componentsfT11separatedBySS_GSaSS_(i64 ptrtoint ([2 x i8]* @3 to i64), i64 1, i64 0, i64 ptrtoint ([32 x i8]* @8 to i64), i64 31, i64 0)
  %154 = load i64, i64* %95, align 8
  %155 = and i64 %154, 4294967295
  %156 = lshr i64 %154, 32
  %157 = and i64 %156, 65535
  %158 = call noalias %swift.refcounted* @rt_swift_allocObject(%swift.type* %14, i64 %155, i64 %157) #22
  %159 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %158, i64 1
  %._elements31._buffer._storage.rawValue = bitcast %swift.refcounted* %159 to %swift.bridge**
  store %swift.bridge* %153, %swift.bridge** %._elements31._buffer._storage.rawValue, align 8
  %._position32 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %158, i64 1, i32 1
  %._position32._value = bitcast i32* %._position32 to i64*
  store i64 0, i64* %._position32._value, align 8
  %160 = bitcast %swift.refcounted* %158 to %GCs19_AnyIteratorBoxBaseSS_*
  %161 = bitcast %swift.bridge* %153 to i8*
  %162 = getelementptr inbounds i8, i8* %161, i64 16
  %._storage34.count._value = bitcast i8* %162 to i64*
  %163 = load i64, i64* %._storage34.count._value, align 8, !range !28
  %164 = icmp eq i64 %163, 0
  br i1 %164, label %343, label %211

.lr.ph:                                           ; preds = %.lr.ph.preheader, %._crit_edge
  %165 = phi i64 [ %203, %._crit_edge ], [ 1, %.lr.ph.preheader ]
  %166 = phi i64 [ %.pre, %._crit_edge ], [ 1, %.lr.ph.preheader ]
  %167 = phi i8* [ %.pre56, %._crit_edge ], [ %107, %.lr.ph.preheader ]
  %168 = phi %swift.refcounted* [ %202, %._crit_edge ], [ bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.refcounted*), %.lr.ph.preheader ]
  %169 = phi i8* [ %195, %._crit_edge ], [ bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to i8*), %.lr.ph.preheader ]
  %170 = getelementptr inbounds i8, i8* %167, i64 32
  %171 = bitcast i8* %170 to %SS*
  %._core23 = getelementptr inbounds %SS, %SS* %171, i64 %166, i32 0
  %172 = bitcast %Vs11_StringCore* %._core23 to <2 x i64>*
  %173 = load <2 x i64>, <2 x i64>* %172, align 8
  %._core23._owner = getelementptr inbounds %SS, %SS* %171, i64 %166, i32 0, i32 2
  %174 = bitcast %GSqPs9AnyObject__* %._core23._owner to i64*
  %175 = load i64, i64* %174, align 8
  %176 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %166, i64 1)
  %177 = extractvalue { i64, i1 } %176, 1
  br i1 %177, label %341, label %178

; <label>:178                                     ; preds = %.lr.ph
  %179 = extractvalue { i64, i1 } %176, 0
  store i64 %179, i64* %._position15._value, align 8
  %180 = inttoptr i64 %175 to %objc_object*
  call void @swift_unknownRetain(%objc_object* %180) #22
  %181 = call i1 @rt_swift_isUniquelyReferenced_nonNull_native(%swift.refcounted* %168) #22
  br i1 %181, label %182, label %208, !prof !37

; <label>:182                                     ; preds = %178, %208
  %183 = phi i8* [ %169, %178 ], [ %.pre57, %208 ]
  %184 = getelementptr inbounds i8, i8* %183, i64 16
  %._storage26.count._value = bitcast i8* %184 to i64*
  %185 = load i64, i64* %._storage26.count._value, align 8, !range !28
  %186 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %185, i64 1)
  %187 = extractvalue { i64, i1 } %186, 0
  %188 = extractvalue { i64, i1 } %186, 1
  br i1 %188, label %342, label %189

; <label>:189                                     ; preds = %182
  %._storage26._capacityAndFlags = getelementptr inbounds i8, i8* %183, i64 24
  %._storage26._capacityAndFlags._value = bitcast i8* %._storage26._capacityAndFlags to i64*
  %190 = load i64, i64* %._storage26._capacityAndFlags._value, align 8
  %191 = lshr i64 %190, 1
  %192 = icmp sgt i64 %187, %191
  br i1 %192, label %193, label %194, !prof !36

; <label>:193                                     ; preds = %189
  call void @_TTSg5V4Main8Employee___TFSa16_copyToNewBufferfT8oldCountSi_T__merged(i64 %185, %Sa* nocapture nonnull dereferenceable(8) %tmpcast, %swift.refcounted* (%Vs12_ArrayBuffer*, i64, i64)* @_TTSg5GVs12_ArrayBufferSS_GS_SS_s20_ArrayBufferProtocols___TFs31_forceCreateUniqueMutableBufferuRxs20_ArrayBufferProtocolrFTRx17countForNewBufferSi14minNewCapacitySi_GVs22_ContiguousArrayBufferwx7Element_, void (%Vs12_ArrayBuffer*, %Vs22_ContiguousArrayBuffer*, i64, i64)* @_TTSf4n_n_n_n_d___TTSg5GVs12_ArrayBufferSS_GS_SS_s20_ArrayBufferProtocols_GVs14_IgnorePointerSS_GS1_SS_s16_PointerFunctions___TFs22_arrayOutOfPlaceUpdateu0_Rxs20_ArrayBufferProtocol_s16_PointerFunctionwx5IndexzSiwx7Elementzw_7ElementrFTRxRGVs22_ContiguousArrayBufferwxS2__SiSiq__T_)
  %.pre58 = load i8*, i8** %125, align 8
  br label %194

; <label>:194                                     ; preds = %189, %193
  %195 = phi i8* [ %183, %189 ], [ %.pre58, %193 ]
  %196 = getelementptr inbounds i8, i8* %195, i64 16
  %._storage27.count._value = bitcast i8* %196 to i64*
  store i64 %187, i64* %._storage27.count._value, align 8
  %197 = getelementptr inbounds i8, i8* %195, i64 32
  %198 = bitcast i8* %197 to %SS*
  %._core28 = getelementptr inbounds %SS, %SS* %198, i64 %185, i32 0
  %199 = bitcast %Vs11_StringCore* %._core28 to <2 x i64>*
  store <2 x i64> %173, <2 x i64>* %199, align 8
  %._core28._owner = getelementptr inbounds %SS, %SS* %198, i64 %185, i32 0, i32 2
  %200 = bitcast %GSqPs9AnyObject__* %._core28._owner to i64*
  store i64 %175, i64* %200, align 8
  %201 = icmp eq i64 %165, %118
  br i1 %201, label %207, label %._crit_edge

._crit_edge:                                      ; preds = %194
  %202 = bitcast i8* %195 to %swift.refcounted*
  %.pre = load i64, i64* %._position15._value, align 8
  %.pre56 = load i8*, i8** %124, align 8
  %203 = add i64 %165, 1
  %204 = getelementptr inbounds i8, i8* %.pre56, i64 16
  %._storage22.count._value = bitcast i8* %204 to i64*
  %205 = load i64, i64* %._storage22.count._value, align 8, !range !28
  %206 = icmp ult i64 %.pre, %205
  br i1 %206, label %.lr.ph, label %._crit_edge64.loopexit

; <label>:207                                     ; preds = %194
  %.lcssa67 = phi i8* [ %195, %194 ]
  call void @rt_swift_release(%swift.refcounted* %100) #22
  %.cast = bitcast i8* %.lcssa67 to %swift.bridge*
  br label %130

; <label>:208                                     ; preds = %178
  %209 = getelementptr inbounds i8, i8* %169, i64 16
  %._storage25.count._value = bitcast i8* %209 to i64*
  %210 = load i64, i64* %._storage25.count._value, align 8, !range !28
  call void @_TTSg5V4Main8Employee___TFSa16_copyToNewBufferfT8oldCountSi_T__merged(i64 %210, %Sa* nocapture nonnull dereferenceable(8) %tmpcast, %swift.refcounted* (%Vs12_ArrayBuffer*, i64, i64)* @_TTSg5GVs12_ArrayBufferSS_GS_SS_s20_ArrayBufferProtocols___TFs31_forceCreateUniqueMutableBufferuRxs20_ArrayBufferProtocolrFTRx17countForNewBufferSi14minNewCapacitySi_GVs22_ContiguousArrayBufferwx7Element_, void (%Vs12_ArrayBuffer*, %Vs22_ContiguousArrayBuffer*, i64, i64)* @_TTSf4n_n_n_n_d___TTSg5GVs12_ArrayBufferSS_GS_SS_s20_ArrayBufferProtocols_GVs14_IgnorePointerSS_GS1_SS_s16_PointerFunctions___TFs22_arrayOutOfPlaceUpdateu0_Rxs20_ArrayBufferProtocol_s16_PointerFunctionwx5IndexzSiwx7Elementzw_7ElementrFTRxRGVs22_ContiguousArrayBufferwxS2__SiSiq__T_)
  %.pre57 = load i8*, i8** %125, align 8
  br label %182

; <label>:211                                     ; preds = %_TMaGSaSS_.exit
  %212 = getelementptr inbounds i8, i8* %161, i64 32
  %213 = bitcast i8* %212 to <2 x i64>*
  %214 = load <2 x i64>, <2 x i64>* %213, align 8
  %._core35._owner = getelementptr inbounds i8, i8* %161, i64 48
  %215 = bitcast i8* %._core35._owner to i64*
  %216 = load i64, i64* %215, align 8
  store i64 1, i64* %._position32._value, align 8
  %217 = bitcast %swift.refcounted** %1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %217)
  %218 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 25, i8* %218)
  %219 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %160 to void (%Sq*, %Cs19_AnyIteratorBoxBase*)***
  %220 = load void (%Sq*, %Cs19_AnyIteratorBoxBase*)**, void (%Sq*, %Cs19_AnyIteratorBoxBase*)*** %219, align 8
  %221 = getelementptr inbounds void (%Sq*, %Cs19_AnyIteratorBoxBase*)*, void (%Sq*, %Cs19_AnyIteratorBoxBase*)** %220, i64 11
  %222 = load void (%Sq*, %Cs19_AnyIteratorBoxBase*)*, void (%Sq*, %Cs19_AnyIteratorBoxBase*)** %221, align 8, !invariant.load !29
  %223 = inttoptr i64 %216 to %objc_object*
  %224 = bitcast %GSqSS_* %2 to %Sq*
  %225 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %160 to %Cs19_AnyIteratorBoxBase*
  call void @rt_swift_retain(%swift.refcounted* %158) #22
  call void @swift_unknownRetain(%objc_object* %223) #22
  call void %222(%Sq* noalias nocapture sret %224, %Cs19_AnyIteratorBoxBase* %225)
  %226 = bitcast %GSqSS_* %2 to i64*
  %227 = load i64, i64* %226, align 8
  %228 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 0, i64 8
  %229 = bitcast i8* %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 0, i64 16
  %232 = bitcast i8* %231 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 1
  %235 = bitcast [1 x i8]* %234 to i1*
  %236 = load i1, i1* %235, align 8
  call void @llvm.lifetime.end(i64 25, i8* %218)
  br i1 %236, label %350, label %237

; <label>:237                                     ; preds = %211
  %238 = inttoptr i64 %233 to %objc_object*
  call void @swift_unknownRetain(%objc_object* %238) #22
  %239 = call { i64, i1 } @_TFSiCfTSS5radixSi_GSqSi_(i64 %227, i64 %230, i64 %233, i64 10)
  %240 = extractvalue { i64, i1 } %239, 0
  %241 = extractvalue { i64, i1 } %239, 1
  br i1 %241, label %349, label %242

; <label>:242                                     ; preds = %237
  call void @swift_unknownRelease(%objc_object* %238) #22
  %._buffer36._storage.rawValue = bitcast %swift.refcounted** %1 to %swift.bridge**
  store %swift.bridge* bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.bridge*), %swift.bridge** %._buffer36._storage.rawValue, align 8
  %243 = icmp slt i64 %240, 0
  br i1 %243, label %344, label %244

; <label>:244                                     ; preds = %242
  %245 = icmp eq i64 %240, 0
  call void @rt_swift_retain(%swift.refcounted* nonnull bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.refcounted*)) #22
  br i1 %245, label %263, label %.preheader

.preheader:                                       ; preds = %244
  %246 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 0, i64 0
  %247 = bitcast %GSqSS_* %3 to %Sq*
  %248 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 0, i64 16
  %249 = bitcast i8* %248 to i64*
  %250 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 1
  %251 = bitcast [1 x i8]* %250 to i1*
  %252 = getelementptr inbounds %GSqSS_, %GSqSS_* %4, i64 0, i32 0, i64 0
  %253 = bitcast %GSqSS_* %4 to %Sq*
  %254 = bitcast %GSqSS_* %4 to i64*
  %255 = getelementptr inbounds %GSqSS_, %GSqSS_* %4, i64 0, i32 0, i64 8
  %256 = bitcast i8* %255 to i64*
  %257 = getelementptr inbounds %GSqSS_, %GSqSS_* %4, i64 0, i32 0, i64 16
  %258 = bitcast i8* %257 to i64*
  %259 = getelementptr inbounds %GSqSS_, %GSqSS_* %4, i64 0, i32 1
  %260 = bitcast [1 x i8]* %259 to i1*
  %261 = bitcast %swift.refcounted** %1 to i8**
  %262 = bitcast %GSqSS_* %3 to <2 x i64>*
  br label %292

.loopexit:                                        ; preds = %324
  %.lcssa = phi i8* [ %325, %324 ]
  %.cast48.le = bitcast i8* %.lcssa to %swift.bridge*
  br label %263

; <label>:263                                     ; preds = %.loopexit, %244
  %264 = phi %swift.bridge* [ bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.bridge*), %244 ], [ %.cast48.le, %.loopexit ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %217)
  call void @rt_swift_release(%swift.refcounted* %158) #22
  %265 = load %swift.type*, %swift.type** @_TMLC4Main7Company, align 8
  %266 = icmp eq %swift.type* %265, null
  br i1 %266, label %cacheIsNull.i52, label %_TMaC4Main7Company.exit

cacheIsNull.i52:                                  ; preds = %263
  %267 = call %objc_class* @rt_swift_getInitializedObjCClass(%objc_class* nonnull bitcast (i64* getelementptr inbounds (<{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main7Company, i64 0, i32 2) to %objc_class*)) #22
  %268 = bitcast %objc_class* %267 to %swift.type*
  store atomic %swift.type* %268, %swift.type** @_TMLC4Main7Company release, align 8
  br label %_TMaC4Main7Company.exit

_TMaC4Main7Company.exit:                          ; preds = %263, %cacheIsNull.i52
  %269 = phi %swift.type* [ %265, %263 ], [ %268, %cacheIsNull.i52 ]
  %270 = call noalias %swift.refcounted* @rt_swift_allocObject(%swift.type* %269, i64 48, i64 7) #22
  %271 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %270, i64 1
  %272 = bitcast %swift.refcounted* %271 to <2 x i64>*
  store <2 x i64> %214, <2 x i64>* %272, align 8
  %._core41._owner = getelementptr inbounds %swift.refcounted, %swift.refcounted* %270, i64 2
  %273 = bitcast %swift.refcounted* %._core41._owner to i64*
  store i64 %216, i64* %273, align 8
  %274 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %270, i64 2, i32 1
  %._buffer42._storage.rawValue = bitcast i32* %274 to %swift.bridge**
  store %swift.bridge* %264, %swift.bridge** %._buffer42._storage.rawValue, align 8
  call void @rt_swift_release(%swift.refcounted* %158) #22
  %275 = call %objc_object* @swift_bufferAllocate(%swift.type* %44, i64 64, i64 7)
  %276 = bitcast %objc_object* %275 to i8*
  %277 = getelementptr inbounds i8, i8* %276, i64 16
  %278 = bitcast i8* %277 to <2 x i64>*
  store <2 x i64> <i64 1, i64 2>, <2 x i64>* %278, align 8
  %279 = bitcast %objc_object* %275 to %swift.bridge*
  %280 = getelementptr inbounds i8, i8* %276, i64 32
  %281 = getelementptr inbounds i8, i8* %276, i64 56
  %282 = bitcast i8* %281 to %swift.type**
  store %swift.type* %269, %swift.type** %282, align 8
  %283 = bitcast i8* %280 to %swift.refcounted**
  store %swift.refcounted* %270, %swift.refcounted** %283, align 8
  call void @rt_swift_retain(%swift.refcounted* %270) #22
  %284 = call { i64, i64, i64 } @_TIFs5printFTGSaP__9separatorSS10terminatorSS_T_A0_()
  %285 = extractvalue { i64, i64, i64 } %284, 0
  %286 = extractvalue { i64, i64, i64 } %284, 1
  %287 = extractvalue { i64, i64, i64 } %284, 2
  %288 = call { i64, i64, i64 } @_TIFs5printFTGSaP__9separatorSS10terminatorSS_T_A1_()
  %289 = extractvalue { i64, i64, i64 } %288, 0
  %290 = extractvalue { i64, i64, i64 } %288, 1
  %291 = extractvalue { i64, i64, i64 } %288, 2
  call void @_TFs5printFTGSaP__9separatorSS10terminatorSS_T_(%swift.bridge* %279, i64 %285, i64 %286, i64 %287, i64 %289, i64 %290, i64 %291)
  call void @swift_unknownRelease(%objc_object* %74) #22
  call void @swift_bridgeObjectRelease(%swift.bridge* %131) #22
  call void @rt_swift_release(%swift.refcounted* %270) #22
  ret void

; <label>:292                                     ; preds = %.preheader, %324
  %293 = phi i8* [ %325, %324 ], [ bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to i8*), %.preheader ]
  %294 = phi %swift.refcounted* [ %333, %324 ], [ bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.refcounted*), %.preheader ]
  %295 = phi i64 [ %296, %324 ], [ 0, %.preheader ]
  %296 = add i64 %295, 1
  call void @llvm.lifetime.start(i64 25, i8* %246)
  call void @rt_swift_retain(%swift.refcounted* %158) #22
  call void %222(%Sq* noalias nocapture sret %247, %Cs19_AnyIteratorBoxBase* %225)
  %297 = load <2 x i64>, <2 x i64>* %262, align 16
  %298 = load i64, i64* %249, align 16
  %299 = load i1, i1* %251, align 8
  call void @llvm.lifetime.end(i64 25, i8* %246)
  br i1 %299, label %348, label %300

; <label>:300                                     ; preds = %292
  call void @llvm.lifetime.start(i64 25, i8* %252)
  call void @rt_swift_retain(%swift.refcounted* %158) #22
  call void %222(%Sq* noalias nocapture sret %253, %Cs19_AnyIteratorBoxBase* %225)
  %301 = load i64, i64* %254, align 8
  %302 = load i64, i64* %256, align 8
  %303 = load i64, i64* %258, align 8
  %304 = load i1, i1* %260, align 8
  call void @llvm.lifetime.end(i64 25, i8* %252)
  br i1 %304, label %347, label %305

; <label>:305                                     ; preds = %300
  %306 = inttoptr i64 %303 to %objc_object*
  call void @swift_unknownRetain(%objc_object* %306) #22
  %307 = call { i64, i1 } @_TFSiCfTSS5radixSi_GSqSi_(i64 %301, i64 %302, i64 %303, i64 10)
  %308 = extractvalue { i64, i1 } %307, 0
  %309 = extractvalue { i64, i1 } %307, 1
  br i1 %309, label %346, label %310

; <label>:310                                     ; preds = %305
  tail call void @rt_swift_release_n(%swift.refcounted* %158, i32 2)
  call void @swift_unknownRelease(%objc_object* %306) #22
  %311 = call i1 @rt_swift_isUniquelyReferenced_nonNull_native(%swift.refcounted* %294) #22
  br i1 %311, label %312, label %334, !prof !37

; <label>:312                                     ; preds = %310, %334
  %313 = phi i8* [ %293, %310 ], [ %.pre59, %334 ]
  %314 = getelementptr inbounds i8, i8* %313, i64 16
  %._storage39.count._value = bitcast i8* %314 to i64*
  %315 = load i64, i64* %._storage39.count._value, align 8, !range !28
  %316 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %315, i64 1)
  %317 = extractvalue { i64, i1 } %316, 0
  %318 = extractvalue { i64, i1 } %316, 1
  br i1 %318, label %345, label %319

; <label>:319                                     ; preds = %312
  %._storage39._capacityAndFlags = getelementptr inbounds i8, i8* %313, i64 24
  %._storage39._capacityAndFlags._value = bitcast i8* %._storage39._capacityAndFlags to i64*
  %320 = load i64, i64* %._storage39._capacityAndFlags._value, align 8
  %321 = lshr i64 %320, 1
  %322 = icmp sgt i64 %317, %321
  br i1 %322, label %323, label %324, !prof !36

; <label>:323                                     ; preds = %319
  call void @_TTSg5V4Main8Employee___TFSa16_copyToNewBufferfT8oldCountSi_T__merged(i64 %315, %Sa* nocapture nonnull dereferenceable(8) %tmpcast47, %swift.refcounted* (%Vs12_ArrayBuffer*, i64, i64)* @_TTSg5GVs12_ArrayBufferV4Main8Employee_GS_S1__s20_ArrayBufferProtocols___TFs31_forceCreateUniqueMutableBufferuRxs20_ArrayBufferProtocolrFTRx17countForNewBufferSi14minNewCapacitySi_GVs22_ContiguousArrayBufferwx7Element_, void (%Vs12_ArrayBuffer*, %Vs22_ContiguousArrayBuffer*, i64, i64)* @_TTSf4n_n_n_n_d___TTSg5GVs12_ArrayBufferV4Main8Employee_GS_S1__s20_ArrayBufferProtocols_GVs14_IgnorePointerS1__GS3_S1__s16_PointerFunctions___TFs22_arrayOutOfPlaceUpdateu0_Rxs20_ArrayBufferProtocol_s16_PointerFunctionwx5IndexzSiwx7Elementzw_7ElementrFTRxRGVs22_ContiguousArrayBufferwxS2__SiSiq__T_)
  %.pre60 = load i8*, i8** %261, align 8
  br label %324

; <label>:324                                     ; preds = %319, %323
  %325 = phi i8* [ %313, %319 ], [ %.pre60, %323 ]
  %326 = getelementptr inbounds i8, i8* %325, i64 16
  %._storage40.count._value = bitcast i8* %326 to i64*
  store i64 %317, i64* %._storage40.count._value, align 8
  %327 = getelementptr inbounds i8, i8* %325, i64 32
  %328 = bitcast i8* %327 to %V4Main8Employee*
  %329 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %328, i64 %315
  %330 = bitcast %V4Main8Employee* %329 to <2 x i64>*
  store <2 x i64> %297, <2 x i64>* %330, align 8
  %.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %328, i64 %315, i32 0, i32 0, i32 2
  %331 = bitcast %GSqPs9AnyObject__* %.name._core._owner to i64*
  store i64 %298, i64* %331, align 8
  %.age._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %328, i64 %315, i32 1, i32 0
  store i64 %308, i64* %.age._value, align 8
  %332 = icmp eq i64 %296, %240
  %333 = bitcast i8* %325 to %swift.refcounted*
  br i1 %332, label %.loopexit, label %292

; <label>:334                                     ; preds = %310
  %335 = getelementptr inbounds i8, i8* %293, i64 16
  %._storage38.count._value = bitcast i8* %335 to i64*
  %336 = load i64, i64* %._storage38.count._value, align 8, !range !28
  call void @_TTSg5V4Main8Employee___TFSa16_copyToNewBufferfT8oldCountSi_T__merged(i64 %336, %Sa* nocapture nonnull dereferenceable(8) %tmpcast47, %swift.refcounted* (%Vs12_ArrayBuffer*, i64, i64)* @_TTSg5GVs12_ArrayBufferV4Main8Employee_GS_S1__s20_ArrayBufferProtocols___TFs31_forceCreateUniqueMutableBufferuRxs20_ArrayBufferProtocolrFTRx17countForNewBufferSi14minNewCapacitySi_GVs22_ContiguousArrayBufferwx7Element_, void (%Vs12_ArrayBuffer*, %Vs22_ContiguousArrayBuffer*, i64, i64)* @_TTSf4n_n_n_n_d___TTSg5GVs12_ArrayBufferV4Main8Employee_GS_S1__s20_ArrayBufferProtocols_GVs14_IgnorePointerS1__GS3_S1__s16_PointerFunctions___TFs22_arrayOutOfPlaceUpdateu0_Rxs20_ArrayBufferProtocol_s16_PointerFunctionwx5IndexzSiwx7Elementzw_7ElementrFTRxRGVs22_ContiguousArrayBufferwxS2__SiSiq__T_)
  %.pre59 = load i8*, i8** %261, align 8
  br label %312

; <label>:337                                     ; preds = %_TMaGCs12_IteratorBoxGVs16IndexingIteratorGSaSS___.exit
  call void asm sideeffect "", "n"(i32 2) #22
  call void @llvm.trap()
  unreachable

; <label>:338                                     ; preds = %_TMaGCs23_ContiguousArrayStorageP__.exit
  call void asm sideeffect "", "n"(i32 9) #22
  call void @llvm.trap()
  unreachable

; <label>:339                                     ; preds = %67
  call void asm sideeffect "", "n"(i32 10) #22
  call void @llvm.trap()
  unreachable

; <label>:340                                     ; preds = %120
  call void asm sideeffect "", "n"(i32 11) #22
  call void @llvm.trap()
  unreachable

._crit_edge64.loopexit:                           ; preds = %._crit_edge
  br label %._crit_edge64

._crit_edge64:                                    ; preds = %._crit_edge64.loopexit, %.preheader53
  call void asm sideeffect "", "n"(i32 13) #22
  call void @llvm.trap()
  unreachable

; <label>:341                                     ; preds = %.lr.ph
  call void asm sideeffect "", "n"(i32 14) #22
  call void @llvm.trap()
  unreachable

; <label>:342                                     ; preds = %182
  call void asm sideeffect "", "n"(i32 15) #22
  call void @llvm.trap()
  unreachable

; <label>:343                                     ; preds = %_TMaGSaSS_.exit
  call void asm sideeffect "", "n"(i32 16) #22
  call void @llvm.trap()
  unreachable

; <label>:344                                     ; preds = %242
  call void asm sideeffect "", "n"(i32 19) #22
  call void @llvm.trap()
  unreachable

; <label>:345                                     ; preds = %312
  call void asm sideeffect "", "n"(i32 21) #22
  call void @llvm.trap()
  unreachable

; <label>:346                                     ; preds = %305
  call void asm sideeffect "", "n"(i32 22) #22
  call void @llvm.trap()
  unreachable

; <label>:347                                     ; preds = %300
  call void asm sideeffect "", "n"(i32 23) #22
  call void @llvm.trap()
  unreachable

; <label>:348                                     ; preds = %292
  call void asm sideeffect "", "n"(i32 24) #22
  call void @llvm.trap()
  unreachable

; <label>:349                                     ; preds = %237
  call void asm sideeffect "", "n"(i32 25) #22
  call void @llvm.trap()
  unreachable

; <label>:350                                     ; preds = %211
  call void asm sideeffect "", "n"(i32 26) #22
  call void @llvm.trap()
  unreachable

; <label>:351                                     ; preds = %108
  call void asm sideeffect "", "n"(i32 27) #22
  call void @llvm.trap()
  unreachable

; <label>:352                                     ; preds = %20
  call void asm sideeffect "", "n"(i32 28) #22
  call void @llvm.trap()
  unreachable
}

declare void @globalinit_33_FD9A49A256BEB6AF7C48013347ADC3BA_func4() #0

declare void @swift_once(i64*, i8*)

; Function Attrs: noinline norecurse nounwind readnone
define linkonce_odr hidden { i64, i64, i64 } @_TTSgq5SSSSs20TextOutputStreamables___TFs27_toStringReadOnlyStreamableuRxs20TextOutputStreamablerFxSS(i64, i64, i64) #5 {
entry:
  %3 = insertvalue { i64, i64, i64 } undef, i64 %0, 0
  %4 = insertvalue { i64, i64, i64 } %3, i64 %1, 1
  %5 = insertvalue { i64, i64, i64 } %4, i64 %2, 2
  ret { i64, i64, i64 } %5
}

; Function Attrs: noinline readonly
define linkonce_odr hidden { i64, i64, i64 } @_TTSgq5SiSis23CustomStringConvertibles___TFs26_toStringReadOnlyPrintableuRxs23CustomStringConvertiblerFxSS(i64) #6 {
entry:
  %1 = alloca %Vs9_Buffer32, align 1
  %2 = alloca %GVs16IndexingIteratorGSRVs5UInt8__, align 8
  %3 = alloca %Vs4UTF8, align 4
  %4 = alloca %GVs16IndexingIteratorGSRVs5UInt8__, align 8
  %5 = alloca %Vs4UTF8, align 4
  %6 = alloca %GVs16IndexingIteratorGSRVs5UInt8__, align 8
  %7 = alloca %Vs4UTF8, align 4
  %8 = getelementptr inbounds %Vs9_Buffer32, %Vs9_Buffer32* %1, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start(i64 32, i8* %8)
  call void @llvm.memset.p0i8.i64(i8* %8, i8 0, i64 32, i32 1, i1 false)
  %9 = call i64 @swift_int64ToString(i8* %8, i64 32, i64 %0, i64 10, i1 false)
  %10 = ptrtoint %Vs9_Buffer32* %1 to i64
  %11 = icmp slt i64 %9, 0
  br i1 %11, label %113, label %12

; <label>:12                                      ; preds = %entry
  %13 = getelementptr inbounds i8, i8* %8, i64 %9
  %14 = ptrtoint i8* %13 to i64
  %15 = getelementptr inbounds %GVs16IndexingIteratorGSRVs5UInt8__, %GVs16IndexingIteratorGSRVs5UInt8__* %2, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 24, i8* %15)
  %16 = bitcast %Vs4UTF8* %3 to i8*
  call void @llvm.lifetime.start(i64 5, i8* %16)
  %17 = bitcast %GVs16IndexingIteratorGSRVs5UInt8__* %2 to i64*
  store i64 %10, i64* %17, align 8
  %._elements._end = getelementptr inbounds %GVs16IndexingIteratorGSRVs5UInt8__, %GVs16IndexingIteratorGSRVs5UInt8__* %2, i64 0, i32 0, i32 1
  %18 = bitcast %GSqGSPVs5UInt8__* %._elements._end to i64*
  store i64 %14, i64* %18, align 8
  %._position._value = getelementptr inbounds %GVs16IndexingIteratorGSRVs5UInt8__, %GVs16IndexingIteratorGSRVs5UInt8__* %2, i64 0, i32 1, i32 0
  store i64 0, i64* %._position._value, align 8
  %._decodeBuffer._value = getelementptr inbounds %Vs4UTF8, %Vs4UTF8* %3, i64 0, i32 0, i32 0
  store i32 0, i32* %._decodeBuffer._value, align 4
  %._bitsInBuffer._value = getelementptr inbounds %Vs4UTF8, %Vs4UTF8* %3, i64 0, i32 1, i32 0
  store i8 0, i8* %._bitsInBuffer._value, align 4
  br label %19

; <label>:19                                      ; preds = %107, %12
  %20 = phi i64 [ 0, %12 ], [ %111, %107 ]
  %21 = phi i1 [ true, %12 ], [ %.14, %107 ]
  %22 = call { i32, i1 } @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult(%GVs16IndexingIteratorGSRVs5UInt8__* nocapture nonnull dereferenceable(24) %2, %Vs4UTF8* nocapture nonnull dereferenceable(5) %3)
  %23 = extractvalue { i32, i1 } %22, 0
  %24 = extractvalue { i32, i1 } %22, 1
  br i1 %24, label %25, label %107

; <label>:25                                      ; preds = %19
  %.lcssa64 = phi i32 [ %23, %19 ]
  %.lcssa62 = phi i1 [ %21, %19 ]
  %.lcssa = phi i64 [ %20, %19 ]
  %switch = icmp eq i32 %.lcssa64, 0
  %26 = select i1 %switch, i64 %.lcssa, i64 0
  call void @llvm.lifetime.end(i64 5, i8* %16)
  call void @llvm.lifetime.end(i64 24, i8* %15)
  br i1 %switch, label %27, label %114

; <label>:27                                      ; preds = %25
  %28 = icmp sgt i64 %26, 0
  %. = select i1 %28, i64 %26, i64 0
  %29 = select i1 %.lcssa62, i64 1, i64 2
  %30 = call i64 @_TTSfq4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_(i64 %., i64 %26, i64 %29)
  %31 = icmp eq i64 %30, 0
  br i1 %.lcssa62, label %65, label %32

; <label>:32                                      ; preds = %27
  br i1 %31, label %117, label %33

; <label>:33                                      ; preds = %32
  %34 = getelementptr inbounds %GVs16IndexingIteratorGSRVs5UInt8__, %GVs16IndexingIteratorGSRVs5UInt8__* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 24, i8* %34)
  %35 = bitcast %Vs4UTF8* %5 to i8*
  call void @llvm.lifetime.start(i64 5, i8* %35)
  %36 = bitcast %GVs16IndexingIteratorGSRVs5UInt8__* %4 to i64*
  store i64 %10, i64* %36, align 8
  %._elements1._end = getelementptr inbounds %GVs16IndexingIteratorGSRVs5UInt8__, %GVs16IndexingIteratorGSRVs5UInt8__* %4, i64 0, i32 0, i32 1
  %37 = bitcast %GSqGSPVs5UInt8__* %._elements1._end to i64*
  store i64 %14, i64* %37, align 8
  %._position2._value = getelementptr inbounds %GVs16IndexingIteratorGSRVs5UInt8__, %GVs16IndexingIteratorGSRVs5UInt8__* %4, i64 0, i32 1, i32 0
  store i64 0, i64* %._position2._value, align 8
  %._decodeBuffer3._value = getelementptr inbounds %Vs4UTF8, %Vs4UTF8* %5, i64 0, i32 0, i32 0
  store i32 0, i32* %._decodeBuffer3._value, align 4
  %._bitsInBuffer4._value = getelementptr inbounds %Vs4UTF8, %Vs4UTF8* %5, i64 0, i32 1, i32 0
  store i8 0, i8* %._bitsInBuffer4._value, align 4
  %38 = call { i32, i1 } @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult(%GVs16IndexingIteratorGSRVs5UInt8__* nocapture nonnull dereferenceable(24) %4, %Vs4UTF8* nocapture nonnull dereferenceable(5) %5)
  %39 = extractvalue { i32, i1 } %38, 1
  br i1 %39, label %._crit_edge25, label %.lr.ph24.preheader

.lr.ph24.preheader:                               ; preds = %33
  %40 = extractvalue { i32, i1 } %38, 0
  %41 = inttoptr i64 %30 to i8*
  %42 = getelementptr inbounds i8, i8* %41, i64 32
  br label %.lr.ph24

._crit_edge25.loopexit:                           ; preds = %.backedge
  br label %._crit_edge25

._crit_edge25:                                    ; preds = %._crit_edge25.loopexit, %33
  call void @llvm.lifetime.end(i64 5, i8* %35)
  call void @llvm.lifetime.end(i64 24, i8* %34)
  br label %76

.lr.ph24:                                         ; preds = %.lr.ph24.preheader, %.backedge
  %43 = phi i32 [ %58, %.backedge ], [ %40, %.lr.ph24.preheader ]
  %44 = phi i8* [ %.be, %.backedge ], [ %42, %.lr.ph24.preheader ]
  %45 = icmp ult i32 %43, 65536
  br i1 %45, label %60, label %46

; <label>:46                                      ; preds = %.lr.ph24
  %47 = lshr i32 %43, 10
  %48 = add nuw nsw i32 %47, 55232
  %49 = and i32 %48, 65535
  %not.15 = icmp eq i32 %48, %49
  br i1 %not.15, label %50, label %115

; <label>:50                                      ; preds = %46
  %51 = trunc i32 %48 to i16
  %._value = bitcast i8* %44 to i16*
  store i16 %51, i16* %._value, align 2
  %52 = getelementptr inbounds i8, i8* %44, i64 2
  %53 = and i32 %43, 1023
  %54 = or i32 %53, 56320
  %55 = trunc i32 %54 to i16
  %._value5 = bitcast i8* %52 to i16*
  store i16 %55, i16* %._value5, align 2
  %56 = getelementptr inbounds i8, i8* %44, i64 4
  br label %.backedge

.backedge:                                        ; preds = %50, %62
  %.be = phi i8* [ %56, %50 ], [ %64, %62 ]
  %57 = call { i32, i1 } @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult(%GVs16IndexingIteratorGSRVs5UInt8__* nocapture nonnull dereferenceable(24) %4, %Vs4UTF8* nocapture nonnull dereferenceable(5) %5)
  %58 = extractvalue { i32, i1 } %57, 0
  %59 = extractvalue { i32, i1 } %57, 1
  br i1 %59, label %._crit_edge25.loopexit, label %.lr.ph24

; <label>:60                                      ; preds = %.lr.ph24
  %61 = and i32 %43, 65535
  %not.16 = icmp eq i32 %43, %61
  br i1 %not.16, label %62, label %116

; <label>:62                                      ; preds = %60
  %63 = trunc i32 %43 to i16
  %._value6 = bitcast i8* %44 to i16*
  store i16 %63, i16* %._value6, align 2
  %64 = getelementptr inbounds i8, i8* %44, i64 2
  br label %.backedge

; <label>:65                                      ; preds = %27
  br i1 %31, label %119, label %66

; <label>:66                                      ; preds = %65
  %67 = getelementptr inbounds %GVs16IndexingIteratorGSRVs5UInt8__, %GVs16IndexingIteratorGSRVs5UInt8__* %6, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 24, i8* %67)
  %68 = bitcast %Vs4UTF8* %7 to i8*
  call void @llvm.lifetime.start(i64 5, i8* %68)
  %69 = bitcast %GVs16IndexingIteratorGSRVs5UInt8__* %6 to i64*
  store i64 %10, i64* %69, align 8
  %._elements7._end = getelementptr inbounds %GVs16IndexingIteratorGSRVs5UInt8__, %GVs16IndexingIteratorGSRVs5UInt8__* %6, i64 0, i32 0, i32 1
  %70 = bitcast %GSqGSPVs5UInt8__* %._elements7._end to i64*
  store i64 %14, i64* %70, align 8
  %._position8._value = getelementptr inbounds %GVs16IndexingIteratorGSRVs5UInt8__, %GVs16IndexingIteratorGSRVs5UInt8__* %6, i64 0, i32 1, i32 0
  store i64 0, i64* %._position8._value, align 8
  %._decodeBuffer9._value = getelementptr inbounds %Vs4UTF8, %Vs4UTF8* %7, i64 0, i32 0, i32 0
  store i32 0, i32* %._decodeBuffer9._value, align 4
  %._bitsInBuffer10._value = getelementptr inbounds %Vs4UTF8, %Vs4UTF8* %7, i64 0, i32 1, i32 0
  store i8 0, i8* %._bitsInBuffer10._value, align 4
  %71 = call { i32, i1 } @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult(%GVs16IndexingIteratorGSRVs5UInt8__* nocapture nonnull dereferenceable(24) %6, %Vs4UTF8* nocapture nonnull dereferenceable(5) %7)
  %72 = extractvalue { i32, i1 } %71, 1
  br i1 %72, label %._crit_edge, label %.lr.ph.preheader

.lr.ph.preheader:                                 ; preds = %66
  %73 = extractvalue { i32, i1 } %71, 0
  %74 = inttoptr i64 %30 to i8*
  %75 = getelementptr inbounds i8, i8* %74, i64 32
  br label %.lr.ph

._crit_edge.loopexit:                             ; preds = %101
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %66
  call void @llvm.lifetime.end(i64 5, i8* %68)
  call void @llvm.lifetime.end(i64 24, i8* %67)
  br label %76

; <label>:76                                      ; preds = %._crit_edge, %._crit_edge25
  br i1 %31, label %92, label %77

; <label>:77                                      ; preds = %76
  %78 = inttoptr i64 %30 to i8*
  %79 = getelementptr inbounds i8, i8* %78, i64 32
  %80 = ptrtoint i8* %79 to i64
  %81 = getelementptr inbounds i8, i8* %78, i64 16
  %82 = bitcast i8* %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %_TFVs13_StringBufferg9usedCountSi.exit.i

; <label>:85                                      ; preds = %77
  call void asm sideeffect "", "n"(i32 3) #22
  call void @llvm.trap() #22
  unreachable

_TFVs13_StringBufferg9usedCountSi.exit.i:         ; preds = %77
  %.capacityAndElementShift.i.i = getelementptr inbounds i8, i8* %78, i64 24
  %.capacityAndElementShift._value.i.i = bitcast i8* %.capacityAndElementShift.i.i to i64*
  %86 = load i64, i64* %.capacityAndElementShift._value.i.i, align 8
  %87 = and i64 %86, 1
  %88 = sub i64 %83, %80
  %89 = ashr i64 %88, %87
  %90 = icmp slt i64 %89, 0
  br i1 %90, label %91, label %_TTSfq4n_d___TFVs11_StringCoreCfVs13_StringBufferS_.exit

; <label>:91                                      ; preds = %_TFVs13_StringBufferg9usedCountSi.exit.i
  call void asm sideeffect "", "n"(i32 2) #22
  call void @llvm.trap() #22
  unreachable

; <label>:92                                      ; preds = %76
  call void asm sideeffect "", "n"(i32 3) #22
  call void @llvm.trap() #22
  unreachable

_TTSfq4n_d___TFVs11_StringCoreCfVs13_StringBufferS_.exit: ; preds = %_TFVs13_StringBufferg9usedCountSi.exit.i
  %93 = shl i64 %86, 63
  %94 = or i64 %89, %93
  %95 = insertvalue { i64, i64, i64 } undef, i64 %80, 0
  %96 = insertvalue { i64, i64, i64 } %95, i64 %94, 1
  %97 = insertvalue { i64, i64, i64 } %96, i64 %30, 2
  call void @llvm.lifetime.end(i64 32, i8* %8)
  ret { i64, i64, i64 } %97

.lr.ph:                                           ; preds = %.lr.ph.preheader, %101
  %98 = phi i32 [ %105, %101 ], [ %73, %.lr.ph.preheader ]
  %99 = phi i8* [ %103, %101 ], [ %75, %.lr.ph.preheader ]
  %100 = and i32 %98, 255
  %not.17 = icmp eq i32 %98, %100
  br i1 %not.17, label %101, label %118

; <label>:101                                     ; preds = %.lr.ph
  %102 = trunc i32 %98 to i8
  store i8 %102, i8* %99, align 1
  %103 = getelementptr inbounds i8, i8* %99, i64 1
  %104 = call { i32, i1 } @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult(%GVs16IndexingIteratorGSRVs5UInt8__* nocapture nonnull dereferenceable(24) %6, %Vs4UTF8* nocapture nonnull dereferenceable(5) %7)
  %105 = extractvalue { i32, i1 } %104, 0
  %106 = extractvalue { i32, i1 } %104, 1
  br i1 %106, label %._crit_edge.loopexit, label %.lr.ph

; <label>:107                                     ; preds = %19
  %108 = icmp ult i32 %23, 65536
  %not. = icmp ult i32 %23, 128
  %.14 = and i1 %21, %not.
  %109 = select i1 %108, i64 1, i64 2
  %110 = call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %20, i64 %109)
  %111 = extractvalue { i64, i1 } %110, 0
  %112 = extractvalue { i64, i1 } %110, 1
  br i1 %112, label %120, label %19

; <label>:113                                     ; preds = %entry
  call void asm sideeffect "", "n"(i32 0) #22
  call void @llvm.trap()
  unreachable

; <label>:114                                     ; preds = %25
  call void asm sideeffect "", "n"(i32 2) #22
  call void @llvm.trap()
  unreachable

; <label>:115                                     ; preds = %46
  call void asm sideeffect "", "n"(i32 4) #22
  call void @llvm.trap()
  unreachable

; <label>:116                                     ; preds = %60
  call void asm sideeffect "", "n"(i32 7) #22
  call void @llvm.trap()
  unreachable

; <label>:117                                     ; preds = %32
  call void asm sideeffect "", "n"(i32 8) #22
  call void @llvm.trap()
  unreachable

; <label>:118                                     ; preds = %.lr.ph
  call void asm sideeffect "", "n"(i32 9) #22
  call void @llvm.trap()
  unreachable

; <label>:119                                     ; preds = %65
  call void asm sideeffect "", "n"(i32 10) #22
  call void @llvm.trap()
  unreachable

; <label>:120                                     ; preds = %107
  call void asm sideeffect "", "n"(i32 11) #22
  call void @llvm.trap()
  unreachable
}

; Function Attrs: nounwind
define linkonce_odr hidden { i32, i1 } @_TTSgq5GVs16IndexingIteratorGSRVs5UInt8__GS_GSRS0___s16IteratorProtocols___TFVs4UTF86decodeuRxs16IteratorProtocolwx7ElementzVs5UInt8rfRxOs21UnicodeDecodingResult(%GVs16IndexingIteratorGSRVs5UInt8__* nocapture dereferenceable(24), %Vs4UTF8* nocapture dereferenceable(5)) #2 {
entry:
  %._bitsInBuffer._value = getelementptr inbounds %Vs4UTF8, %Vs4UTF8* %1, i64 0, i32 1, i32 0
  %2 = load i8, i8* %._bitsInBuffer._value, align 4
  %3 = icmp eq i8 %2, 0
  br i1 %3, label %12, label %4, !prof !37

; <label>:4                                       ; preds = %entry
  %._decodeBuffer._value = getelementptr inbounds %Vs4UTF8, %Vs4UTF8* %1, i64 0, i32 0, i32 0
  %5 = load i32, i32* %._decodeBuffer._value, align 4
  %6 = trunc i32 %5 to i8
  %7 = icmp sgt i8 %6, -1
  br i1 %7, label %8, label %..preheader_crit_edge

..preheader_crit_edge:                            ; preds = %4
  %.pre = getelementptr inbounds %GVs16IndexingIteratorGSRVs5UInt8__, %GVs16IndexingIteratorGSRVs5UInt8__* %0, i64 0, i32 1, i32 0
  %.pre50 = bitcast %GVs16IndexingIteratorGSRVs5UInt8__* %0 to i64*
  %.pre51 = getelementptr inbounds %GVs16IndexingIteratorGSRVs5UInt8__, %GVs16IndexingIteratorGSRVs5UInt8__* %0, i64 0, i32 0, i32 1
  %.pre52 = bitcast %GSqGSPVs5UInt8__* %.pre51 to i64*
  br label %.preheader

; <label>:8                                       ; preds = %4
  %9 = and i32 %5, 255
  %10 = lshr i32 %5, 8
  store i32 %10, i32* %._decodeBuffer._value, align 4
  %11 = add i8 %2, -8
  store i8 %11, i8* %._bitsInBuffer._value, align 4
  br label %82

; <label>:12                                      ; preds = %entry
  %._position9._value = getelementptr inbounds %GVs16IndexingIteratorGSRVs5UInt8__, %GVs16IndexingIteratorGSRVs5UInt8__* %0, i64 0, i32 1, i32 0
  %13 = load i64, i64* %._position9._value, align 8
  %14 = bitcast %GVs16IndexingIteratorGSRVs5UInt8__* %0 to i64*
  %15 = load i64, i64* %14, align 8
  %._elements10._end = getelementptr inbounds %GVs16IndexingIteratorGSRVs5UInt8__, %GVs16IndexingIteratorGSRVs5UInt8__* %0, i64 0, i32 0, i32 1
  %16 = bitcast %GSqGSPVs5UInt8__* %._elements10._end to i64*
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %15, 0
  br i1 %18, label %33, label %19

; <label>:19                                      ; preds = %12
  %20 = icmp eq i64 %17, 0
  br i1 %20, label %92, label %21

; <label>:21                                      ; preds = %19
  %22 = sub i64 %17, %15
  %23 = icmp eq i64 %13, %22
  br i1 %23, label %82, label %24

; <label>:24                                      ; preds = %21
  %25 = inttoptr i64 %15 to %Vs5UInt8*
  %._value11 = getelementptr inbounds %Vs5UInt8, %Vs5UInt8* %25, i64 %13, i32 0
  %26 = load i8, i8* %._value11, align 1
  %27 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %13, i64 1)
  %28 = extractvalue { i64, i1 } %27, 1
  br i1 %28, label %91, label %29

; <label>:29                                      ; preds = %24
  %30 = extractvalue { i64, i1 } %27, 0
  store i64 %30, i64* %._position9._value, align 8
  %31 = icmp sgt i8 %26, -1
  %32 = zext i8 %26 to i32
  br i1 %31, label %82, label %35

; <label>:33                                      ; preds = %12
  %34 = icmp eq i64 %13, 0
  br i1 %34, label %82, label %90

; <label>:35                                      ; preds = %29
  %._decodeBuffer13._value = getelementptr inbounds %Vs4UTF8, %Vs4UTF8* %1, i64 0, i32 0, i32 0
  store i32 %32, i32* %._decodeBuffer13._value, align 4
  store i8 8, i8* %._bitsInBuffer._value, align 4
  br label %.preheader

.preheader:                                       ; preds = %..preheader_crit_edge, %35
  %.pre-phi53 = phi i64* [ %.pre52, %..preheader_crit_edge ], [ %16, %35 ]
  %.pre-phi = phi i64* [ %.pre50, %..preheader_crit_edge ], [ %14, %35 ]
  %._position._value.pre-phi = phi i64* [ %.pre, %..preheader_crit_edge ], [ %._position9._value, %35 ]
  %._decodeBuffer4._value.pre-phi = phi i32* [ %._decodeBuffer._value, %..preheader_crit_edge ], [ %._decodeBuffer13._value, %35 ]
  %.ph = phi i8 [ %2, %..preheader_crit_edge ], [ 8, %35 ]
  %.ph16 = phi i32 [ %5, %..preheader_crit_edge ], [ %32, %35 ]
  br label %36

; <label>:36                                      ; preds = %.preheader, %53
  %37 = phi i8 [ %64, %53 ], [ %.ph, %.preheader ]
  %38 = phi i32 [ %63, %53 ], [ %.ph16, %.preheader ]
  %39 = load i64, i64* %._position._value.pre-phi, align 8
  %40 = load i64, i64* %.pre-phi, align 8
  %41 = load i64, i64* %.pre-phi53, align 8
  %42 = icmp eq i64 %40, 0
  br i1 %42, label %45, label %43

; <label>:43                                      ; preds = %36
  %44 = icmp eq i64 %41, 0
  br i1 %44, label %89, label %47

; <label>:45                                      ; preds = %36
  %.lcssa111 = phi i64 [ %39, %36 ]
  %.lcssa106 = phi i32 [ %38, %36 ]
  %.lcssa = phi i8 [ %37, %36 ]
  %46 = icmp eq i64 %.lcssa111, 0
  br i1 %46, label %.loopexit, label %87

; <label>:47                                      ; preds = %43
  %48 = sub i64 %41, %40
  %49 = icmp eq i64 %39, %48
  br i1 %49, label %.loopexit.loopexit, label %50

; <label>:50                                      ; preds = %47
  %51 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %39, i64 1)
  %52 = extractvalue { i64, i1 } %51, 1
  br i1 %52, label %88, label %53

; <label>:53                                      ; preds = %50
  %54 = inttoptr i64 %40 to %Vs5UInt8*
  %._value = getelementptr inbounds %Vs5UInt8, %Vs5UInt8* %54, i64 %39, i32 0
  %55 = load i8, i8* %._value, align 1
  %56 = extractvalue { i64, i1 } %51, 0
  store i64 %56, i64* %._position._value.pre-phi, align 8
  %57 = load i8, i8* %._bitsInBuffer._value, align 4
  %58 = and i8 %57, 31
  %59 = zext i8 %58 to i32
  %60 = zext i8 %55 to i32
  %61 = shl i32 %60, %59
  %62 = load i32, i32* %._decodeBuffer4._value.pre-phi, align 4
  %63 = or i32 %61, %62
  store i32 %63, i32* %._decodeBuffer4._value.pre-phi, align 4
  %64 = add i8 %57, 8
  store i8 %64, i8* %._bitsInBuffer._value, align 4
  %65 = icmp ult i8 %64, 32
  br i1 %65, label %36, label %.loopexit17.loopexit

.loopexit.loopexit:                               ; preds = %47
  %.lcssa108 = phi i32 [ %38, %47 ]
  %.lcssa103 = phi i8 [ %37, %47 ]
  br label %.loopexit

.loopexit:                                        ; preds = %.loopexit.loopexit, %45
  %66 = phi i32 [ %.lcssa108, %.loopexit.loopexit ], [ %.lcssa106, %45 ]
  %67 = phi i8 [ %.lcssa103, %.loopexit.loopexit ], [ %.lcssa, %45 ]
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %82, label %.loopexit17

.loopexit17.loopexit:                             ; preds = %53
  %.lcssa117 = phi i8 [ %64, %53 ]
  %.lcssa116 = phi i32 [ %63, %53 ]
  br label %.loopexit17

.loopexit17:                                      ; preds = %.loopexit17.loopexit, %.loopexit
  %69 = phi i8 [ %67, %.loopexit ], [ %.lcssa117, %.loopexit17.loopexit ]
  %70 = phi i32 [ %66, %.loopexit ], [ %.lcssa116, %.loopexit17.loopexit ]
  %71 = tail call { i32, i1, i8 } @_TTSfq4n_d___TZFVs4UTF810_decodeOnefVs6UInt32T6resultGSqS0__6lengthVs5UInt8_(i32 %70)
  %72 = extractvalue { i32, i1, i8 } %71, 1
  %73 = extractvalue { i32, i1, i8 } %71, 2
  %74 = shl i8 %73, 3
  %75 = zext i8 %74 to i64
  %76 = and i64 %75, 56
  %77 = extractvalue { i32, i1, i8 } %71, 0
  %78 = zext i32 %70 to i64
  %79 = lshr i64 %78, %76
  %80 = trunc i64 %79 to i32
  store i32 %80, i32* %._decodeBuffer4._value.pre-phi, align 4
  %81 = sub i8 %69, %74
  store i8 %81, i8* %._bitsInBuffer._value, align 4
  %. = select i1 %72, i32 1, i32 %77
  br label %82

; <label>:82                                      ; preds = %33, %29, %.loopexit, %.loopexit17, %21, %8
  %83 = phi i32 [ %9, %8 ], [ 0, %21 ], [ 0, %33 ], [ %., %.loopexit17 ], [ 0, %.loopexit ], [ %32, %29 ]
  %84 = phi i1 [ false, %8 ], [ true, %21 ], [ true, %33 ], [ %72, %.loopexit17 ], [ true, %.loopexit ], [ false, %29 ]
  %85 = insertvalue { i32, i1 } undef, i32 %83, 0
  %86 = insertvalue { i32, i1 } %85, i1 %84, 1
  ret { i32, i1 } %86

; <label>:87                                      ; preds = %45
  tail call void asm sideeffect "", "n"(i32 0) #22
  tail call void @llvm.trap()
  unreachable

; <label>:88                                      ; preds = %50
  tail call void asm sideeffect "", "n"(i32 3) #22
  tail call void @llvm.trap()
  unreachable

; <label>:89                                      ; preds = %43
  tail call void asm sideeffect "", "n"(i32 6) #22
  tail call void @llvm.trap()
  unreachable

; <label>:90                                      ; preds = %33
  tail call void asm sideeffect "", "n"(i32 7) #22
  tail call void @llvm.trap()
  unreachable

; <label>:91                                      ; preds = %24
  tail call void asm sideeffect "", "n"(i32 9) #22
  tail call void @llvm.trap()
  unreachable

; <label>:92                                      ; preds = %19
  tail call void asm sideeffect "", "n"(i32 11) #22
  tail call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden i64 @_TTSfq4n_n_n_d___TFVs13_StringBufferCfT8capacitySi11initialSizeSi12elementWidthSi_S_(i64, i64, i64) #0 {
entry:
  %3 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %2, i64 1)
  %4 = extractvalue { i64, i1 } %3, 0
  %5 = sub i64 1, %4
  %6 = extractvalue { i64, i1 } %3, 1
  br i1 %6, label %65, label %7

; <label>:7                                       ; preds = %entry
  %8 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %0, i64 %5)
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %66, label %10

; <label>:10                                      ; preds = %7
  %11 = extractvalue { i64, i1 } %8, 0
  %12 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %11, i64 %5)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %67, label %15

; <label>:15                                      ; preds = %10
  %16 = icmp slt i64 %5, 0
  br i1 %16, label %68, label %17

; <label>:17                                      ; preds = %15
  %18 = icmp ugt i64 %5, 63
  br i1 %18, label %69, label %19

; <label>:19                                      ; preds = %17
  %20 = load %swift.type*, %swift.type** @_TMLGCs18_HeapBufferStorageVs18_StringBufferIVarsVs6UInt16_, align 8
  %21 = icmp eq %swift.type* %20, null
  br i1 %21, label %cacheIsNull.i, label %_TMaGCs18_HeapBufferStorageVs18_StringBufferIVarsVs6UInt16_.exit

cacheIsNull.i:                                    ; preds = %19
  %22 = tail call %swift.type* @_TMaCs18_HeapBufferStorage(%swift.type* nonnull @_TMVs18_StringBufferIVars, %swift.type* nonnull @_TMVs6UInt16) #17
  store atomic %swift.type* %22, %swift.type** @_TMLGCs18_HeapBufferStorageVs18_StringBufferIVarsVs6UInt16_ release, align 8
  br label %_TMaGCs18_HeapBufferStorageVs18_StringBufferIVarsVs6UInt16_.exit

_TMaGCs18_HeapBufferStorageVs18_StringBufferIVarsVs6UInt16_.exit: ; preds = %19, %cacheIsNull.i
  %23 = phi %swift.type* [ %20, %19 ], [ %22, %cacheIsNull.i ]
  %24 = ashr i64 %13, %5
  %25 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %24, i64 2)
  %26 = extractvalue { i64, i1 } %25, 1
  br i1 %26, label %31, label %27

; <label>:27                                      ; preds = %_TMaGCs18_HeapBufferStorageVs18_StringBufferIVarsVs6UInt16_.exit
  %28 = extractvalue { i64, i1 } %25, 0
  %29 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %28, i64 32)
  %30 = extractvalue { i64, i1 } %29, 1
  br i1 %30, label %32, label %_TTSfq4n_n_n_d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TFVs11_HeapBufferCfTPMPs9AnyObject_xSi_GS_xq__.exit

; <label>:31                                      ; preds = %_TMaGCs18_HeapBufferStorageVs18_StringBufferIVarsVs6UInt16_.exit
  tail call void asm sideeffect "", "n"(i32 0) #22
  tail call void @llvm.trap()
  unreachable

; <label>:32                                      ; preds = %27
  tail call void asm sideeffect "", "n"(i32 1) #22
  tail call void @llvm.trap()
  unreachable

_TTSfq4n_n_n_d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TFVs11_HeapBufferCfTPMPs9AnyObject_xSi_GS_xq__.exit: ; preds = %27
  %33 = extractvalue { i64, i1 } %29, 0
  %34 = tail call %objc_object* @swift_bufferAllocate(%swift.type* %23, i64 %33, i64 7)
  %35 = ptrtoint %objc_object* %34 to i64
  %36 = bitcast %objc_object* %34 to i8*
  %37 = getelementptr inbounds i8, i8* %36, i64 16
  %38 = bitcast i8* %37 to i64*
  store i64 0, i64* %38, align 8
  %.capacityAndElementShift.i = getelementptr inbounds i8, i8* %36, i64 24
  %.capacityAndElementShift._value.i = bitcast i8* %.capacityAndElementShift.i to i64*
  store i64 %4, i64* %.capacityAndElementShift._value.i, align 8
  %39 = icmp eq i64 %4, 0
  %40 = icmp eq %objc_object* %34, null
  br i1 %39, label %42, label %41

; <label>:41                                      ; preds = %_TTSfq4n_n_n_d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TFVs11_HeapBufferCfTPMPs9AnyObject_xSi_GS_xq__.exit
  br i1 %40, label %75, label %.critedge

; <label>:42                                      ; preds = %_TTSfq4n_n_n_d___TTSgq5Vs18_StringBufferIVars_Vs6UInt16___TFVs11_HeapBufferCfTPMPs9AnyObject_xSi_GS_xq__.exit
  br i1 %40, label %76, label %.critedge.thread

.critedge:                                        ; preds = %41
  %43 = icmp slt i64 %4, 0
  br i1 %43, label %70, label %.critedge.thread

.critedge.thread:                                 ; preds = %42, %.critedge
  %44 = getelementptr inbounds i8, i8* %36, i64 32
  %45 = shl i64 %1, %4
  %46 = getelementptr inbounds i8, i8* %44, i64 %45
  %47 = ptrtoint i8* %46 to i64
  store i64 %47, i64* %38, align 8
  %48 = tail call i64 @_swift_stdlib_malloc_size(i8* %36)
  %49 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %48, i64 32)
  %50 = extractvalue { i64, i1 } %49, 0
  %51 = extractvalue { i64, i1 } %49, 1
  br i1 %51, label %71, label %52

; <label>:52                                      ; preds = %.critedge.thread
  %53 = icmp ugt i64 %4, 63
  br i1 %53, label %72, label %54

; <label>:54                                      ; preds = %52
  %55 = sdiv i64 %50, 2
  %56 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %55, i64 %5)
  %57 = extractvalue { i64, i1 } %56, 1
  br i1 %57, label %73, label %58

; <label>:58                                      ; preds = %54
  %59 = extractvalue { i64, i1 } %56, 0
  %60 = shl i64 %59, 1
  %61 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %60, i64 %4)
  %62 = extractvalue { i64, i1 } %61, 1
  br i1 %62, label %74, label %63

; <label>:63                                      ; preds = %58
  %64 = extractvalue { i64, i1 } %61, 0
  store i64 %64, i64* %.capacityAndElementShift._value.i, align 8
  ret i64 %35

; <label>:65                                      ; preds = %entry
  tail call void asm sideeffect "", "n"(i32 0) #22
  tail call void @llvm.trap()
  unreachable

; <label>:66                                      ; preds = %7
  tail call void asm sideeffect "", "n"(i32 1) #22
  tail call void @llvm.trap()
  unreachable

; <label>:67                                      ; preds = %10
  tail call void asm sideeffect "", "n"(i32 2) #22
  tail call void @llvm.trap()
  unreachable

; <label>:68                                      ; preds = %15
  tail call void asm sideeffect "", "n"(i32 3) #22
  tail call void @llvm.trap()
  unreachable

; <label>:69                                      ; preds = %17
  tail call void asm sideeffect "", "n"(i32 4) #22
  tail call void @llvm.trap()
  unreachable

; <label>:70                                      ; preds = %.critedge
  tail call void asm sideeffect "", "n"(i32 5) #22
  tail call void @llvm.trap()
  unreachable

; <label>:71                                      ; preds = %.critedge.thread
  tail call void asm sideeffect "", "n"(i32 8) #22
  tail call void @llvm.trap()
  unreachable

; <label>:72                                      ; preds = %52
  tail call void asm sideeffect "", "n"(i32 9) #22
  tail call void @llvm.trap()
  unreachable

; <label>:73                                      ; preds = %54
  tail call void asm sideeffect "", "n"(i32 10) #22
  tail call void @llvm.trap()
  unreachable

; <label>:74                                      ; preds = %58
  tail call void asm sideeffect "", "n"(i32 11) #22
  tail call void @llvm.trap()
  unreachable

; <label>:75                                      ; preds = %41
  tail call void asm sideeffect "", "n"(i32 14) #22
  tail call void @llvm.trap()
  unreachable

; <label>:76                                      ; preds = %42
  tail call void asm sideeffect "", "n"(i32 15) #22
  tail call void @llvm.trap()
  unreachable
}

; Function Attrs: norecurse nounwind readnone
define linkonce_odr hidden { i32, i1, i8 } @_TTSfq4n_d___TZFVs4UTF810_decodeOnefVs6UInt32T6resultGSqS0__6lengthVs5UInt8_(i32) #7 {
entry:
  %1 = trunc i32 %0 to i8
  %2 = icmp sgt i8 %1, -1
  br i1 %2, label %70, label %3

; <label>:3                                       ; preds = %entry
  %4 = lshr i32 %0, 3
  %5 = and i32 %4, 31
  %6 = lshr i32 -1325400065, %5
  %7 = and i32 %6, 1
  %8 = lshr i32 -1056964609, %5
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  %11 = icmp eq i32 %7, 0
  br i1 %10, label %12, label %13

; <label>:12                                      ; preds = %3
  br i1 %11, label %59, label %42

; <label>:13                                      ; preds = %3
  %or.cond.not = xor i1 %11, true
  %14 = and i32 %0, 12295
  %15 = icmp eq i32 %14, 0
  %or.cond3 = or i1 %15, %or.cond.not
  br i1 %or.cond3, label %72, label %16

; <label>:16                                      ; preds = %13
  %17 = and i32 %0, 4
  %18 = icmp eq i32 %17, 0
  %19 = and i32 %0, 12291
  %20 = icmp eq i32 %19, 0
  %or.cond5 = or i1 %18, %20
  br i1 %or.cond5, label %21, label %72

; <label>:21                                      ; preds = %16
  %22 = and i32 %0, -1061109512
  %23 = icmp eq i32 %22, -2139062032
  br i1 %23, label %24, label %36, !prof !37

; <label>:24                                      ; preds = %21
  %25 = lshr i32 %0, 24
  %26 = and i32 %25, 63
  %27 = lshr i32 %0, 10
  %28 = and i32 %27, 4032
  %29 = or i32 %26, %28
  %30 = shl i32 %0, 4
  %31 = and i32 %30, 258048
  %32 = or i32 %29, %31
  %33 = shl i32 %0, 18
  %34 = and i32 %33, 1835008
  %35 = or i32 %32, %34
  br label %72

; <label>:36                                      ; preds = %21
  %37 = and i32 %0, 49152
  %38 = icmp eq i32 %37, 32768
  br i1 %38, label %39, label %72

; <label>:39                                      ; preds = %36
  %40 = and i32 %0, 12582912
  %41 = icmp ne i32 %40, 8388608
  %. = select i1 %41, i8 2, i8 3
  br label %72

; <label>:42                                      ; preds = %12
  %43 = and i32 %0, 8207
  switch i32 %43, label %44 [
    i32 0, label %72
    i32 8205, label %72
  ], !prof !38

; <label>:44                                      ; preds = %42
  %45 = and i32 %0, 12632304
  %46 = icmp eq i32 %45, 8421600
  br i1 %46, label %47, label %56, !prof !37

; <label>:47                                      ; preds = %44
  %48 = lshr i32 %0, 16
  %49 = and i32 %48, 63
  %50 = lshr i32 %0, 2
  %51 = and i32 %50, 4032
  %52 = or i32 %49, %51
  %53 = shl i32 %0, 12
  %54 = and i32 %53, 61440
  %55 = or i32 %52, %54
  br label %72

; <label>:56                                      ; preds = %44
  %57 = and i32 %0, 49152
  %58 = icmp ne i32 %57, 32768
  %.1 = select i1 %58, i8 1, i8 2
  br label %72

; <label>:59                                      ; preds = %12
  %60 = and i32 %0, 49376
  %61 = icmp ne i32 %60, 32960
  %62 = and i32 %0, 30
  %63 = icmp eq i32 %62, 0
  %or.cond7 = or i1 %61, %63
  br i1 %or.cond7, label %72, label %64, !prof !39

; <label>:64                                      ; preds = %59
  %65 = lshr i32 %0, 8
  %66 = and i32 %65, 63
  %67 = shl i32 %0, 6
  %68 = and i32 %67, 1984
  %69 = or i32 %66, %68
  br label %72

; <label>:70                                      ; preds = %entry
  %71 = and i32 %0, 255
  br label %72

; <label>:72                                      ; preds = %59, %42, %42, %16, %13, %36, %56, %39, %70, %64, %47, %24
  %73 = phi i32 [ %35, %24 ], [ %55, %47 ], [ %69, %64 ], [ %71, %70 ], [ 0, %13 ], [ 0, %39 ], [ 0, %36 ], [ 0, %56 ], [ 0, %42 ], [ 0, %59 ], [ 0, %16 ], [ 0, %42 ]
  %74 = phi i1 [ false, %24 ], [ false, %47 ], [ false, %64 ], [ false, %70 ], [ true, %13 ], [ true, %39 ], [ true, %36 ], [ true, %56 ], [ true, %42 ], [ true, %59 ], [ true, %16 ], [ true, %42 ]
  %75 = phi i8 [ 4, %24 ], [ 3, %47 ], [ 2, %64 ], [ 1, %70 ], [ 1, %13 ], [ %., %39 ], [ 1, %36 ], [ %.1, %56 ], [ 1, %42 ], [ 1, %59 ], [ 1, %16 ], [ 1, %42 ]
  %76 = insertvalue { i32, i1, i8 } undef, i32 %73, 0
  %77 = insertvalue { i32, i1, i8 } %76, i1 %74, 1
  %78 = insertvalue { i32, i1, i8 } %77, i8 %75, 2
  ret { i32, i1, i8 } %78
}

; Function Attrs: readonly
define linkonce_odr hidden { i64, i64, i64 } @_TTSfq4g_d___TFSSCft19stringInterpolationGSaSS__SS(%swift.bridge*) #8 {
entry:
  %1 = alloca %Vs11_StringCore, align 8
  %2 = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %1, i64 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 24, i8* %2)
  %3 = bitcast %Vs11_StringCore* %1 to i64*
  store i64 ptrtoint (%Vs6UInt32* @_Tvs19_emptyStringStorageVs6UInt32 to i64), i64* %3, align 8
  %._countAndFlags._value = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %1, i64 0, i32 1, i32 0
  %._owner = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %1, i64 0, i32 2
  %4 = bitcast %GSqPs9AnyObject__* %._owner to i64*
  %5 = bitcast %swift.bridge* %0 to i8*
  %6 = getelementptr inbounds i8, i8* %5, i64 16
  %._storage.count._value = bitcast i8* %6 to i64*
  %7 = bitcast i64* %._countAndFlags._value to i8*
  call void @llvm.memset.p0i8.i64(i8* %7, i8 0, i64 16, i32 8, i1 false)
  %8 = load i64, i64* %._storage.count._value, align 8, !range !28
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %34, label %10

; <label>:10                                      ; preds = %entry
  %11 = getelementptr inbounds i8, i8* %5, i64 32
  %12 = bitcast i8* %11 to %SS*
  %13 = bitcast %GSqPs9AnyObject__* %._owner to %objc_object**
  %14 = tail call %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge* nonnull %0) #22
  br label %15

; <label>:15                                      ; preds = %._crit_edge, %10
  %16 = phi i64 [ 0, %10 ], [ %.pre, %._crit_edge ]
  %17 = phi i64 [ 0, %10 ], [ %31, %._crit_edge ]
  %._core = getelementptr inbounds %SS, %SS* %12, i64 %17, i32 0
  %18 = bitcast %Vs11_StringCore* %._core to i64*
  %19 = load i64, i64* %18, align 8
  %._core._countAndFlags._value = getelementptr inbounds %SS, %SS* %12, i64 %17, i32 0, i32 1, i32 0
  %20 = load i64, i64* %._core._countAndFlags._value, align 8
  %._core._owner = getelementptr inbounds %SS, %SS* %12, i64 %17, i32 0, i32 2
  %21 = bitcast %GSqPs9AnyObject__* %._core._owner to i64*
  %22 = load i64, i64* %21, align 8
  %23 = and i64 %16, 4611686018427387903
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %27, label %25

; <label>:25                                      ; preds = %15
  %26 = inttoptr i64 %22 to %objc_object*
  tail call void @swift_unknownRetain(%objc_object* %26) #22
  call void @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_(i64 %19, i64 %20, i64 %22, %Vs11_StringCore* nocapture nonnull dereferenceable(24) %1)
  tail call void @swift_unknownRelease(%objc_object* %26) #22
  br label %30

; <label>:27                                      ; preds = %15
  %28 = load %objc_object*, %objc_object** %13, align 8
  store i64 %19, i64* %3, align 8
  store i64 %20, i64* %._countAndFlags._value, align 8
  store i64 %22, i64* %4, align 8
  %29 = inttoptr i64 %22 to %objc_object*
  tail call void @swift_unknownRetain(%objc_object* %29) #22
  tail call void @swift_unknownRelease(%objc_object* %28) #22
  br label %30

; <label>:30                                      ; preds = %27, %25
  %31 = add i64 %17, 1
  %32 = icmp eq i64 %31, %8
  br i1 %32, label %33, label %._crit_edge

._crit_edge:                                      ; preds = %30
  %.pre = load i64, i64* %._countAndFlags._value, align 8
  br label %15

; <label>:33                                      ; preds = %30
  tail call void @swift_bridgeObjectRelease(%swift.bridge* nonnull %0) #22
  %.pre9 = load i64, i64* %3, align 8
  %.pre10 = load i64, i64* %._countAndFlags._value, align 8
  %.pre11 = load i64, i64* %4, align 8
  br label %34

; <label>:34                                      ; preds = %entry, %33
  %35 = phi i64 [ 0, %entry ], [ %.pre11, %33 ]
  %36 = phi i64 [ 0, %entry ], [ %.pre10, %33 ]
  %37 = phi i64 [ ptrtoint (%Vs6UInt32* @_Tvs19_emptyStringStorageVs6UInt32 to i64), %entry ], [ %.pre9, %33 ]
  call void @llvm.lifetime.end(i64 24, i8* %2)
  %38 = insertvalue { i64, i64, i64 } undef, i64 %37, 0
  %39 = insertvalue { i64, i64, i64 } %38, i64 %36, 1
  %40 = insertvalue { i64, i64, i64 } %39, i64 %35, 2
  ret { i64, i64, i64 } %40
}

; Function Attrs: noinline
declare void @_TTSfq4gs_n___TFVs11_StringCore6appendfS_T_(i64, i64, i64, %Vs11_StringCore* nocapture dereferenceable(24)) #9

define linkonce_odr hidden i8* @_TFVs12_ArrayBufferg19firstElementAddressGSpx_(%swift.bridge*, %swift.type* %Element) #10 {
entry:
  %1 = tail call i1 @_swift_isClassOrObjCExistentialType(%swift.type* %Element, %swift.type* %Element)
  %2 = bitcast %swift.bridge* %0 to %Cs27_ContiguousArrayStorageBase*
  %3 = ptrtoint %swift.bridge* %0 to i64
  %4 = and i64 %3, 72057594037927928
  %5 = inttoptr i64 %4 to %Cs27_ContiguousArrayStorageBase*
  %6 = select i1 %1, %Cs27_ContiguousArrayStorageBase* %5, %Cs27_ContiguousArrayStorageBase* %2
  %7 = bitcast %Cs27_ContiguousArrayStorageBase* %6 to %objc_object*
  %8 = bitcast %objc_object* %7 to %swift.refcounted*
  %9 = bitcast %objc_object* %7 to i8*
  %Header.valueWitnesses.i.i.i.i = load i8**, i8*** bitcast (%swift.type* getelementptr (%swift.type, %swift.type* @_TMVs10_ArrayBody, i64 2305843009213693951) to i8***), align 8, !invariant.load !29, !dereferenceable !40
  %10 = getelementptr inbounds i8*, i8** %Header.valueWitnesses.i.i.i.i, i64 18
  %11 = bitcast i8** %10 to i64*
  %12 = load i64, i64* %11, align 8, !invariant.load !29
  %flags.alignmentMask.i.i.i.i = and i64 %12, 65535
  %13 = add nuw nsw i64 %flags.alignmentMask.i.i.i.i, 16
  %.not.i.i.i.i = or i64 %12, -65536
  %14 = xor i64 %.not.i.i.i.i, 65535
  %15 = and i64 %13, %14
  %16 = getelementptr inbounds i8*, i8** %Header.valueWitnesses.i.i.i.i, i64 17
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8, !invariant.load !29
  %19 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %15, i64 %18) #22
  %20 = extractvalue { i64, i1 } %19, 1
  %21 = tail call %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge* %0) #22
  br i1 %20, label %38, label %22

; <label>:22                                      ; preds = %entry
  %23 = extractvalue { i64, i1 } %19, 0
  %24 = getelementptr inbounds %swift.type, %swift.type* %Element, i64 -1
  %25 = bitcast %swift.type* %24 to i8***
  %Element.valueWitnesses.i.i.i = load i8**, i8*** %25, align 8, !invariant.load !29, !dereferenceable !40
  %26 = getelementptr inbounds i8*, i8** %Element.valueWitnesses.i.i.i, i64 18
  %27 = bitcast i8** %26 to i64*
  %28 = load i64, i64* %27, align 8, !invariant.load !29
  %flags.alignmentMask.i.i.i = and i64 %28, 65535
  %29 = add nuw nsw i64 %flags.alignmentMask.i.i.i, 1
  %30 = tail call { i64, i1 } @llvm.uadd.with.overflow.i64(i64 %23, i64 %29) #22
  %31 = extractvalue { i64, i1 } %30, 1
  br i1 %31, label %39, label %32

; <label>:32                                      ; preds = %22
  %33 = extractvalue { i64, i1 } %30, 0
  %34 = add i64 %33, -1
  %.not.i.i.i = or i64 %28, -65536
  %35 = xor i64 %.not.i.i.i, 65535
  %36 = and i64 %34, %35
  %37 = icmp slt i64 %36, 0
  br i1 %37, label %40, label %_TFVs22_ContiguousArrayBufferg19firstElementAddressGSpx_.exit

; <label>:38                                      ; preds = %entry
  tail call void asm sideeffect "", "n"(i32 0) #22
  tail call void @llvm.trap() #22
  unreachable

; <label>:39                                      ; preds = %22
  tail call void asm sideeffect "", "n"(i32 1) #22
  tail call void @llvm.trap() #22
  unreachable

; <label>:40                                      ; preds = %32
  tail call void asm sideeffect "", "n"(i32 2) #22
  tail call void @llvm.trap() #22
  unreachable

_TFVs22_ContiguousArrayBufferg19firstElementAddressGSpx_.exit: ; preds = %32
  tail call void @rt_swift_release(%swift.refcounted* %8) #22
  %41 = getelementptr inbounds i8, i8* %9, i64 %36
  ret i8* %41
}

declare void @_TFSa40_makeUniqueAndReserveCapacityIfNotUniquefT_T_(%swift.type* nocapture readonly, %Sa* nocapture dereferenceable(8)) #10

declare void @_TFSa37_appendElementAssumeUniqueAndCapacityfTSi10newElementx_T_(i64, %swift.opaque* noalias nocapture, %swift.type* nocapture readonly, %Sa* nocapture readonly dereferenceable(8)) #10

define linkonce_odr hidden i16 @_TFVSS9UTF16Viewg9subscriptFVS_5IndexVs6UInt16(i64, %VSS9UTF16View* noalias nocapture readonly dereferenceable(40)) #10 {
entry:
  %._offset._value = getelementptr inbounds %VSS9UTF16View, %VSS9UTF16View* %1, i64 0, i32 0, i32 0
  %2 = load i64, i64* %._offset._value, align 8
  %._core = getelementptr inbounds %VSS9UTF16View, %VSS9UTF16View* %1, i64 0, i32 2
  %3 = bitcast %Vs11_StringCore* %._core to i64*
  %4 = load i64, i64* %3, align 8
  %._core._countAndFlags._value = getelementptr inbounds %VSS9UTF16View, %VSS9UTF16View* %1, i64 0, i32 2, i32 1, i32 0
  %5 = load i64, i64* %._core._countAndFlags._value, align 8
  %._core._owner = getelementptr inbounds %VSS9UTF16View, %VSS9UTF16View* %1, i64 0, i32 2, i32 2
  %6 = bitcast %GSqPs9AnyObject__* %._core._owner to i64*
  %7 = load i64, i64* %6, align 8
  %8 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %2, i64 %0)
  %9 = extractvalue { i64, i1 } %8, 0
  %10 = extractvalue { i64, i1 } %8, 1
  br i1 %10, label %109, label %11

; <label>:11                                      ; preds = %entry
  %12 = icmp slt i64 %0, 0
  %._length._value = getelementptr inbounds %VSS9UTF16View, %VSS9UTF16View* %1, i64 0, i32 1, i32 0
  %13 = load i64, i64* %._length._value, align 8
  %14 = icmp sle i64 %13, %0
  %15 = or i1 %12, %14
  %16 = and i64 %5, 4611686018427387903
  %17 = icmp ugt i64 %9, %16
  %18 = or i1 %17, %15
  br i1 %18, label %110, label %19

; <label>:19                                      ; preds = %11
  %20 = icmp eq i64 %4, 0
  br i1 %20, label %37, label %21

; <label>:21                                      ; preds = %19
  %22 = lshr i64 %5, 63
  %23 = inttoptr i64 %4 to i8*
  %24 = shl i64 %9, %22
  %25 = getelementptr inbounds i8, i8* %23, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i16
  %28 = getelementptr inbounds i8, i8* %25, i64 1
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i16
  %31 = shl nuw nsw i64 %22, 8
  %32 = trunc i64 %31 to i16
  %33 = mul nuw i16 %30, %32
  %34 = tail call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %27, i16 %33)
  %35 = extractvalue { i16, i1 } %34, 0
  %36 = extractvalue { i16, i1 } %34, 1
  br i1 %36, label %111, label %40

; <label>:37                                      ; preds = %19
  %38 = inttoptr i64 %7 to %objc_object*
  tail call void @swift_unknownRetain(%objc_object* %38) #22
  %39 = tail call i16 @_TTSfq4gs_n___TFs21_cocoaStringSubscriptFTVs11_StringCoreSi_Vs6UInt16(i64 %5, i64 %7, i64 %9)
  tail call void @swift_unknownRelease(%objc_object* %38) #22
  br label %40

; <label>:40                                      ; preds = %21, %37
  %41 = phi i16 [ %39, %37 ], [ %35, %21 ]
  %.mask = and i16 %41, -2048
  %42 = icmp eq i16 %.mask, -10240
  br i1 %42, label %43, label %107, !prof !36

; <label>:43                                      ; preds = %40
  %.mask7 = and i16 %41, -1024
  %44 = icmp eq i16 %.mask7, -10240
  br i1 %44, label %76, label %45

; <label>:45                                      ; preds = %43
  %46 = icmp eq i64 %9, 0
  br i1 %46, label %107, label %47

; <label>:47                                      ; preds = %45
  %48 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %9, i64 1)
  %49 = extractvalue { i64, i1 } %48, 0
  %50 = extractvalue { i64, i1 } %48, 1
  br i1 %50, label %112, label %51

; <label>:51                                      ; preds = %47
  %52 = icmp ugt i64 %49, %16
  br i1 %52, label %113, label %53

; <label>:53                                      ; preds = %51
  br i1 %20, label %70, label %54

; <label>:54                                      ; preds = %53
  %55 = lshr i64 %5, 63
  %56 = inttoptr i64 %4 to i8*
  %57 = shl i64 %49, %55
  %58 = getelementptr inbounds i8, i8* %56, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = zext i8 %59 to i16
  %61 = getelementptr inbounds i8, i8* %58, i64 1
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i16
  %64 = shl nuw nsw i64 %55, 8
  %65 = trunc i64 %64 to i16
  %66 = mul nuw i16 %63, %65
  %67 = tail call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %60, i16 %66)
  %68 = extractvalue { i16, i1 } %67, 0
  %69 = extractvalue { i16, i1 } %67, 1
  br i1 %69, label %114, label %73

; <label>:70                                      ; preds = %53
  %71 = inttoptr i64 %7 to %objc_object*
  tail call void @swift_unknownRetain(%objc_object* %71) #22
  %72 = tail call i16 @_TTSfq4gs_n___TFs21_cocoaStringSubscriptFTVs11_StringCoreSi_Vs6UInt16(i64 %5, i64 %7, i64 %49)
  tail call void @swift_unknownRelease(%objc_object* %71) #22
  br label %73

; <label>:73                                      ; preds = %54, %70
  %74 = phi i16 [ %72, %70 ], [ %68, %54 ]
  %.mask8 = and i16 %74, -1024
  %75 = icmp eq i16 %.mask8, -10240
  %. = select i1 %75, i16 %41, i16 -3
  ret i16 %.

; <label>:76                                      ; preds = %43
  %77 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %9, i64 1)
  %78 = extractvalue { i64, i1 } %77, 0
  %79 = extractvalue { i64, i1 } %77, 1
  br i1 %79, label %115, label %80

; <label>:80                                      ; preds = %76
  %81 = icmp slt i64 %78, %16
  br i1 %81, label %82, label %107

; <label>:82                                      ; preds = %80
  %83 = icmp ugt i64 %78, %16
  br i1 %83, label %116, label %84

; <label>:84                                      ; preds = %82
  br i1 %20, label %101, label %85

; <label>:85                                      ; preds = %84
  %86 = lshr i64 %5, 63
  %87 = inttoptr i64 %4 to i8*
  %88 = shl i64 %78, %86
  %89 = getelementptr inbounds i8, i8* %87, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = zext i8 %90 to i16
  %92 = getelementptr inbounds i8, i8* %89, i64 1
  %93 = load i8, i8* %92, align 1
  %94 = zext i8 %93 to i16
  %95 = shl nuw nsw i64 %86, 8
  %96 = trunc i64 %95 to i16
  %97 = mul nuw i16 %94, %96
  %98 = tail call { i16, i1 } @llvm.uadd.with.overflow.i16(i16 %91, i16 %97)
  %99 = extractvalue { i16, i1 } %98, 0
  %100 = extractvalue { i16, i1 } %98, 1
  br i1 %100, label %117, label %104

; <label>:101                                     ; preds = %84
  %102 = inttoptr i64 %7 to %objc_object*
  tail call void @swift_unknownRetain(%objc_object* %102) #22
  %103 = tail call i16 @_TTSfq4gs_n___TFs21_cocoaStringSubscriptFTVs11_StringCoreSi_Vs6UInt16(i64 %5, i64 %7, i64 %78)
  tail call void @swift_unknownRelease(%objc_object* %102) #22
  br label %104

; <label>:104                                     ; preds = %85, %101
  %105 = phi i16 [ %103, %101 ], [ %99, %85 ]
  %.mask9 = and i16 %105, -1024
  %106 = icmp eq i16 %.mask9, -9216
  %.6 = select i1 %106, i16 %41, i16 -3
  br label %107

; <label>:107                                     ; preds = %45, %40, %104, %80
  %108 = phi i16 [ -3, %45 ], [ -3, %80 ], [ %41, %40 ], [ %.6, %104 ]
  ret i16 %108

; <label>:109                                     ; preds = %entry
  tail call void asm sideeffect "", "n"(i32 0) #22
  tail call void @llvm.trap()
  unreachable

; <label>:110                                     ; preds = %11
  tail call void asm sideeffect "", "n"(i32 1) #22
  tail call void @llvm.trap()
  unreachable

; <label>:111                                     ; preds = %21
  tail call void asm sideeffect "", "n"(i32 5) #22
  tail call void @llvm.trap()
  unreachable

; <label>:112                                     ; preds = %47
  tail call void asm sideeffect "", "n"(i32 6) #22
  tail call void @llvm.trap()
  unreachable

; <label>:113                                     ; preds = %51
  tail call void asm sideeffect "", "n"(i32 7) #22
  tail call void @llvm.trap()
  unreachable

; <label>:114                                     ; preds = %54
  tail call void asm sideeffect "", "n"(i32 11) #22
  tail call void @llvm.trap()
  unreachable

; <label>:115                                     ; preds = %76
  tail call void asm sideeffect "", "n"(i32 12) #22
  tail call void @llvm.trap()
  unreachable

; <label>:116                                     ; preds = %82
  tail call void asm sideeffect "", "n"(i32 13) #22
  tail call void @llvm.trap()
  unreachable

; <label>:117                                     ; preds = %85
  tail call void asm sideeffect "", "n"(i32 17) #22
  tail call void @llvm.trap()
  unreachable
}

; Function Attrs: noinline
define linkonce_odr hidden void @_TTSg5V4Main8Employee___TFSa16_copyToNewBufferfT8oldCountSi_T_(i64, %Sa* nocapture dereferenceable(8)) #11 {
  tail call void @_TTSg5V4Main8Employee___TFSa16_copyToNewBufferfT8oldCountSi_T__merged(i64 %0, %Sa* nocapture dereferenceable(8) %1, %swift.refcounted* (%Vs12_ArrayBuffer*, i64, i64)* @_TTSg5GVs12_ArrayBufferV4Main8Employee_GS_S1__s20_ArrayBufferProtocols___TFs31_forceCreateUniqueMutableBufferuRxs20_ArrayBufferProtocolrFTRx17countForNewBufferSi14minNewCapacitySi_GVs22_ContiguousArrayBufferwx7Element_, void (%Vs12_ArrayBuffer*, %Vs22_ContiguousArrayBuffer*, i64, i64)* @_TTSf4n_n_n_n_d___TTSg5GVs12_ArrayBufferV4Main8Employee_GS_S1__s20_ArrayBufferProtocols_GVs14_IgnorePointerS1__GS3_S1__s16_PointerFunctions___TFs22_arrayOutOfPlaceUpdateu0_Rxs20_ArrayBufferProtocol_s16_PointerFunctionwx5IndexzSiwx7Elementzw_7ElementrFTRxRGVs22_ContiguousArrayBufferwxS2__SiSiq__T_) #11
  ret void
}

; Function Attrs: noinline
define linkonce_odr hidden void @_TTSg5SS___TFSa16_copyToNewBufferfT8oldCountSi_T_(i64, %Sa* nocapture dereferenceable(8)) #11 {
  tail call void @_TTSg5V4Main8Employee___TFSa16_copyToNewBufferfT8oldCountSi_T__merged(i64 %0, %Sa* nocapture dereferenceable(8) %1, %swift.refcounted* (%Vs12_ArrayBuffer*, i64, i64)* @_TTSg5GVs12_ArrayBufferSS_GS_SS_s20_ArrayBufferProtocols___TFs31_forceCreateUniqueMutableBufferuRxs20_ArrayBufferProtocolrFTRx17countForNewBufferSi14minNewCapacitySi_GVs22_ContiguousArrayBufferwx7Element_, void (%Vs12_ArrayBuffer*, %Vs22_ContiguousArrayBuffer*, i64, i64)* @_TTSf4n_n_n_n_d___TTSg5GVs12_ArrayBufferSS_GS_SS_s20_ArrayBufferProtocols_GVs14_IgnorePointerSS_GS1_SS_s16_PointerFunctions___TFs22_arrayOutOfPlaceUpdateu0_Rxs20_ArrayBufferProtocol_s16_PointerFunctionwx5IndexzSiwx7Elementzw_7ElementrFTRxRGVs22_ContiguousArrayBufferwxS2__SiSiq__T_) #11
  ret void
}

; Function Attrs: noinline
define internal void @_TTSg5V4Main8Employee___TFSa16_copyToNewBufferfT8oldCountSi_T__merged(i64, %Sa* nocapture dereferenceable(8), %swift.refcounted* (%Vs12_ArrayBuffer*, i64, i64)*, void (%Vs12_ArrayBuffer*, %Vs22_ContiguousArrayBuffer*, i64, i64)*) #11 {
entry:
  %4 = alloca %Vs22_ContiguousArrayBuffer, align 8
  %5 = bitcast %Vs22_ContiguousArrayBuffer* %4 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5)
  %6 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %0, i64 1)
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %11, label %8

; <label>:8                                       ; preds = %entry
  %9 = extractvalue { i64, i1 } %6, 0
  %._buffer = getelementptr inbounds %Sa, %Sa* %1, i64 0, i32 0
  %10 = tail call %swift.refcounted* %2(%Vs12_ArrayBuffer* nocapture dereferenceable(8) %._buffer, i64 %0, i64 %9)
  %.__bufferPointer._nativeBuffer = getelementptr inbounds %Vs22_ContiguousArrayBuffer, %Vs22_ContiguousArrayBuffer* %4, i64 0, i32 0, i32 0
  store %swift.refcounted* %10, %swift.refcounted** %.__bufferPointer._nativeBuffer, align 8
  call void %3(%Vs12_ArrayBuffer* nocapture dereferenceable(8) %._buffer, %Vs22_ContiguousArrayBuffer* nocapture nonnull dereferenceable(8) %4, i64 %0, i64 0)
  tail call void @rt_swift_release(%swift.refcounted* %10) #22
  call void @llvm.lifetime.end(i64 8, i8* %5)
  ret void

; <label>:11                                      ; preds = %entry
  tail call void asm sideeffect "", "n"(i32 0) #22
  tail call void @llvm.trap()
  unreachable
}

; Function Attrs: noinline
declare void @_TFSa16_copyToNewBufferfT8oldCountSi_T_(i64, %swift.type* nocapture readonly, %Sa* nocapture dereferenceable(8)) #9

define linkonce_odr hidden i64 @_TFVs12_ArrayBufferg5countSi(%swift.bridge*, %swift.type* %Element) #10 {
entry:
  %1 = tail call i1 @_swift_isClassOrObjCExistentialType(%swift.type* %Element, %swift.type* %Element)
  %2 = ptrtoint %swift.bridge* %0 to i64
  %3 = and i64 %2, -4611686018427387903
  %4 = icmp eq i64 %3, 0
  %not..i = xor i1 %1, true
  %5 = or i1 %4, %not..i
  br i1 %5, label %17, label %6, !prof !37

; <label>:6                                       ; preds = %entry
  %7 = and i64 %2, -9223372036854775807
  %8 = icmp eq i64 %7, 0
  %9 = bitcast %swift.bridge* %0 to %objc_object*
  %10 = and i64 %2, 72057594037927928
  %11 = inttoptr i64 %10 to %objc_object*
  %12 = select i1 %8, %objc_object* %11, %objc_object* %9
  %13 = load i8*, i8** @"\01L_selector(count)", align 8
  %14 = bitcast %objc_object* %12 to i8*
  %15 = tail call %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge* %0) #22
  %16 = tail call i64 bitcast (void ()* @objc_msgSend to i64 (i8*, i8*)*)(i8* %14, i8* %13)
  tail call void @swift_unknownRelease(%objc_object* %12) #22
  br label %35

; <label>:17                                      ; preds = %entry
  %18 = tail call i1 @_swift_isClassOrObjCExistentialType(%swift.type* %Element, %swift.type* %Element)
  %19 = bitcast %swift.bridge* %0 to %Cs27_ContiguousArrayStorageBase*
  %20 = and i64 %2, 72057594037927928
  %21 = inttoptr i64 %20 to %Cs27_ContiguousArrayStorageBase*
  %22 = select i1 %18, %Cs27_ContiguousArrayStorageBase* %21, %Cs27_ContiguousArrayStorageBase* %19
  %23 = bitcast %Cs27_ContiguousArrayStorageBase* %22 to %objc_object*
  %24 = bitcast %objc_object* %23 to %swift.refcounted*
  %25 = bitcast %objc_object* %23 to i8*
  %Header.valueWitnesses.i.i.i.i = load i8**, i8*** bitcast (%swift.type* getelementptr (%swift.type, %swift.type* @_TMVs10_ArrayBody, i64 2305843009213693951) to i8***), align 8, !invariant.load !29, !dereferenceable !40
  %26 = getelementptr inbounds i8*, i8** %Header.valueWitnesses.i.i.i.i, i64 18
  %27 = bitcast i8** %26 to i64*
  %28 = load i64, i64* %27, align 8, !invariant.load !29
  %flags.alignmentMask.i.i.i.i = and i64 %28, 65535
  %29 = add nuw nsw i64 %flags.alignmentMask.i.i.i.i, 16
  %.not.i.i.i.i = or i64 %28, -65536
  %30 = xor i64 %.not.i.i.i.i, 65535
  %31 = and i64 %29, %30
  %32 = getelementptr inbounds i8, i8* %25, i64 %31
  %._storage.count._value.i = bitcast i8* %32 to i64*
  %33 = load i64, i64* %._storage.count._value.i, align 8, !range !28
  %34 = tail call %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge* %0) #22
  tail call void @rt_swift_release(%swift.refcounted* %24) #22
  br label %35

; <label>:35                                      ; preds = %17, %6
  %36 = phi i64 [ %16, %6 ], [ %33, %17 ]
  ret i64 %36
}

define linkonce_odr hidden i64 @_TFVs12_ArrayBufferg8capacitySi(%swift.bridge*, %swift.type* %Element) #10 {
entry:
  %1 = tail call i1 @_swift_isClassOrObjCExistentialType(%swift.type* %Element, %swift.type* %Element)
  %2 = ptrtoint %swift.bridge* %0 to i64
  %3 = and i64 %2, -4611686018427387903
  %4 = icmp eq i64 %3, 0
  %not..i = xor i1 %1, true
  %5 = or i1 %4, %not..i
  br i1 %5, label %17, label %6, !prof !37

; <label>:6                                       ; preds = %entry
  %7 = and i64 %2, -9223372036854775807
  %8 = icmp eq i64 %7, 0
  %9 = bitcast %swift.bridge* %0 to %objc_object*
  %10 = and i64 %2, 72057594037927928
  %11 = inttoptr i64 %10 to %objc_object*
  %12 = select i1 %8, %objc_object* %11, %objc_object* %9
  %13 = load i8*, i8** @"\01L_selector(count)", align 8
  %14 = bitcast %objc_object* %12 to i8*
  %15 = tail call %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge* %0) #22
  %16 = tail call i64 bitcast (void ()* @objc_msgSend to i64 (i8*, i8*)*)(i8* %14, i8* %13)
  tail call void @swift_unknownRelease(%objc_object* %12) #22
  br label %36

; <label>:17                                      ; preds = %entry
  %18 = tail call i1 @_swift_isClassOrObjCExistentialType(%swift.type* %Element, %swift.type* %Element)
  %19 = bitcast %swift.bridge* %0 to %Cs27_ContiguousArrayStorageBase*
  %20 = and i64 %2, 72057594037927928
  %21 = inttoptr i64 %20 to %Cs27_ContiguousArrayStorageBase*
  %22 = select i1 %18, %Cs27_ContiguousArrayStorageBase* %21, %Cs27_ContiguousArrayStorageBase* %19
  %23 = bitcast %Cs27_ContiguousArrayStorageBase* %22 to %objc_object*
  %24 = bitcast %objc_object* %23 to %swift.refcounted*
  %25 = bitcast %objc_object* %23 to i8*
  %Header.valueWitnesses.i.i.i.i = load i8**, i8*** bitcast (%swift.type* getelementptr (%swift.type, %swift.type* @_TMVs10_ArrayBody, i64 2305843009213693951) to i8***), align 8, !invariant.load !29, !dereferenceable !40
  %26 = getelementptr inbounds i8*, i8** %Header.valueWitnesses.i.i.i.i, i64 18
  %27 = bitcast i8** %26 to i64*
  %28 = load i64, i64* %27, align 8, !invariant.load !29
  %flags.alignmentMask.i.i.i.i = and i64 %28, 65535
  %29 = add nuw nsw i64 %flags.alignmentMask.i.i.i.i, 16
  %.not.i.i.i.i = or i64 %28, -65536
  %30 = xor i64 %.not.i.i.i.i, 65535
  %31 = and i64 %29, %30
  %32 = getelementptr inbounds i8, i8* %25, i64 %31
  %._storage._capacityAndFlags.i = getelementptr inbounds i8, i8* %32, i64 8
  %._storage._capacityAndFlags._value.i = bitcast i8* %._storage._capacityAndFlags.i to i64*
  %33 = load i64, i64* %._storage._capacityAndFlags._value.i, align 8
  %34 = lshr i64 %33, 1
  %35 = tail call %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge* %0) #22
  tail call void @rt_swift_release(%swift.refcounted* %24) #22
  br label %36

; <label>:36                                      ; preds = %17, %6
  %37 = phi i64 [ %16, %6 ], [ %34, %17 ]
  ret i64 %37
}

; Function Attrs: noinline
define linkonce_odr hidden %swift.refcounted* @_TTSg5GVs12_ArrayBufferV4Main8Employee_GS_S1__s20_ArrayBufferProtocols___TFs31_forceCreateUniqueMutableBufferuRxs20_ArrayBufferProtocolrFTRx17countForNewBufferSi14minNewCapacitySi_GVs22_ContiguousArrayBufferwx7Element_(%Vs12_ArrayBuffer* nocapture readonly dereferenceable(8), i64, i64) #9 {
entry:
  %3 = bitcast %Vs12_ArrayBuffer* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %._storage1._capacityAndFlags = getelementptr inbounds i8, i8* %4, i64 24
  %._storage1._capacityAndFlags._value = bitcast i8* %._storage1._capacityAndFlags to i64*
  %5 = load i64, i64* %._storage1._capacityAndFlags._value, align 8
  %6 = lshr i64 %5, 1
  %7 = icmp slt i64 %6, %2
  br i1 %7, label %8, label %12

; <label>:8                                       ; preds = %entry
  %9 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %6, i64 2)
  %10 = extractvalue { i64, i1 } %9, 0
  %11 = extractvalue { i64, i1 } %9, 1
  br i1 %11, label %16, label %12

; <label>:12                                      ; preds = %entry, %8
  %13 = phi i64 [ %10, %8 ], [ %6, %entry ]
  %14 = icmp sge i64 %13, %2
  %. = select i1 %14, i64 %13, i64 %2
  %15 = tail call %swift.refcounted* @_TTSf4n_n_d___TTSg5V4Main8Employee___TFVs22_ContiguousArrayBufferCfT18uninitializedCountSi15minimumCapacitySi_GS_x_(i64 %1, i64 %.)
  ret %swift.refcounted* %15

; <label>:16                                      ; preds = %8
  tail call void asm sideeffect "", "n"(i32 2) #22
  tail call void @llvm.trap()
  unreachable
}

; Function Attrs: noinline
define linkonce_odr hidden %swift.refcounted* @_TTSg5GVs12_ArrayBufferSS_GS_SS_s20_ArrayBufferProtocols___TFs31_forceCreateUniqueMutableBufferuRxs20_ArrayBufferProtocolrFTRx17countForNewBufferSi14minNewCapacitySi_GVs22_ContiguousArrayBufferwx7Element_(%Vs12_ArrayBuffer* nocapture readonly dereferenceable(8), i64, i64) #9 {
entry:
  %3 = bitcast %Vs12_ArrayBuffer* %0 to i8**
  %4 = load i8*, i8** %3, align 8
  %._storage1._capacityAndFlags = getelementptr inbounds i8, i8* %4, i64 24
  %._storage1._capacityAndFlags._value = bitcast i8* %._storage1._capacityAndFlags to i64*
  %5 = load i64, i64* %._storage1._capacityAndFlags._value, align 8
  %6 = lshr i64 %5, 1
  %7 = icmp slt i64 %6, %2
  br i1 %7, label %8, label %12

; <label>:8                                       ; preds = %entry
  %9 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %6, i64 2)
  %10 = extractvalue { i64, i1 } %9, 0
  %11 = extractvalue { i64, i1 } %9, 1
  br i1 %11, label %16, label %12

; <label>:12                                      ; preds = %entry, %8
  %13 = phi i64 [ %10, %8 ], [ %6, %entry ]
  %14 = icmp sge i64 %13, %2
  %. = select i1 %14, i64 %13, i64 %2
  %15 = tail call %swift.refcounted* @_TTSf4n_n_d___TTSg5SS___TFVs22_ContiguousArrayBufferCfT18uninitializedCountSi15minimumCapacitySi_GS_x_(i64 %1, i64 %.)
  ret %swift.refcounted* %15

; <label>:16                                      ; preds = %8
  tail call void asm sideeffect "", "n"(i32 2) #22
  tail call void @llvm.trap()
  unreachable
}

; Function Attrs: noinline noreturn
declare void @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never(i64, i64, i8, i64) #12

define linkonce_odr hidden %swift.refcounted* @_TTSf4n_n_d___TTSg5SS___TFVs22_ContiguousArrayBufferCfT18uninitializedCountSi15minimumCapacitySi_GS_x_(i64, i64) #10 {
entry:
  %2 = icmp sge i64 %1, %0
  %. = select i1 %2, i64 %1, i64 %0
  %3 = icmp eq i64 %., 0
  br i1 %3, label %4, label %7

; <label>:4                                       ; preds = %entry
  tail call void @rt_swift_retain(%swift.refcounted* nonnull bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.refcounted*)) #22
  br label %5

; <label>:5                                       ; preds = %4, %25
  %6 = phi %swift.refcounted* [ %28, %25 ], [ bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.refcounted*), %4 ]
  ret %swift.refcounted* %6

; <label>:7                                       ; preds = %entry
  %8 = load %swift.type*, %swift.type** @_TMLGCs23_ContiguousArrayStorageSS_, align 8
  %9 = icmp eq %swift.type* %8, null
  br i1 %9, label %cacheIsNull.i, label %_TMaGCs23_ContiguousArrayStorageSS_.exit

cacheIsNull.i:                                    ; preds = %7
  %10 = tail call %swift.type* @_TMaCs23_ContiguousArrayStorage(%swift.type* nonnull @_TMSS) #17
  store atomic %swift.type* %10, %swift.type** @_TMLGCs23_ContiguousArrayStorageSS_ release, align 8
  br label %_TMaGCs23_ContiguousArrayStorageSS_.exit

_TMaGCs23_ContiguousArrayStorageSS_.exit:         ; preds = %7, %cacheIsNull.i
  %11 = phi %swift.type* [ %8, %7 ], [ %10, %cacheIsNull.i ]
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %., i64 24)
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %30, label %14

; <label>:14                                      ; preds = %_TMaGCs23_ContiguousArrayStorageSS_.exit
  %15 = extractvalue { i64, i1 } %12, 0
  %16 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %15, i64 32)
  %17 = extractvalue { i64, i1 } %16, 1
  br i1 %17, label %31, label %18

; <label>:18                                      ; preds = %14
  %19 = extractvalue { i64, i1 } %16, 0
  %20 = tail call %objc_object* @swift_bufferAllocate(%swift.type* %11, i64 %19, i64 7)
  %21 = bitcast %objc_object* %20 to i8*
  %22 = tail call i64 @_swift_stdlib_malloc_size(i8* %21)
  %23 = add i64 %22, -32
  %24 = icmp slt i64 %23, -23
  br i1 %24, label %32, label %25

; <label>:25                                      ; preds = %18
  %26 = sdiv i64 %23, 24
  %27 = getelementptr inbounds i8, i8* %21, i64 16
  %28 = bitcast %objc_object* %20 to %swift.refcounted*
  %29 = shl nsw i64 %26, 1
  %._storage.count._value = bitcast i8* %27 to i64*
  store i64 %0, i64* %._storage.count._value, align 8
  %._storage._capacityAndFlags = getelementptr inbounds i8, i8* %21, i64 24
  %._storage._capacityAndFlags._value = bitcast i8* %._storage._capacityAndFlags to i64*
  store i64 %29, i64* %._storage._capacityAndFlags._value, align 8
  br label %5

; <label>:30                                      ; preds = %_TMaGCs23_ContiguousArrayStorageSS_.exit
  tail call void asm sideeffect "", "n"(i32 5) #22
  tail call void @llvm.trap()
  unreachable

; <label>:31                                      ; preds = %14
  tail call void asm sideeffect "", "n"(i32 6) #22
  tail call void @llvm.trap()
  unreachable

; <label>:32                                      ; preds = %18
  tail call void asm sideeffect "", "n"(i32 8) #22
  tail call void @llvm.trap()
  unreachable
}

; Function Attrs: noinline nounwind
define linkonce_odr hidden void @_TTSf4n_n_n_n_d___TTSg5GVs12_ArrayBufferSS_GS_SS_s20_ArrayBufferProtocols_GVs14_IgnorePointerSS_GS1_SS_s16_PointerFunctions___TFs22_arrayOutOfPlaceUpdateu0_Rxs20_ArrayBufferProtocol_s16_PointerFunctionwx5IndexzSiwx7Elementzw_7ElementrFTRxRGVs22_ContiguousArrayBufferwxS2__SiSiq__T_(%Vs12_ArrayBuffer* nocapture dereferenceable(8), %Vs22_ContiguousArrayBuffer* nocapture readonly dereferenceable(8), i64, i64) #13 {
entry:
  %.__bufferPointer._nativeBuffer = getelementptr inbounds %Vs22_ContiguousArrayBuffer, %Vs22_ContiguousArrayBuffer* %1, i64 0, i32 0, i32 0
  %4 = bitcast %Vs22_ContiguousArrayBuffer* %1 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 16
  %._storage.count._value = bitcast i8* %6 to i64*
  %7 = load i64, i64* %._storage.count._value, align 8, !range !28
  %8 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %7, i64 %2)
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %134, label %10

; <label>:10                                      ; preds = %entry
  %11 = extractvalue { i64, i1 } %8, 0
  %12 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %11, i64 %3)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %135, label %15

; <label>:15                                      ; preds = %10
  %._storage1.rawValue = getelementptr inbounds %Vs12_ArrayBuffer, %Vs12_ArrayBuffer* %0, i64 0, i32 0, i32 0
  %16 = load %swift.bridge*, %swift.bridge** %._storage1.rawValue, align 8
  %17 = bitcast %swift.bridge* %16 to i8*
  %18 = getelementptr inbounds i8, i8* %17, i64 16
  %._storage2.count._value = bitcast i8* %18 to i64*
  %19 = load i64, i64* %._storage2.count._value, align 8, !range !28
  %20 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %19, i64 %2)
  %21 = extractvalue { i64, i1 } %20, 1
  %22 = bitcast %swift.bridge* %16 to %swift.refcounted*
  br i1 %21, label %136, label %23

; <label>:23                                      ; preds = %15
  %24 = extractvalue { i64, i1 } %20, 0
  %25 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %24, i64 %13)
  %26 = extractvalue { i64, i1 } %25, 0
  %27 = extractvalue { i64, i1 } %25, 1
  br i1 %27, label %137, label %28

; <label>:28                                      ; preds = %23
  %29 = getelementptr inbounds i8, i8* %5, i64 32
  %30 = bitcast %Vs12_ArrayBuffer* %0 to %swift.refcounted**
  %31 = tail call i1 @rt_swift_isUniquelyReferenced_nonNull_native(%swift.refcounted* %22) #22
  br i1 %31, label %32, label %74, !prof !37

; <label>:32                                      ; preds = %28
  %._storage2._capacityAndFlags = getelementptr inbounds i8, i8* %17, i64 24
  %._storage2._capacityAndFlags._value = bitcast i8* %._storage2._capacityAndFlags to i64*
  %33 = load i64, i64* %._storage2._capacityAndFlags._value, align 8
  %34 = lshr i64 %33, 1
  %35 = icmp ult i64 %34, %19
  br i1 %35, label %74, label %iter11, !prof !36

iter11:                                           ; preds = %32
  %36 = mul i64 %2, 24
  %37 = getelementptr inbounds i8, i8* %17, i64 32
  %38 = bitcast i8* %37 to %SS*
  %39 = bitcast i8* %29 to %SS*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %29, i8* %37, i64 %36, i32 8, i1 false)
  %40 = icmp eq i64 %26, 0
  %41 = tail call %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge* nonnull %16) #22
  br i1 %40, label %exit18, label %loop16.preheader

loop16.preheader:                                 ; preds = %iter11
  %42 = getelementptr inbounds i8, i8* %37, i64 %36
  %43 = bitcast i8* %42 to %SS*
  br label %loop16

loop16:                                           ; preds = %loop16.preheader, %loop16
  %44 = phi %SS* [ %49, %loop16 ], [ %43, %loop16.preheader ]
  %45 = phi i64 [ %48, %loop16 ], [ %26, %loop16.preheader ]
  %._core17._owner = getelementptr inbounds %SS, %SS* %44, i64 0, i32 0, i32 2
  %46 = bitcast %GSqPs9AnyObject__* %._core17._owner to %objc_object**
  %47 = load %objc_object*, %objc_object** %46, align 8
  tail call void @swift_unknownRelease(%objc_object* %47) #22
  %48 = add i64 %45, -1
  %49 = getelementptr inbounds %SS, %SS* %44, i64 1
  %50 = icmp eq i64 %48, 0
  br i1 %50, label %exit18.loopexit, label %loop16

exit18.loopexit:                                  ; preds = %loop16
  br label %exit18

exit18:                                           ; preds = %exit18.loopexit, %iter11
  %.pre = mul i64 %13, 24
  %51 = getelementptr inbounds %SS, %SS* %39, i64 %2
  %52 = getelementptr inbounds %SS, %SS* %51, i64 %3
  %53 = getelementptr inbounds %SS, %SS* %38, i64 %2
  %54 = getelementptr inbounds %SS, %SS* %53, i64 %26
  %55 = getelementptr inbounds %SS, %SS* %52, i64 0, i32 0, i32 0, i32 0, i64 0
  %56 = getelementptr inbounds %SS, %SS* %54, i64 0, i32 0, i32 0, i32 0, i64 0
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %55, i8* %56, i64 %.pre, i32 8, i1 false)
  %57 = load i64, i64* %._storage2.count._value, align 8, !range !28
  %58 = mul i64 %57, 24
  %59 = mul i64 %19, 24
  %60 = sub i64 %58, %59
  %.off = add i64 %60, 23
  %61 = icmp ult i64 %.off, 47
  br i1 %61, label %exit22, label %loop20.preheader

loop20.preheader:                                 ; preds = %exit18
  %62 = getelementptr inbounds i8, i8* %37, i64 %59
  %63 = bitcast i8* %62 to %SS*
  %64 = sdiv i64 %60, 24
  br label %loop20

loop20:                                           ; preds = %loop20.preheader, %loop20
  %65 = phi %SS* [ %70, %loop20 ], [ %63, %loop20.preheader ]
  %66 = phi i64 [ %69, %loop20 ], [ %64, %loop20.preheader ]
  %._core21._owner = getelementptr inbounds %SS, %SS* %65, i64 0, i32 0, i32 2
  %67 = bitcast %GSqPs9AnyObject__* %._core21._owner to %objc_object**
  %68 = load %objc_object*, %objc_object** %67, align 8
  tail call void @swift_unknownRelease(%objc_object* %68) #22
  %69 = add i64 %66, -1
  %70 = getelementptr inbounds %SS, %SS* %65, i64 1
  %71 = icmp eq i64 %69, 0
  br i1 %71, label %exit22.loopexit, label %loop20

exit22.loopexit:                                  ; preds = %loop20
  br label %exit22

exit22:                                           ; preds = %exit22.loopexit, %exit18
  store i64 0, i64* %._storage2.count._value, align 8
  tail call void @swift_bridgeObjectRelease(%swift.bridge* %16) #22
  br label %exit9

exit9.loopexit:                                   ; preds = %loop6
  br label %exit9

exit9:                                            ; preds = %exit9.loopexit, %109, %exit22
  %72 = load %swift.refcounted*, %swift.refcounted** %.__bufferPointer._nativeBuffer, align 8
  %73 = load %swift.bridge*, %swift.bridge** %._storage1.rawValue, align 8
  tail call void @rt_swift_retain(%swift.refcounted* %72) #22
  tail call void @swift_bridgeObjectRelease(%swift.bridge* %73) #22
  store %swift.refcounted* %72, %swift.refcounted** %30, align 8
  ret void

; <label>:74                                      ; preds = %32, %28
  %75 = icmp slt i64 %2, 0
  %76 = bitcast i8* %29 to %SS*
  %77 = icmp eq i64 %2, 0
  br i1 %77, label %exit, label %loop.preheader

loop.preheader:                                   ; preds = %74
  %78 = getelementptr inbounds i8, i8* %17, i64 32
  %79 = bitcast i8* %78 to %SS*
  br label %loop

loop:                                             ; preds = %loop.preheader, %loop
  %80 = phi %SS* [ %94, %loop ], [ %79, %loop.preheader ]
  %81 = phi %SS* [ %93, %loop ], [ %76, %loop.preheader ]
  %82 = phi i64 [ %92, %loop ], [ %2, %loop.preheader ]
  %83 = bitcast %SS* %80 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = bitcast %SS* %81 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %SS, %SS* %80, i64 0, i32 0, i32 1, i32 0
  %87 = getelementptr inbounds %SS, %SS* %81, i64 0, i32 0, i32 1, i32 0
  %88 = load i64, i64* %86, align 8
  store i64 %88, i64* %87, align 8
  %._core._owner = getelementptr inbounds %SS, %SS* %81, i64 0, i32 0, i32 2
  %._core3._owner = getelementptr inbounds %SS, %SS* %80, i64 0, i32 0, i32 2
  %89 = bitcast %GSqPs9AnyObject__* %._core._owner to %objc_object**
  %90 = bitcast %GSqPs9AnyObject__* %._core3._owner to %objc_object**
  %91 = load %objc_object*, %objc_object** %90, align 8
  store %objc_object* %91, %objc_object** %89, align 8
  %92 = add i64 %82, -1
  %93 = getelementptr inbounds %SS, %SS* %81, i64 1
  %94 = getelementptr inbounds %SS, %SS* %80, i64 1
  %95 = icmp eq i64 %92, 0
  tail call void @swift_unknownRetain(%objc_object* %91) #22
  br i1 %95, label %exit.loopexit, label %loop

exit.loopexit:                                    ; preds = %loop
  br label %exit

exit:                                             ; preds = %exit.loopexit, %74
  %96 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %2, i64 %26)
  %97 = extractvalue { i64, i1 } %96, 0
  %98 = extractvalue { i64, i1 } %96, 1
  br i1 %98, label %138, label %99

; <label>:99                                      ; preds = %exit
  %100 = bitcast %Vs12_ArrayBuffer* %0 to i8**
  %101 = load i8*, i8** %100, align 8
  %102 = getelementptr inbounds i8, i8* %101, i64 16
  %._storage4.count._value = bitcast i8* %102 to i64*
  %103 = load i64, i64* %._storage4.count._value, align 8, !range !28
  %104 = icmp sgt i64 %97, %103
  %105 = or i1 %75, %104
  br i1 %105, label %139, label %106

; <label>:106                                     ; preds = %99
  %107 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %103, i64 %97)
  %108 = extractvalue { i64, i1 } %107, 1
  br i1 %108, label %140, label %109

; <label>:109                                     ; preds = %106
  %110 = extractvalue { i64, i1 } %107, 0
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %exit9, label %loop6.preheader

loop6.preheader:                                  ; preds = %109
  %112 = getelementptr inbounds i8, i8* %101, i64 32
  %113 = bitcast i8* %112 to %SS*
  %114 = getelementptr inbounds %SS, %SS* %113, i64 %97, i32 0, i32 0, i32 0, i64 0
  %115 = bitcast i8* %114 to %SS*
  %116 = getelementptr inbounds %SS, %SS* %76, i64 %2
  %117 = getelementptr inbounds %SS, %SS* %116, i64 %3
  br label %loop6

loop6:                                            ; preds = %loop6.preheader, %loop6
  %118 = phi %SS* [ %132, %loop6 ], [ %115, %loop6.preheader ]
  %119 = phi %SS* [ %131, %loop6 ], [ %117, %loop6.preheader ]
  %120 = phi i64 [ %130, %loop6 ], [ %110, %loop6.preheader ]
  %121 = bitcast %SS* %118 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = bitcast %SS* %119 to i64*
  store i64 %122, i64* %123, align 8
  %124 = getelementptr inbounds %SS, %SS* %118, i64 0, i32 0, i32 1, i32 0
  %125 = getelementptr inbounds %SS, %SS* %119, i64 0, i32 0, i32 1, i32 0
  %126 = load i64, i64* %124, align 8
  store i64 %126, i64* %125, align 8
  %._core7._owner = getelementptr inbounds %SS, %SS* %119, i64 0, i32 0, i32 2
  %._core8._owner = getelementptr inbounds %SS, %SS* %118, i64 0, i32 0, i32 2
  %127 = bitcast %GSqPs9AnyObject__* %._core7._owner to %objc_object**
  %128 = bitcast %GSqPs9AnyObject__* %._core8._owner to %objc_object**
  %129 = load %objc_object*, %objc_object** %128, align 8
  store %objc_object* %129, %objc_object** %127, align 8
  %130 = add i64 %120, -1
  %131 = getelementptr inbounds %SS, %SS* %119, i64 1
  %132 = getelementptr inbounds %SS, %SS* %118, i64 1
  %133 = icmp eq i64 %130, 0
  tail call void @swift_unknownRetain(%objc_object* %129) #22
  br i1 %133, label %exit9.loopexit, label %loop6

; <label>:134                                     ; preds = %entry
  tail call void asm sideeffect "", "n"(i32 2) #22
  tail call void @llvm.trap()
  unreachable

; <label>:135                                     ; preds = %10
  tail call void asm sideeffect "", "n"(i32 3) #22
  tail call void @llvm.trap()
  unreachable

; <label>:136                                     ; preds = %15
  tail call void asm sideeffect "", "n"(i32 4) #22
  tail call void @llvm.trap()
  unreachable

; <label>:137                                     ; preds = %23
  tail call void asm sideeffect "", "n"(i32 5) #22
  tail call void @llvm.trap()
  unreachable

; <label>:138                                     ; preds = %exit
  tail call void asm sideeffect "", "n"(i32 9) #22
  tail call void @llvm.trap()
  unreachable

; <label>:139                                     ; preds = %99
  tail call void asm sideeffect "", "n"(i32 10) #22
  tail call void @llvm.trap()
  unreachable

; <label>:140                                     ; preds = %106
  tail call void asm sideeffect "", "n"(i32 11) #22
  tail call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden %swift.refcounted* @_TTSf4n_n_d___TTSg5V4Main8Employee___TFVs22_ContiguousArrayBufferCfT18uninitializedCountSi15minimumCapacitySi_GS_x_(i64, i64) #10 {
entry:
  %2 = icmp sge i64 %1, %0
  %. = select i1 %2, i64 %1, i64 %0
  %3 = icmp eq i64 %., 0
  br i1 %3, label %4, label %7

; <label>:4                                       ; preds = %entry
  tail call void @rt_swift_retain(%swift.refcounted* nonnull bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.refcounted*)) #22
  br label %5

; <label>:5                                       ; preds = %4, %25
  %6 = phi %swift.refcounted* [ %28, %25 ], [ bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.refcounted*), %4 ]
  ret %swift.refcounted* %6

; <label>:7                                       ; preds = %entry
  %8 = load %swift.type*, %swift.type** @_TMLGCs23_ContiguousArrayStorageV4Main8Employee_, align 8
  %9 = icmp eq %swift.type* %8, null
  br i1 %9, label %cacheIsNull.i, label %_TMaGCs23_ContiguousArrayStorageV4Main8Employee_.exit

cacheIsNull.i:                                    ; preds = %7
  %10 = tail call %swift.type* @_TMaCs23_ContiguousArrayStorage(%swift.type* nonnull bitcast (i64* getelementptr inbounds (<{ i8**, i64, i64, %swift.type*, i64, i64 }>, <{ i8**, i64, i64, %swift.type*, i64, i64 }>* @_TMfV4Main8Employee, i64 0, i32 1) to %swift.type*)) #17
  store atomic %swift.type* %10, %swift.type** @_TMLGCs23_ContiguousArrayStorageV4Main8Employee_ release, align 8
  br label %_TMaGCs23_ContiguousArrayStorageV4Main8Employee_.exit

_TMaGCs23_ContiguousArrayStorageV4Main8Employee_.exit: ; preds = %7, %cacheIsNull.i
  %11 = phi %swift.type* [ %8, %7 ], [ %10, %cacheIsNull.i ]
  %12 = tail call { i64, i1 } @llvm.smul.with.overflow.i64(i64 %., i64 32)
  %13 = extractvalue { i64, i1 } %12, 1
  br i1 %13, label %30, label %14

; <label>:14                                      ; preds = %_TMaGCs23_ContiguousArrayStorageV4Main8Employee_.exit
  %15 = extractvalue { i64, i1 } %12, 0
  %16 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %15, i64 32)
  %17 = extractvalue { i64, i1 } %16, 1
  br i1 %17, label %31, label %18

; <label>:18                                      ; preds = %14
  %19 = extractvalue { i64, i1 } %16, 0
  %20 = tail call %objc_object* @swift_bufferAllocate(%swift.type* %11, i64 %19, i64 7)
  %21 = bitcast %objc_object* %20 to i8*
  %22 = tail call i64 @_swift_stdlib_malloc_size(i8* %21)
  %23 = add i64 %22, -32
  %24 = icmp slt i64 %23, -31
  br i1 %24, label %32, label %25

; <label>:25                                      ; preds = %18
  %26 = sdiv i64 %23, 32
  %27 = getelementptr inbounds i8, i8* %21, i64 16
  %28 = bitcast %objc_object* %20 to %swift.refcounted*
  %29 = shl nsw i64 %26, 1
  %._storage.count._value = bitcast i8* %27 to i64*
  store i64 %0, i64* %._storage.count._value, align 8
  %._storage._capacityAndFlags = getelementptr inbounds i8, i8* %21, i64 24
  %._storage._capacityAndFlags._value = bitcast i8* %._storage._capacityAndFlags to i64*
  store i64 %29, i64* %._storage._capacityAndFlags._value, align 8
  br label %5

; <label>:30                                      ; preds = %_TMaGCs23_ContiguousArrayStorageV4Main8Employee_.exit
  tail call void asm sideeffect "", "n"(i32 5) #22
  tail call void @llvm.trap()
  unreachable

; <label>:31                                      ; preds = %14
  tail call void asm sideeffect "", "n"(i32 6) #22
  tail call void @llvm.trap()
  unreachable

; <label>:32                                      ; preds = %18
  tail call void asm sideeffect "", "n"(i32 8) #22
  tail call void @llvm.trap()
  unreachable
}

; Function Attrs: noinline nounwind
define linkonce_odr hidden void @_TTSf4n_n_n_n_d___TTSg5GVs12_ArrayBufferV4Main8Employee_GS_S1__s20_ArrayBufferProtocols_GVs14_IgnorePointerS1__GS3_S1__s16_PointerFunctions___TFs22_arrayOutOfPlaceUpdateu0_Rxs20_ArrayBufferProtocol_s16_PointerFunctionwx5IndexzSiwx7Elementzw_7ElementrFTRxRGVs22_ContiguousArrayBufferwxS2__SiSiq__T_(%Vs12_ArrayBuffer* nocapture dereferenceable(8), %Vs22_ContiguousArrayBuffer* nocapture readonly dereferenceable(8), i64, i64) #13 {
entry:
  %.__bufferPointer._nativeBuffer = getelementptr inbounds %Vs22_ContiguousArrayBuffer, %Vs22_ContiguousArrayBuffer* %1, i64 0, i32 0, i32 0
  %4 = bitcast %Vs22_ContiguousArrayBuffer* %1 to i8**
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 16
  %._storage.count._value = bitcast i8* %6 to i64*
  %7 = load i64, i64* %._storage.count._value, align 8, !range !28
  %8 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %7, i64 %2)
  %9 = extractvalue { i64, i1 } %8, 1
  br i1 %9, label %140, label %10

; <label>:10                                      ; preds = %entry
  %11 = extractvalue { i64, i1 } %8, 0
  %12 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %11, i64 %3)
  %13 = extractvalue { i64, i1 } %12, 0
  %14 = extractvalue { i64, i1 } %12, 1
  br i1 %14, label %141, label %15

; <label>:15                                      ; preds = %10
  %._storage1.rawValue = getelementptr inbounds %Vs12_ArrayBuffer, %Vs12_ArrayBuffer* %0, i64 0, i32 0, i32 0
  %16 = load %swift.bridge*, %swift.bridge** %._storage1.rawValue, align 8
  %17 = bitcast %swift.bridge* %16 to i8*
  %18 = getelementptr inbounds i8, i8* %17, i64 16
  %._storage2.count._value = bitcast i8* %18 to i64*
  %19 = load i64, i64* %._storage2.count._value, align 8, !range !28
  %20 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %19, i64 %2)
  %21 = extractvalue { i64, i1 } %20, 1
  %22 = bitcast %swift.bridge* %16 to %swift.refcounted*
  br i1 %21, label %142, label %23

; <label>:23                                      ; preds = %15
  %24 = extractvalue { i64, i1 } %20, 0
  %25 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %24, i64 %13)
  %26 = extractvalue { i64, i1 } %25, 0
  %27 = extractvalue { i64, i1 } %25, 1
  br i1 %27, label %143, label %28

; <label>:28                                      ; preds = %23
  %29 = getelementptr inbounds i8, i8* %5, i64 32
  %30 = bitcast %Vs12_ArrayBuffer* %0 to %swift.refcounted**
  %31 = tail call i1 @rt_swift_isUniquelyReferenced_nonNull_native(%swift.refcounted* %22) #22
  br i1 %31, label %32, label %74, !prof !37

; <label>:32                                      ; preds = %28
  %._storage2._capacityAndFlags = getelementptr inbounds i8, i8* %17, i64 24
  %._storage2._capacityAndFlags._value = bitcast i8* %._storage2._capacityAndFlags to i64*
  %33 = load i64, i64* %._storage2._capacityAndFlags._value, align 8
  %34 = lshr i64 %33, 1
  %35 = icmp ult i64 %34, %19
  br i1 %35, label %74, label %iter14, !prof !36

iter14:                                           ; preds = %32
  %36 = shl i64 %2, 5
  %37 = getelementptr inbounds i8, i8* %17, i64 32
  %38 = bitcast i8* %37 to %V4Main8Employee*
  %39 = bitcast i8* %29 to %V4Main8Employee*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %29, i8* %37, i64 %36, i32 8, i1 false)
  %40 = icmp eq i64 %26, 0
  %41 = tail call %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge* nonnull %16) #22
  br i1 %40, label %exit21, label %loop19.preheader

loop19.preheader:                                 ; preds = %iter14
  %42 = getelementptr inbounds i8, i8* %37, i64 %36
  %43 = bitcast i8* %42 to %V4Main8Employee*
  br label %loop19

loop19:                                           ; preds = %loop19.preheader, %loop19
  %44 = phi %V4Main8Employee* [ %49, %loop19 ], [ %43, %loop19.preheader ]
  %45 = phi i64 [ %48, %loop19 ], [ %26, %loop19.preheader ]
  %.name20._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %44, i64 0, i32 0, i32 0, i32 2
  %46 = bitcast %GSqPs9AnyObject__* %.name20._core._owner to %objc_object**
  %47 = load %objc_object*, %objc_object** %46, align 8
  tail call void @swift_unknownRelease(%objc_object* %47) #22
  %48 = add i64 %45, -1
  %49 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %44, i64 1
  %50 = icmp eq i64 %48, 0
  br i1 %50, label %exit21.loopexit, label %loop19

exit21.loopexit:                                  ; preds = %loop19
  br label %exit21

exit21:                                           ; preds = %exit21.loopexit, %iter14
  %.pre = shl i64 %13, 5
  %51 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %39, i64 %2
  %52 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %51, i64 %3
  %53 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %38, i64 %2
  %54 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %53, i64 %26
  %55 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %52, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  %56 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %54, i64 0, i32 0, i32 0, i32 0, i32 0, i64 0
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %55, i8* %56, i64 %.pre, i32 8, i1 false)
  %57 = load i64, i64* %._storage2.count._value, align 8, !range !28
  %58 = shl i64 %57, 5
  %59 = shl i64 %19, 5
  %60 = sub i64 %58, %59
  %.off = or i64 %60, 31
  %61 = icmp ult i64 %.off, 63
  br i1 %61, label %exit25, label %loop23.preheader

loop23.preheader:                                 ; preds = %exit21
  %62 = getelementptr inbounds i8, i8* %37, i64 %59
  %63 = bitcast i8* %62 to %V4Main8Employee*
  %64 = sdiv i64 %60, 32
  br label %loop23

loop23:                                           ; preds = %loop23.preheader, %loop23
  %65 = phi %V4Main8Employee* [ %70, %loop23 ], [ %63, %loop23.preheader ]
  %66 = phi i64 [ %69, %loop23 ], [ %64, %loop23.preheader ]
  %.name24._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %65, i64 0, i32 0, i32 0, i32 2
  %67 = bitcast %GSqPs9AnyObject__* %.name24._core._owner to %objc_object**
  %68 = load %objc_object*, %objc_object** %67, align 8
  tail call void @swift_unknownRelease(%objc_object* %68) #22
  %69 = add i64 %66, -1
  %70 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %65, i64 1
  %71 = icmp eq i64 %69, 0
  br i1 %71, label %exit25.loopexit, label %loop23

exit25.loopexit:                                  ; preds = %loop23
  br label %exit25

exit25:                                           ; preds = %exit25.loopexit, %exit21
  store i64 0, i64* %._storage2.count._value, align 8
  tail call void @swift_bridgeObjectRelease(%swift.bridge* %16) #22
  br label %exit12

exit12.loopexit:                                  ; preds = %loop7
  br label %exit12

exit12:                                           ; preds = %exit12.loopexit, %112, %exit25
  %72 = load %swift.refcounted*, %swift.refcounted** %.__bufferPointer._nativeBuffer, align 8
  %73 = load %swift.bridge*, %swift.bridge** %._storage1.rawValue, align 8
  tail call void @rt_swift_retain(%swift.refcounted* %72) #22
  tail call void @swift_bridgeObjectRelease(%swift.bridge* %73) #22
  store %swift.refcounted* %72, %swift.refcounted** %30, align 8
  ret void

; <label>:74                                      ; preds = %32, %28
  %75 = icmp slt i64 %2, 0
  %76 = bitcast i8* %29 to %V4Main8Employee*
  %77 = icmp eq i64 %2, 0
  br i1 %77, label %exit, label %loop.preheader

loop.preheader:                                   ; preds = %74
  %78 = getelementptr inbounds i8, i8* %17, i64 32
  %79 = bitcast i8* %78 to %V4Main8Employee*
  br label %loop

loop:                                             ; preds = %loop.preheader, %loop
  %80 = phi %V4Main8Employee* [ %97, %loop ], [ %79, %loop.preheader ]
  %81 = phi %V4Main8Employee* [ %96, %loop ], [ %76, %loop.preheader ]
  %82 = phi i64 [ %95, %loop ], [ %2, %loop.preheader ]
  %83 = bitcast %V4Main8Employee* %80 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = bitcast %V4Main8Employee* %81 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %80, i64 0, i32 0, i32 0, i32 1, i32 0
  %87 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %81, i64 0, i32 0, i32 0, i32 1, i32 0
  %88 = load i64, i64* %86, align 8
  store i64 %88, i64* %87, align 8
  %.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %81, i64 0, i32 0, i32 0, i32 2
  %.name3._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %80, i64 0, i32 0, i32 0, i32 2
  %89 = bitcast %GSqPs9AnyObject__* %.name._core._owner to %objc_object**
  %90 = bitcast %GSqPs9AnyObject__* %.name3._core._owner to %objc_object**
  %91 = load %objc_object*, %objc_object** %90, align 8
  store %objc_object* %91, %objc_object** %89, align 8
  %92 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %80, i64 0, i32 1, i32 0
  %93 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %81, i64 0, i32 1, i32 0
  %94 = load i64, i64* %92, align 8
  store i64 %94, i64* %93, align 8
  %95 = add i64 %82, -1
  %96 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %81, i64 1
  %97 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %80, i64 1
  %98 = icmp eq i64 %95, 0
  tail call void @swift_unknownRetain(%objc_object* %91) #22
  br i1 %98, label %exit.loopexit, label %loop

exit.loopexit:                                    ; preds = %loop
  br label %exit

exit:                                             ; preds = %exit.loopexit, %74
  %99 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %2, i64 %26)
  %100 = extractvalue { i64, i1 } %99, 0
  %101 = extractvalue { i64, i1 } %99, 1
  br i1 %101, label %144, label %102

; <label>:102                                     ; preds = %exit
  %103 = bitcast %Vs12_ArrayBuffer* %0 to i8**
  %104 = load i8*, i8** %103, align 8
  %105 = getelementptr inbounds i8, i8* %104, i64 16
  %._storage5.count._value = bitcast i8* %105 to i64*
  %106 = load i64, i64* %._storage5.count._value, align 8, !range !28
  %107 = icmp sgt i64 %100, %106
  %108 = or i1 %75, %107
  br i1 %108, label %145, label %109

; <label>:109                                     ; preds = %102
  %110 = tail call { i64, i1 } @llvm.ssub.with.overflow.i64(i64 %106, i64 %100)
  %111 = extractvalue { i64, i1 } %110, 1
  br i1 %111, label %146, label %112

; <label>:112                                     ; preds = %109
  %113 = extractvalue { i64, i1 } %110, 0
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %exit12, label %loop7.preheader

loop7.preheader:                                  ; preds = %112
  %115 = getelementptr inbounds i8, i8* %104, i64 32
  %116 = bitcast i8* %115 to %V4Main8Employee*
  %117 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %116, i64 %100, i32 0, i32 0, i32 0, i32 0, i64 0
  %118 = bitcast i8* %117 to %V4Main8Employee*
  %119 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %76, i64 %2
  %120 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %119, i64 %3
  br label %loop7

loop7:                                            ; preds = %loop7.preheader, %loop7
  %121 = phi %V4Main8Employee* [ %138, %loop7 ], [ %118, %loop7.preheader ]
  %122 = phi %V4Main8Employee* [ %137, %loop7 ], [ %120, %loop7.preheader ]
  %123 = phi i64 [ %136, %loop7 ], [ %113, %loop7.preheader ]
  %124 = bitcast %V4Main8Employee* %121 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = bitcast %V4Main8Employee* %122 to i64*
  store i64 %125, i64* %126, align 8
  %127 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %121, i64 0, i32 0, i32 0, i32 1, i32 0
  %128 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %122, i64 0, i32 0, i32 0, i32 1, i32 0
  %129 = load i64, i64* %127, align 8
  store i64 %129, i64* %128, align 8
  %.name8._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %122, i64 0, i32 0, i32 0, i32 2
  %.name9._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %121, i64 0, i32 0, i32 0, i32 2
  %130 = bitcast %GSqPs9AnyObject__* %.name8._core._owner to %objc_object**
  %131 = bitcast %GSqPs9AnyObject__* %.name9._core._owner to %objc_object**
  %132 = load %objc_object*, %objc_object** %131, align 8
  store %objc_object* %132, %objc_object** %130, align 8
  %133 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %121, i64 0, i32 1, i32 0
  %134 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %122, i64 0, i32 1, i32 0
  %135 = load i64, i64* %133, align 8
  store i64 %135, i64* %134, align 8
  %136 = add i64 %123, -1
  %137 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %122, i64 1
  %138 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %121, i64 1
  %139 = icmp eq i64 %136, 0
  tail call void @swift_unknownRetain(%objc_object* %132) #22
  br i1 %139, label %exit12.loopexit, label %loop7

; <label>:140                                     ; preds = %entry
  tail call void asm sideeffect "", "n"(i32 2) #22
  tail call void @llvm.trap()
  unreachable

; <label>:141                                     ; preds = %10
  tail call void asm sideeffect "", "n"(i32 3) #22
  tail call void @llvm.trap()
  unreachable

; <label>:142                                     ; preds = %15
  tail call void asm sideeffect "", "n"(i32 4) #22
  tail call void @llvm.trap()
  unreachable

; <label>:143                                     ; preds = %23
  tail call void asm sideeffect "", "n"(i32 5) #22
  tail call void @llvm.trap()
  unreachable

; <label>:144                                     ; preds = %exit
  tail call void asm sideeffect "", "n"(i32 9) #22
  tail call void @llvm.trap()
  unreachable

; <label>:145                                     ; preds = %102
  tail call void asm sideeffect "", "n"(i32 10) #22
  tail call void @llvm.trap()
  unreachable

; <label>:146                                     ; preds = %109
  tail call void asm sideeffect "", "n"(i32 11) #22
  tail call void @llvm.trap()
  unreachable
}

define linkonce_odr hidden %swift.bridge* @_TTSf4g_d___TTSg5V4Main8EmployeeS0_S_8LoadableS____TZFe4MainRxS_8Loadablexzwx6LoadedrSa4loadfT8iteratorGVs11AnyIteratorSS__GSax_(%GCs19_AnyIteratorBoxBaseSS_*) #0 {
entry:
  %1 = alloca %swift.refcounted*, align 8
  %tmpcast = bitcast %swift.refcounted** %1 to %Sa*
  %2 = alloca %GSqSS_, align 8
  %3 = alloca %GSqSS_, align 16
  %4 = alloca %GSqSS_, align 8
  %5 = bitcast %swift.refcounted** %1 to i8*
  call void @llvm.lifetime.start(i64 8, i8* %5)
  %6 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 25, i8* %6)
  %7 = load %swift.type*, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_, align 8
  %8 = icmp eq %swift.type* %7, null
  br i1 %8, label %cacheIsNull.i, label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

cacheIsNull.i:                                    ; preds = %entry
  %9 = tail call %swift.type* @_TMaCs19_AnyIteratorBoxBase(%swift.type* nonnull @_TMSS) #17
  store atomic %swift.type* %9, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_ release, align 8
  br label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

_TMaGCs19_AnyIteratorBoxBaseSS_.exit:             ; preds = %entry, %cacheIsNull.i
  %10 = phi %swift.type* [ %7, %entry ], [ %9, %cacheIsNull.i ]
  %11 = bitcast %swift.type* %10 to %objc_class*
  %12 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %swift.type**
  %13 = load %swift.type*, %swift.type** %12, align 8
  %14 = icmp eq %swift.type* %13, %10
  br i1 %14, label %88, label %89

; <label>:15                                      ; preds = %89
  %16 = inttoptr i64 %102 to %objc_object*
  tail call void @swift_unknownRetain(%objc_object* %16) #22
  %17 = tail call { i64, i1 } @_TFSiCfTSS5radixSi_GSqSi_(i64 %96, i64 %99, i64 %102, i64 10)
  %18 = extractvalue { i64, i1 } %17, 0
  %19 = extractvalue { i64, i1 } %17, 1
  br i1 %19, label %122, label %20

; <label>:20                                      ; preds = %15
  tail call void @swift_unknownRelease(%objc_object* %16) #22
  %._buffer._storage.rawValue = bitcast %swift.refcounted** %1 to %swift.bridge**
  store %swift.bridge* bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.bridge*), %swift.bridge** %._buffer._storage.rawValue, align 8
  %21 = icmp slt i64 %18, 0
  br i1 %21, label %117, label %22

; <label>:22                                      ; preds = %20
  %23 = icmp eq i64 %18, 0
  tail call void @rt_swift_retain(%swift.refcounted* nonnull bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.refcounted*)) #22
  br i1 %23, label %43, label %.preheader

.preheader:                                       ; preds = %22
  %24 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 0, i64 0
  %25 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %objc_class**
  %26 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %swift.refcounted*
  %27 = bitcast %GSqSS_* %3 to %Sq*
  %28 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 0, i64 16
  %29 = bitcast i8* %28 to i64*
  %30 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 1
  %31 = bitcast [1 x i8]* %30 to i1*
  %32 = getelementptr inbounds %GSqSS_, %GSqSS_* %4, i64 0, i32 0, i64 0
  %33 = bitcast %GSqSS_* %4 to %Sq*
  %34 = bitcast %GSqSS_* %4 to i64*
  %35 = getelementptr inbounds %GSqSS_, %GSqSS_* %4, i64 0, i32 0, i64 8
  %36 = bitcast i8* %35 to i64*
  %37 = getelementptr inbounds %GSqSS_, %GSqSS_* %4, i64 0, i32 0, i64 16
  %38 = bitcast i8* %37 to i64*
  %39 = getelementptr inbounds %GSqSS_, %GSqSS_* %4, i64 0, i32 1
  %40 = bitcast [1 x i8]* %39 to i1*
  %41 = bitcast %swift.refcounted** %1 to i8**
  %42 = bitcast %GSqSS_* %3 to <2 x i64>*
  br label %45

.loopexit:                                        ; preds = %78
  %.lcssa = phi i8* [ %79, %78 ]
  %.cast.le = bitcast i8* %.lcssa to %swift.bridge*
  br label %43

; <label>:43                                      ; preds = %.loopexit, %22
  %44 = phi %swift.bridge* [ bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.bridge*), %22 ], [ %.cast.le, %.loopexit ]
  call void @llvm.lifetime.end(i64 8, i8* nonnull %5)
  ret %swift.bridge* %44

; <label>:45                                      ; preds = %.preheader, %78
  %46 = phi i8* [ %79, %78 ], [ bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to i8*), %.preheader ]
  %47 = phi %swift.refcounted* [ %87, %78 ], [ bitcast (%struct._SwiftEmptyArrayStorage* @_swiftEmptyArrayStorage to %swift.refcounted*), %.preheader ]
  %48 = phi i64 [ %49, %78 ], [ 0, %.preheader ]
  %49 = add i64 %48, 1
  call void @llvm.lifetime.start(i64 25, i8* %24)
  %50 = load %objc_class*, %objc_class** %25, align 8
  %51 = icmp eq %objc_class* %50, %11
  tail call void @rt_swift_retain(%swift.refcounted* %26) #22
  br i1 %51, label %106, label %107

; <label>:52                                      ; preds = %107
  call void @llvm.lifetime.start(i64 25, i8* %32)
  %53 = load %objc_class*, %objc_class** %25, align 8
  %54 = icmp eq %objc_class* %53, %11
  tail call void @rt_swift_retain(%swift.refcounted* nonnull %26) #22
  br i1 %54, label %111, label %112

; <label>:55                                      ; preds = %112
  %56 = inttoptr i64 %115 to %objc_object*
  tail call void @swift_unknownRetain(%objc_object* %56) #22
  %57 = tail call { i64, i1 } @_TFSiCfTSS5radixSi_GSqSi_(i64 %113, i64 %114, i64 %115, i64 10)
  %58 = extractvalue { i64, i1 } %57, 0
  %59 = extractvalue { i64, i1 } %57, 1
  br i1 %59, label %119, label %60

; <label>:60                                      ; preds = %55
  %61 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %swift.refcounted*
  tail call void @rt_swift_release_n(%swift.refcounted* %61, i32 2)
  tail call void @swift_unknownRelease(%objc_object* %56) #22
  %62 = tail call i1 @rt_swift_isUniquelyReferenced_nonNull_native(%swift.refcounted* %47) #22
  br i1 %62, label %66, label %63, !prof !37

; <label>:63                                      ; preds = %60
  %64 = getelementptr inbounds i8, i8* %46, i64 16
  %._storage.count._value = bitcast i8* %64 to i64*
  %65 = load i64, i64* %._storage.count._value, align 8, !range !28
  call void @_TTSg5V4Main8Employee___TFSa16_copyToNewBufferfT8oldCountSi_T__merged(i64 %65, %Sa* nocapture nonnull dereferenceable(8) %tmpcast, %swift.refcounted* (%Vs12_ArrayBuffer*, i64, i64)* @_TTSg5GVs12_ArrayBufferV4Main8Employee_GS_S1__s20_ArrayBufferProtocols___TFs31_forceCreateUniqueMutableBufferuRxs20_ArrayBufferProtocolrFTRx17countForNewBufferSi14minNewCapacitySi_GVs22_ContiguousArrayBufferwx7Element_, void (%Vs12_ArrayBuffer*, %Vs22_ContiguousArrayBuffer*, i64, i64)* @_TTSf4n_n_n_n_d___TTSg5GVs12_ArrayBufferV4Main8Employee_GS_S1__s20_ArrayBufferProtocols_GVs14_IgnorePointerS1__GS3_S1__s16_PointerFunctions___TFs22_arrayOutOfPlaceUpdateu0_Rxs20_ArrayBufferProtocol_s16_PointerFunctionwx5IndexzSiwx7Elementzw_7ElementrFTRxRGVs22_ContiguousArrayBufferwxS2__SiSiq__T_)
  %.pre = load i8*, i8** %41, align 8
  br label %66

; <label>:66                                      ; preds = %60, %63
  %67 = phi i8* [ %46, %60 ], [ %.pre, %63 ]
  %68 = getelementptr inbounds i8, i8* %67, i64 16
  %._storage2.count._value = bitcast i8* %68 to i64*
  %69 = load i64, i64* %._storage2.count._value, align 8, !range !28
  %70 = tail call { i64, i1 } @llvm.sadd.with.overflow.i64(i64 %69, i64 1)
  %71 = extractvalue { i64, i1 } %70, 0
  %72 = extractvalue { i64, i1 } %70, 1
  br i1 %72, label %118, label %73

; <label>:73                                      ; preds = %66
  %._storage2._capacityAndFlags = getelementptr inbounds i8, i8* %67, i64 24
  %._storage2._capacityAndFlags._value = bitcast i8* %._storage2._capacityAndFlags to i64*
  %74 = load i64, i64* %._storage2._capacityAndFlags._value, align 8
  %75 = lshr i64 %74, 1
  %76 = icmp sgt i64 %71, %75
  br i1 %76, label %77, label %78, !prof !36

; <label>:77                                      ; preds = %73
  call void @_TTSg5V4Main8Employee___TFSa16_copyToNewBufferfT8oldCountSi_T__merged(i64 %69, %Sa* nocapture nonnull dereferenceable(8) %tmpcast, %swift.refcounted* (%Vs12_ArrayBuffer*, i64, i64)* @_TTSg5GVs12_ArrayBufferV4Main8Employee_GS_S1__s20_ArrayBufferProtocols___TFs31_forceCreateUniqueMutableBufferuRxs20_ArrayBufferProtocolrFTRx17countForNewBufferSi14minNewCapacitySi_GVs22_ContiguousArrayBufferwx7Element_, void (%Vs12_ArrayBuffer*, %Vs22_ContiguousArrayBuffer*, i64, i64)* @_TTSf4n_n_n_n_d___TTSg5GVs12_ArrayBufferV4Main8Employee_GS_S1__s20_ArrayBufferProtocols_GVs14_IgnorePointerS1__GS3_S1__s16_PointerFunctions___TFs22_arrayOutOfPlaceUpdateu0_Rxs20_ArrayBufferProtocol_s16_PointerFunctionwx5IndexzSiwx7Elementzw_7ElementrFTRxRGVs22_ContiguousArrayBufferwxS2__SiSiq__T_)
  %.pre11 = load i8*, i8** %41, align 8
  br label %78

; <label>:78                                      ; preds = %73, %77
  %79 = phi i8* [ %67, %73 ], [ %.pre11, %77 ]
  %80 = getelementptr inbounds i8, i8* %79, i64 16
  %._storage3.count._value = bitcast i8* %80 to i64*
  store i64 %71, i64* %._storage3.count._value, align 8
  %81 = getelementptr inbounds i8, i8* %79, i64 32
  %82 = bitcast i8* %81 to %V4Main8Employee*
  %83 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %82, i64 %69
  %84 = bitcast %V4Main8Employee* %83 to <2 x i64>*
  store <2 x i64> %108, <2 x i64>* %84, align 8
  %.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %82, i64 %69, i32 0, i32 0, i32 2
  %85 = bitcast %GSqPs9AnyObject__* %.name._core._owner to i64*
  store i64 %109, i64* %85, align 8
  %.age._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %82, i64 %69, i32 1, i32 0
  store i64 %58, i64* %.age._value, align 8
  %86 = icmp eq i64 %49, %18
  %87 = bitcast i8* %79 to %swift.refcounted*
  br i1 %86, label %.loopexit, label %45

; <label>:88                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  tail call void @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never(i64 ptrtoint ([182 x i8]* @4 to i64), i64 181, i8 2, i64 119)
  unreachable

; <label>:89                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  %90 = getelementptr inbounds %swift.type, %swift.type* %13, i64 11
  %91 = bitcast %swift.type* %90 to void (%Sq*, %Cs19_AnyIteratorBoxBase*)**
  %92 = load void (%Sq*, %Cs19_AnyIteratorBoxBase*)*, void (%Sq*, %Cs19_AnyIteratorBoxBase*)** %91, align 8, !invariant.load !29
  %93 = bitcast %GSqSS_* %2 to %Sq*
  %94 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %0 to %Cs19_AnyIteratorBoxBase*
  call void %92(%Sq* noalias nocapture sret %93, %Cs19_AnyIteratorBoxBase* %94)
  %95 = bitcast %GSqSS_* %2 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 0, i64 8
  %98 = bitcast i8* %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 0, i64 16
  %101 = bitcast i8* %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 1
  %104 = bitcast [1 x i8]* %103 to i1*
  %105 = load i1, i1* %104, align 8
  call void @llvm.lifetime.end(i64 25, i8* %6)
  br i1 %105, label %123, label %15

; <label>:106                                     ; preds = %45
  tail call void @rt_swift_retain(%swift.refcounted* nonnull %26) #22
  tail call void @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never(i64 ptrtoint ([182 x i8]* @4 to i64), i64 181, i8 2, i64 119)
  unreachable

; <label>:107                                     ; preds = %45
  call void %92(%Sq* noalias nocapture sret %27, %Cs19_AnyIteratorBoxBase* nonnull %94)
  %108 = load <2 x i64>, <2 x i64>* %42, align 16
  %109 = load i64, i64* %29, align 16
  %110 = load i1, i1* %31, align 8
  call void @llvm.lifetime.end(i64 25, i8* %24)
  br i1 %110, label %121, label %52

; <label>:111                                     ; preds = %52
  tail call void @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never(i64 ptrtoint ([182 x i8]* @4 to i64), i64 181, i8 2, i64 119)
  unreachable

; <label>:112                                     ; preds = %52
  call void %92(%Sq* noalias nocapture sret %33, %Cs19_AnyIteratorBoxBase* nonnull %94)
  %113 = load i64, i64* %34, align 8
  %114 = load i64, i64* %36, align 8
  %115 = load i64, i64* %38, align 8
  %116 = load i1, i1* %40, align 8
  call void @llvm.lifetime.end(i64 25, i8* %32)
  br i1 %116, label %120, label %55

; <label>:117                                     ; preds = %20
  tail call void asm sideeffect "", "n"(i32 5) #22
  tail call void @llvm.trap()
  unreachable

; <label>:118                                     ; preds = %66
  tail call void asm sideeffect "", "n"(i32 7) #22
  tail call void @llvm.trap()
  unreachable

; <label>:119                                     ; preds = %55
  tail call void asm sideeffect "", "n"(i32 8) #22
  tail call void @llvm.trap()
  unreachable

; <label>:120                                     ; preds = %112
  tail call void asm sideeffect "", "n"(i32 9) #22
  tail call void @llvm.trap()
  unreachable

; <label>:121                                     ; preds = %107
  tail call void asm sideeffect "", "n"(i32 10) #22
  tail call void @llvm.trap()
  unreachable

; <label>:122                                     ; preds = %15
  tail call void asm sideeffect "", "n"(i32 11) #22
  tail call void @llvm.trap()
  unreachable

; <label>:123                                     ; preds = %89
  tail call void asm sideeffect "", "n"(i32 12) #22
  tail call void @llvm.trap()
  unreachable
}

define hidden { i64, i64, i64 } @_TTSf4s___TFV4Main8Employeeg11descriptionSS(i64, i64, i64, i64) #0 {
entry:
  %buffer7 = alloca [152 x i8], align 8
  %4 = load %swift.type*, %swift.type** @_TMLGCs23_ContiguousArrayStorageSS_, align 8
  %5 = icmp eq %swift.type* %4, null
  br i1 %5, label %cacheIsNull.i, label %_TMaGCs23_ContiguousArrayStorageSS_.exit

cacheIsNull.i:                                    ; preds = %entry
  %6 = tail call %swift.type* @_TMaCs23_ContiguousArrayStorage(%swift.type* nonnull @_TMSS) #17
  store atomic %swift.type* %6, %swift.type** @_TMLGCs23_ContiguousArrayStorageSS_ release, align 8
  br label %_TMaGCs23_ContiguousArrayStorageSS_.exit

_TMaGCs23_ContiguousArrayStorageSS_.exit:         ; preds = %entry, %cacheIsNull.i
  %7 = phi %swift.type* [ %4, %entry ], [ %6, %cacheIsNull.i ]
  %8 = bitcast [152 x i8]* %buffer7 to %objc_object*
  %9 = bitcast %objc_object* %8 to %swift.refcounted*
  %10 = call %swift.refcounted* @swift_initStackObject(%swift.type* %7, %swift.refcounted* %9)
  %11 = bitcast %swift.refcounted* %10 to %objc_object*
  %12 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %10, i64 1
  %._storage.count._value = bitcast %swift.refcounted* %12 to i64*
  %13 = bitcast %swift.refcounted* %12 to <2 x i64>*
  store <2 x i64> <i64 5, i64 10>, <2 x i64>* %13, align 8
  %14 = bitcast %objc_object* %11 to %swift.bridge*
  %15 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %10, i64 2
  %16 = call { i64, i64, i64 } @_TTSgq5SSSSs20TextOutputStreamables___TFs27_toStringReadOnlyStreamableuRxs20TextOutputStreamablerFxSS(i64 ptrtoint ([7 x i8]* @0 to i64), i64 6, i64 0)
  %17 = extractvalue { i64, i64, i64 } %16, 0
  %18 = extractvalue { i64, i64, i64 } %16, 1
  %19 = extractvalue { i64, i64, i64 } %16, 2
  %20 = bitcast %swift.refcounted* %15 to i64*
  store i64 %17, i64* %20, align 8
  %._core._countAndFlags = getelementptr inbounds %swift.refcounted, %swift.refcounted* %10, i64 2, i32 1
  %._core._countAndFlags._value = bitcast i32* %._core._countAndFlags to i64*
  store i64 %18, i64* %._core._countAndFlags._value, align 8
  %._core._owner = getelementptr inbounds %swift.refcounted, %swift.refcounted* %10, i64 3
  %21 = bitcast %swift.refcounted* %._core._owner to i64*
  store i64 %19, i64* %21, align 8
  %22 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %10, i64 3, i32 1
  %23 = call { i64, i64, i64 } @_TTSgq5SSSSs20TextOutputStreamables___TFs27_toStringReadOnlyStreamableuRxs20TextOutputStreamablerFxSS(i64 %0, i64 %1, i64 %2)
  %24 = extractvalue { i64, i64, i64 } %23, 0
  %25 = extractvalue { i64, i64, i64 } %23, 1
  %26 = extractvalue { i64, i64, i64 } %23, 2
  %27 = bitcast i32* %22 to i64*
  store i64 %24, i64* %27, align 8
  %._core1._countAndFlags = getelementptr inbounds i32, i32* %22, i64 2
  %._core1._countAndFlags._value = bitcast i32* %._core1._countAndFlags to i64*
  store i64 %25, i64* %._core1._countAndFlags._value, align 8
  %._core1._owner = getelementptr inbounds i32, i32* %22, i64 4
  %28 = bitcast i32* %._core1._owner to i64*
  store i64 %26, i64* %28, align 8
  %29 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %10, i64 5
  %30 = call { i64, i64, i64 } @_TTSgq5SSSSs20TextOutputStreamables___TFs27_toStringReadOnlyStreamableuRxs20TextOutputStreamablerFxSS(i64 ptrtoint ([7 x i8]* @9 to i64), i64 6, i64 0)
  %31 = extractvalue { i64, i64, i64 } %30, 0
  %32 = extractvalue { i64, i64, i64 } %30, 1
  %33 = extractvalue { i64, i64, i64 } %30, 2
  %34 = bitcast %swift.refcounted* %29 to i64*
  store i64 %31, i64* %34, align 8
  %._core2._countAndFlags = getelementptr inbounds %swift.refcounted, %swift.refcounted* %10, i64 5, i32 1
  %._core2._countAndFlags._value = bitcast i32* %._core2._countAndFlags to i64*
  store i64 %32, i64* %._core2._countAndFlags._value, align 8
  %._core2._owner = getelementptr inbounds %swift.refcounted, %swift.refcounted* %10, i64 6
  %35 = bitcast %swift.refcounted* %._core2._owner to i64*
  store i64 %33, i64* %35, align 8
  %36 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %10, i64 6, i32 1
  %37 = call { i64, i64, i64 } @_TTSgq5SiSis23CustomStringConvertibles___TFs26_toStringReadOnlyPrintableuRxs23CustomStringConvertiblerFxSS(i64 %3)
  %38 = extractvalue { i64, i64, i64 } %37, 0
  %39 = extractvalue { i64, i64, i64 } %37, 1
  %40 = extractvalue { i64, i64, i64 } %37, 2
  %41 = bitcast i32* %36 to i64*
  store i64 %38, i64* %41, align 8
  %._core3._countAndFlags = getelementptr inbounds i32, i32* %36, i64 2
  %._core3._countAndFlags._value = bitcast i32* %._core3._countAndFlags to i64*
  store i64 %39, i64* %._core3._countAndFlags._value, align 8
  %._core3._owner = getelementptr inbounds i32, i32* %36, i64 4
  %42 = bitcast i32* %._core3._owner to i64*
  store i64 %40, i64* %42, align 8
  %43 = getelementptr inbounds %swift.refcounted, %swift.refcounted* %10, i64 8
  %44 = call { i64, i64, i64 } @_TTSgq5SSSSs20TextOutputStreamables___TFs27_toStringReadOnlyStreamableuRxs20TextOutputStreamablerFxSS(i64 ptrtoint ([2 x i8]* @2 to i64), i64 1, i64 0)
  %45 = extractvalue { i64, i64, i64 } %44, 0
  %46 = extractvalue { i64, i64, i64 } %44, 1
  %47 = extractvalue { i64, i64, i64 } %44, 2
  %48 = bitcast %swift.refcounted* %43 to i64*
  store i64 %45, i64* %48, align 8
  %._core4._countAndFlags = getelementptr inbounds %swift.refcounted, %swift.refcounted* %10, i64 8, i32 1
  %._core4._countAndFlags._value = bitcast i32* %._core4._countAndFlags to i64*
  store i64 %46, i64* %._core4._countAndFlags._value, align 8
  %._core4._owner = getelementptr inbounds %swift.refcounted, %swift.refcounted* %10, i64 9
  %49 = bitcast %swift.refcounted* %._core4._owner to i64*
  store i64 %47, i64* %49, align 8
  %50 = call { i64, i64, i64 } @_TTSfq4g_d___TFSSCft19stringInterpolationGSaSS__SS(%swift.bridge* %14)
  %51 = bitcast %objc_object* %11 to %GCs23_ContiguousArrayStorageSS_*
  %52 = getelementptr inbounds %GCs23_ContiguousArrayStorageSS_, %GCs23_ContiguousArrayStorageSS_* %51, i64 0, i32 0
  call void @swift_setDeallocating(%swift.refcounted* %52) #22
  %53 = load i64, i64* %._storage.count._value, align 8, !range !28
  %54 = inttoptr i64 %2 to %objc_object*
  %55 = icmp eq i64 %53, 0
  call void @swift_unknownRetain(%objc_object* %54) #22
  br i1 %55, label %exit, label %loop.preheader

loop.preheader:                                   ; preds = %_TMaGCs23_ContiguousArrayStorageSS_.exit
  %56 = bitcast %swift.refcounted* %15 to %SS*
  br label %loop

loop:                                             ; preds = %loop.preheader, %loop
  %57 = phi %SS* [ %62, %loop ], [ %56, %loop.preheader ]
  %58 = phi i64 [ %61, %loop ], [ %53, %loop.preheader ]
  %._core6._owner = getelementptr inbounds %SS, %SS* %57, i64 0, i32 0, i32 2
  %59 = bitcast %GSqPs9AnyObject__* %._core6._owner to %objc_object**
  %60 = load %objc_object*, %objc_object** %59, align 8
  call void @swift_unknownRelease(%objc_object* %60) #22
  %61 = add i64 %58, -1
  %62 = getelementptr inbounds %SS, %SS* %57, i64 1
  %63 = icmp eq i64 %61, 0
  br i1 %63, label %exit.loopexit, label %loop

exit.loopexit:                                    ; preds = %loop
  br label %exit

exit:                                             ; preds = %exit.loopexit, %_TMaGCs23_ContiguousArrayStorageSS_.exit
  %64 = bitcast %objc_object* %11 to i8*
  call void @llvm.lifetime.end(i64 -1, i8* %64)
  ret { i64, i64, i64 } %50
}

declare void @swift_unknownRetain(%objc_object*)

declare void @swift_unknownRelease(%objc_object*)

; Function Attrs: nounwind readnone
define hidden %swift.type* @_TMaC4Main7Company() #14 {
entry:
  %0 = load %swift.type*, %swift.type** @_TMLC4Main7Company, align 8
  %1 = icmp eq %swift.type* %0, null
  br i1 %1, label %cacheIsNull, label %cont

cacheIsNull:                                      ; preds = %entry
  %2 = tail call %objc_class* @rt_swift_getInitializedObjCClass(%objc_class* nonnull bitcast (i64* getelementptr inbounds (<{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main7Company*)*, i8**, i64, %objc_class*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main7Company* (i64, i64, i64, %swift.bridge*, %C4Main7Company*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main7Company, i64 0, i32 2) to %objc_class*))
  %3 = bitcast %objc_class* %2 to %swift.type*
  store atomic %swift.type* %3, %swift.type** @_TMLC4Main7Company release, align 8
  br label %cont

cont:                                             ; preds = %cacheIsNull, %entry
  %4 = phi %swift.type* [ %0, %entry ], [ %3, %cacheIsNull ]
  ret %swift.type* %4
}

; Function Attrs: noinline nounwind
define linkonce_odr hidden %swift.refcounted* @rt_swift_allocObject(%swift.type*, i64, i64) #15 {
entry:
  %load = load %swift.refcounted* (%swift.type*, i64, i64)*, %swift.refcounted* (%swift.type*, i64, i64)** @_swift_allocObject, align 8
  %3 = tail call %swift.refcounted* %load(%swift.type* %0, i64 %1, i64 %2) #22
  ret %swift.refcounted* %3
}

declare %swift.type* @_TMaCs23_ContiguousArrayStorage(%swift.type*) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #16

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i32, i1) #16

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.uadd.with.overflow.i64(i64, i64) #17

; Function Attrs: noreturn nounwind
declare void @llvm.trap() #18

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.sadd.with.overflow.i64(i64, i64) #17

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.smul.with.overflow.i64(i64, i64) #17

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.ssub.with.overflow.i64(i64, i64) #17

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start(i64, i8* nocapture) #16

; Function Attrs: noinline
declare void @_TFs15_print_unlockedu0_R_s16TextOutputStreamrFTxRq__T_(%swift.opaque* noalias nocapture, %swift.opaque* nocapture, %swift.type*, %swift.type*, i8**) #11

declare %swift.type* @_TMaSa(%swift.type*) #0

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end(i64, i8* nocapture) #16

declare void @swift_setDeallocating(%swift.refcounted*)

declare void @swift_deallocClassInstance(%swift.refcounted*, i64, i64)

declare %swift.bridge* @swift_bridgeObjectRetain(%swift.bridge*)

declare void @swift_bridgeObjectRelease(%swift.bridge*)

; Function Attrs: noinline nounwind
define linkonce_odr hidden void @rt_swift_retain(%swift.refcounted*) #15 {
entry:
  %load = load void (%swift.refcounted*)*, void (%swift.refcounted*)** @_swift_retain, align 8
  tail call void %load(%swift.refcounted* %0) #22
  ret void
}

; Function Attrs: noinline nounwind
define linkonce_odr hidden void @rt_swift_release(%swift.refcounted*) #15 {
entry:
  %load = load void (%swift.refcounted*)*, void (%swift.refcounted*)** @_swift_release, align 8
  tail call void %load(%swift.refcounted* %0) #22
  ret void
}

declare %swift.bridge* @_TFE10FoundationSS10componentsfT11separatedBySS_GSaSS_(i64, i64, i64, i64, i64, i64) #0

; Function Attrs: nounwind readnone
define linkonce_odr hidden %swift.type* @_TMaGVs16IndexingIteratorGSaSS__() #14 {
entry:
  %0 = load %swift.type*, %swift.type** @_TMLGVs16IndexingIteratorGSaSS__, align 8
  %1 = icmp eq %swift.type* %0, null
  br i1 %1, label %cacheIsNull, label %cont

cacheIsNull:                                      ; preds = %entry
  %2 = load %swift.type*, %swift.type** @_TMLGSaSS_, align 8
  %3 = icmp eq %swift.type* %2, null
  br i1 %3, label %cacheIsNull.i, label %_TMaGSaSS_.exit

cacheIsNull.i:                                    ; preds = %cacheIsNull
  %4 = tail call %swift.type* @_TMaSa(%swift.type* nonnull @_TMSS) #17
  store atomic %swift.type* %4, %swift.type** @_TMLGSaSS_ release, align 8
  br label %_TMaGSaSS_.exit

_TMaGSaSS_.exit:                                  ; preds = %cacheIsNull, %cacheIsNull.i
  %5 = phi %swift.type* [ %2, %cacheIsNull ], [ %4, %cacheIsNull.i ]
  %6 = load i8**, i8*** @_TWLGSaSS_urGSax_s13IndexableBases, align 8
  %7 = icmp eq i8** %6, null
  br i1 %7, label %cacheIsNull.i1, label %_TWlGSaSS_urGSax_s13IndexableBases.exit

cacheIsNull.i1:                                   ; preds = %_TMaGSaSS_.exit
  %8 = icmp eq %swift.type* %5, null
  br i1 %8, label %cacheIsNull.i.i, label %_TMaGSaSS_.exit.i

cacheIsNull.i.i:                                  ; preds = %cacheIsNull.i1
  %9 = tail call %swift.type* @_TMaSa(%swift.type* nonnull @_TMSS) #17
  store atomic %swift.type* %9, %swift.type** @_TMLGSaSS_ release, align 8
  br label %_TMaGSaSS_.exit.i

_TMaGSaSS_.exit.i:                                ; preds = %cacheIsNull.i.i, %cacheIsNull.i1
  %10 = phi %swift.type* [ %5, %cacheIsNull.i1 ], [ %9, %cacheIsNull.i.i ]
  %11 = tail call i8** @_TWaurGSax_s13IndexableBases(%swift.type* %10) #17
  store atomic i8** %11, i8*** @_TWLGSaSS_urGSax_s13IndexableBases release, align 8
  br label %_TWlGSaSS_urGSax_s13IndexableBases.exit

_TWlGSaSS_urGSax_s13IndexableBases.exit:          ; preds = %_TMaGSaSS_.exit, %_TMaGSaSS_.exit.i
  %12 = phi i8** [ %6, %_TMaGSaSS_.exit ], [ %11, %_TMaGSaSS_.exit.i ]
  %13 = tail call %swift.type* @_TMaVs16IndexingIterator(%swift.type* %5, i8** %12) #17
  store atomic %swift.type* %13, %swift.type** @_TMLGVs16IndexingIteratorGSaSS__ release, align 8
  br label %cont

cont:                                             ; preds = %_TWlGSaSS_urGSax_s13IndexableBases.exit, %entry
  %14 = phi %swift.type* [ %0, %entry ], [ %13, %_TWlGSaSS_urGSax_s13IndexableBases.exit ]
  ret %swift.type* %14
}

declare i8** @_TWaurGSax_s13IndexableBases(%swift.type*) #0

declare %swift.type* @_TMaVs16IndexingIterator(%swift.type*, i8**) #0

declare i8** @_TWauRxs13IndexableBaserGVs16IndexingIteratorx_s16IteratorProtocols(%swift.type*) #0

declare %swift.type* @_TMaCs12_IteratorBox(%swift.type*, i8**) #0

declare %swift.type* @_TMaCs19_AnyIteratorBoxBase(%swift.type*) #0

; Function Attrs: norecurse nounwind readonly
define hidden { i64, i64, i64 } @_TTSf4n_g__TFC4Main7Companyg4nameSS(%C4Main7Company* nocapture readonly) #4 {
entry:
  %._core = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 1, i32 0
  %1 = bitcast %Vs11_StringCore* %._core to i64*
  %2 = load i64, i64* %1, align 8
  %._core._countAndFlags._value = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 1, i32 0, i32 1, i32 0
  %3 = load i64, i64* %._core._countAndFlags._value, align 8
  %._core._owner = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 1, i32 0, i32 2
  %4 = bitcast %GSqPs9AnyObject__* %._core._owner to i64*
  %5 = load i64, i64* %4, align 8
  %6 = insertvalue { i64, i64, i64 } undef, i64 %2, 0
  %7 = insertvalue { i64, i64, i64 } %6, i64 %3, 1
  %8 = insertvalue { i64, i64, i64 } %7, i64 %5, 2
  ret { i64, i64, i64 } %8
}

; Function Attrs: norecurse nounwind readonly
define hidden %swift.bridge* @_TTSf4n_g__TFC4Main7Companyg9employeesGSaVS_8Employee_(%C4Main7Company* nocapture readonly) #4 {
entry:
  %._buffer._storage.rawValue = getelementptr inbounds %C4Main7Company, %C4Main7Company* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %1 = load %swift.bridge*, %swift.bridge** %._buffer._storage.rawValue, align 8
  ret %swift.bridge* %1
}

define hidden void @_TTSf4g_d___TZFV4Main8Employee4loadfT8iteratorGVs11AnyIteratorSS__S0_(%V4Main8Employee* noalias nocapture sret, %GCs19_AnyIteratorBoxBaseSS_*) #0 {
entry:
  %2 = alloca %GSqSS_, align 16
  %3 = alloca %GSqSS_, align 8
  %4 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 25, i8* %4)
  %5 = load %swift.type*, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_, align 8
  %6 = icmp eq %swift.type* %5, null
  br i1 %6, label %cacheIsNull.i, label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

cacheIsNull.i:                                    ; preds = %entry
  %7 = tail call %swift.type* @_TMaCs19_AnyIteratorBoxBase(%swift.type* nonnull @_TMSS) #17
  store atomic %swift.type* %7, %swift.type** @_TMLGCs19_AnyIteratorBoxBaseSS_ release, align 8
  br label %_TMaGCs19_AnyIteratorBoxBaseSS_.exit

_TMaGCs19_AnyIteratorBoxBaseSS_.exit:             ; preds = %entry, %cacheIsNull.i
  %8 = phi %swift.type* [ %5, %entry ], [ %7, %cacheIsNull.i ]
  %9 = bitcast %swift.type* %8 to %objc_class*
  %10 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %swift.type**
  %11 = load %swift.type*, %swift.type** %10, align 8
  %12 = icmp eq %swift.type* %11, %8
  br i1 %12, label %26, label %28

; <label>:13                                      ; preds = %28
  tail call void @rt_swift_release(%swift.refcounted* %32) #22
  %14 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start(i64 25, i8* %14)
  %15 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %objc_class**
  %16 = load %objc_class*, %objc_class** %15, align 8
  %17 = icmp eq %objc_class* %16, %9
  tail call void @rt_swift_retain(%swift.refcounted* %32) #22
  br i1 %17, label %43, label %44

; <label>:18                                      ; preds = %44
  %19 = inttoptr i64 %53 to %objc_object*
  tail call void @swift_unknownRetain(%objc_object* %19) #22
  %20 = tail call { i64, i1 } @_TFSiCfTSS5radixSi_GSqSi_(i64 %47, i64 %50, i64 %53, i64 10)
  %21 = extractvalue { i64, i1 } %20, 1
  br i1 %21, label %57, label %22

; <label>:22                                      ; preds = %18
  tail call void @rt_swift_release(%swift.refcounted* nonnull %32) #22
  tail call void @swift_unknownRelease(%objc_object* %19) #22
  %23 = extractvalue { i64, i1 } %20, 0
  %24 = bitcast %V4Main8Employee* %0 to <2 x i64>*
  store <2 x i64> %36, <2 x i64>* %24, align 8
  %.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 0, i32 0, i32 2
  %25 = bitcast %GSqPs9AnyObject__* %.name._core._owner to i64*
  store i64 %39, i64* %25, align 8
  %.age._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 1, i32 0
  store i64 %23, i64* %.age._value, align 8
  ret void

; <label>:26                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  %27 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %swift.refcounted*
  tail call void @rt_swift_retain(%swift.refcounted* %27) #22
  tail call void @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never(i64 ptrtoint ([182 x i8]* @4 to i64), i64 181, i8 2, i64 119)
  unreachable

; <label>:28                                      ; preds = %_TMaGCs19_AnyIteratorBoxBaseSS_.exit
  %29 = getelementptr inbounds %swift.type, %swift.type* %11, i64 11
  %30 = bitcast %swift.type* %29 to void (%Sq*, %Cs19_AnyIteratorBoxBase*)**
  %31 = load void (%Sq*, %Cs19_AnyIteratorBoxBase*)*, void (%Sq*, %Cs19_AnyIteratorBoxBase*)** %30, align 8, !invariant.load !29
  %32 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %swift.refcounted*
  %33 = bitcast %GSqSS_* %2 to %Sq*
  %34 = bitcast %GCs19_AnyIteratorBoxBaseSS_* %1 to %Cs19_AnyIteratorBoxBase*
  tail call void @rt_swift_retain(%swift.refcounted* %32) #22
  call void %31(%Sq* noalias nocapture sret %33, %Cs19_AnyIteratorBoxBase* %34)
  %35 = bitcast %GSqSS_* %2 to <2 x i64>*
  %36 = load <2 x i64>, <2 x i64>* %35, align 16
  %37 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 0, i64 16
  %38 = bitcast i8* %37 to i64*
  %39 = load i64, i64* %38, align 16
  %40 = getelementptr inbounds %GSqSS_, %GSqSS_* %2, i64 0, i32 1
  %41 = bitcast [1 x i8]* %40 to i1*
  %42 = load i1, i1* %41, align 8
  call void @llvm.lifetime.end(i64 25, i8* %4)
  br i1 %42, label %59, label %13

; <label>:43                                      ; preds = %13
  tail call void @_TFs9_abstractFT4fileVs12StaticString4lineSu_Os5Never(i64 ptrtoint ([182 x i8]* @4 to i64), i64 181, i8 2, i64 119)
  unreachable

; <label>:44                                      ; preds = %13
  %45 = bitcast %GSqSS_* %3 to %Sq*
  call void %31(%Sq* noalias nocapture sret %45, %Cs19_AnyIteratorBoxBase* nonnull %34)
  %46 = bitcast %GSqSS_* %3 to i64*
  %47 = load i64, i64* %46, align 8
  %48 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 0, i64 8
  %49 = bitcast i8* %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 0, i64 16
  %52 = bitcast i8* %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %GSqSS_, %GSqSS_* %3, i64 0, i32 1
  %55 = bitcast [1 x i8]* %54 to i1*
  %56 = load i1, i1* %55, align 8
  call void @llvm.lifetime.end(i64 25, i8* %14)
  br i1 %56, label %58, label %18

; <label>:57                                      ; preds = %18
  tail call void asm sideeffect "", "n"(i32 0) #22
  tail call void @llvm.trap()
  unreachable

; <label>:58                                      ; preds = %44
  tail call void asm sideeffect "", "n"(i32 1) #22
  tail call void @llvm.trap()
  unreachable

; <label>:59                                      ; preds = %28
  tail call void asm sideeffect "", "n"(i32 2) #22
  tail call void @llvm.trap()
  unreachable
}

; Function Attrs: nounwind readnone
define hidden %swift.type* @_TMaC4Main12PaperCompany() #14 {
entry:
  %0 = load %swift.type*, %swift.type** @_TMLC4Main12PaperCompany, align 8
  %1 = icmp eq %swift.type* %0, null
  br i1 %1, label %cacheIsNull, label %cont

cacheIsNull:                                      ; preds = %entry
  %2 = tail call %objc_class* @rt_swift_getInitializedObjCClass(%objc_class* nonnull bitcast (i64* getelementptr inbounds (<{ void (%C4Main12PaperCompany*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main12PaperCompany* (i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>, <{ void (%C4Main12PaperCompany*)*, i8**, i64, %swift.type*, %swift.opaque*, %swift.opaque*, i64, i32, i32, i32, i16, i16, i32, i32, i64, i8*, { i64, i64, i64 } (%C4Main7Company*)*, void (i64, i64, i64, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %swift.bridge* (%C4Main7Company*)*, void (%swift.bridge*, %C4Main7Company*)*, { i8*, i64 } (i8*, [24 x i8]*, %C4Main7Company*)*, %C4Main12PaperCompany* (i64, i64, i64, %swift.bridge*, %C4Main12PaperCompany*)*, { i64, i64, i64 } (%C4Main7Company*)*, i64, i64 }>* @_TMfC4Main12PaperCompany, i64 0, i32 2) to %objc_class*))
  %3 = bitcast %objc_class* %2 to %swift.type*
  store atomic %swift.type* %3, %swift.type** @_TMLC4Main12PaperCompany release, align 8
  br label %cont

cont:                                             ; preds = %cacheIsNull, %entry
  %4 = phi %swift.type* [ %0, %entry ], [ %3, %cacheIsNull ]
  ret %swift.type* %4
}

declare %swift.refcounted* @swift_initStackObject(%swift.type*, %swift.refcounted*)

; Function Attrs: noinline nounwind
define linkonce_odr hidden %swift.type* @rt_swift_getExistentialTypeMetadata(i64, %swift.protocol**) #15 {
entry:
  %load = load %swift.type* (i64, %swift.protocol**)*, %swift.type* (i64, %swift.protocol**)** @_swift_getExistentialTypeMetadata, align 8
  %2 = tail call %swift.type* %load(i64 %0, %swift.protocol** %1) #22
  ret %swift.type* %2
}

; Function Attrs: noinline
declare void @_TFs5printFTGSaP__9separatorSS10terminatorSS_T_(%swift.bridge*, i64, i64, i64, i64, i64, i64) #11

declare %objc_object* @swift_bufferAllocate(%swift.type*, i64, i64) #0

; Function Attrs: noinline
declare { i64, i64, i64 } @_TIFs5printFTGSaP__9separatorSS10terminatorSS_T_A0_() #11

; Function Attrs: noinline
declare { i64, i64, i64 } @_TIFs5printFTGSaP__9separatorSS10terminatorSS_T_A1_() #11

; Function Attrs: noinline nounwind
define linkonce_odr hidden i1 @rt_swift_isUniquelyReferenced_nonNull_native(%swift.refcounted*) #15 {
entry:
  %load = load i1 (%swift.refcounted*)*, i1 (%swift.refcounted*)** @_swift_isUniquelyReferenced_nonNull_native, align 8
  %1 = tail call i1 %load(%swift.refcounted* %0) #22
  ret i1 %1
}

; Function Attrs: norecurse nounwind readnone
define i8** @_TWaV4Main8Employees23CustomStringConvertibleS_() #3 {
entry:
  ret i8** getelementptr inbounds ([1 x i8*], [1 x i8*]* @_TWPV4Main8Employees23CustomStringConvertibleS_, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readnone
define i8** @_TWaC4Main7Companys23CustomStringConvertibleS_() #3 {
entry:
  ret i8** getelementptr inbounds ([1 x i8*], [1 x i8*]* @_TWPC4Main7Companys23CustomStringConvertibleS_, i64 0, i64 0)
}

declare %swift.type* @_TMaSi() #0

; Function Attrs: norecurse nounwind readnone
define hidden i8** @_TWaSi4Main8LoadableS_() #3 {
entry:
  ret i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @_TWPSi4Main8LoadableS_, i64 0, i64 0)
}

declare %swift.type* @_TMaSS() #0

; Function Attrs: norecurse nounwind readnone
define hidden i8** @_TWaSS4Main8LoadableS_() #3 {
entry:
  ret i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @_TWPSS4Main8LoadableS_, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readnone
define hidden %swift.type* @_TMaV4Main8Employee() #3 {
entry:
  ret %swift.type* bitcast (i64* getelementptr inbounds (<{ i8**, i64, i64, %swift.type*, i64, i64 }>, <{ i8**, i64, i64, %swift.type*, i64, i64 }>* @_TMfV4Main8Employee, i64 0, i32 1) to %swift.type*)
}

; Function Attrs: norecurse nounwind readnone
define hidden i8** @_TWaV4Main8EmployeeS_8LoadableS_() #3 {
entry:
  ret i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @_TWPV4Main8EmployeeS_8LoadableS_, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readnone
define hidden i8** @_TWaC4Main7CompanyS_8LoadableS_() #3 {
entry:
  ret i8** getelementptr inbounds ([2 x i8*], [2 x i8*]* @_TWPC4Main7CompanyS_8LoadableS_, i64 0, i64 0)
}

; Function Attrs: nounwind
define linkonce_odr hidden void @_TwXXV4Main8Employee([24 x i8]* nocapture readonly %buffer, %swift.type* nocapture readnone %Employee) #2 {
entry:
  %storage-slot = bitcast [24 x i8]* %buffer to %V4Main8Employee**
  %0 = load %V4Main8Employee*, %V4Main8Employee** %storage-slot, align 8
  %.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 0, i32 0, i32 2
  %1 = bitcast %GSqPs9AnyObject__* %.name._core._owner to %objc_object**
  %2 = load %objc_object*, %objc_object** %1, align 8
  tail call void @swift_unknownRelease(%objc_object* %2) #22
  %3 = bitcast [24 x i8]* %buffer to i8**
  %storage = load i8*, i8** %3, align 8
  tail call void @rt_swift_slowDealloc(i8* %storage, i64 32, i64 7) #22
  ret void
}

; Function Attrs: noinline nounwind
define linkonce_odr hidden void @rt_swift_slowDealloc(i8*, i64, i64) #15 {
entry:
  %load = load void (i8*, i64, i64)*, void (i8*, i64, i64)** @_swift_slowDealloc, align 8
  tail call void %load(i8* %0, i64 %1, i64 %2) #22
  ret void
}

; Function Attrs: nounwind
define linkonce_odr hidden %swift.opaque* @_TwCPV4Main8Employee([24 x i8]* nocapture %dest, [24 x i8]* nocapture readonly %src, %swift.type* nocapture readnone %Employee) #2 {
entry:
  %0 = tail call noalias i8* @rt_swift_slowAlloc(i64 32, i64 7) #22
  %1 = bitcast [24 x i8]* %dest to i8**
  store i8* %0, i8** %1, align 8
  %storage-slot = bitcast [24 x i8]* %src to %V4Main8Employee**
  %2 = load %V4Main8Employee*, %V4Main8Employee** %storage-slot, align 8
  %3 = bitcast %V4Main8Employee* %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast i8* %0 to i64*
  store i64 %4, i64* %5, align 8
  %.name._core._countAndFlags = getelementptr inbounds i8, i8* %0, i64 8
  %6 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %2, i64 0, i32 0, i32 0, i32 1, i32 0
  %7 = bitcast i8* %.name._core._countAndFlags to i64*
  %8 = load i64, i64* %6, align 8
  store i64 %8, i64* %7, align 8
  %.name._core._owner = getelementptr inbounds i8, i8* %0, i64 16
  %.name1._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %2, i64 0, i32 0, i32 0, i32 2
  %9 = bitcast i8* %.name._core._owner to %objc_object**
  %10 = bitcast %GSqPs9AnyObject__* %.name1._core._owner to %objc_object**
  %11 = load %objc_object*, %objc_object** %10, align 8
  store %objc_object* %11, %objc_object** %9, align 8
  %.age = getelementptr inbounds i8, i8* %0, i64 24
  %12 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %2, i64 0, i32 1, i32 0
  %13 = bitcast i8* %.age to i64*
  %14 = load i64, i64* %12, align 8
  store i64 %14, i64* %13, align 8
  %15 = bitcast i8* %0 to %swift.opaque*
  tail call void @swift_unknownRetain(%objc_object* %11) #22
  ret %swift.opaque* %15
}

; Function Attrs: noinline nounwind
define linkonce_odr hidden i8* @rt_swift_slowAlloc(i64, i64) #15 {
entry:
  %load = load i8* (i64, i64)*, i8* (i64, i64)** @_swift_slowAlloc, align 8
  %2 = tail call i8* %load(i64 %0, i64 %1) #22
  ret i8* %2
}

; Function Attrs: norecurse nounwind readonly
define linkonce_odr hidden %swift.opaque* @_TwprV4Main8Employee([24 x i8]* nocapture readonly %buffer, %swift.type* nocapture readnone %Employee) #4 {
entry:
  %0 = bitcast [24 x i8]* %buffer to %swift.opaque**
  %1 = load %swift.opaque*, %swift.opaque** %0, align 8
  ret %swift.opaque* %1
}

; Function Attrs: nounwind
define linkonce_odr hidden void @_TwdeV4Main8Employee([24 x i8]* nocapture readonly %buffer, %swift.type* nocapture readnone %Employee) #2 {
entry:
  %0 = bitcast [24 x i8]* %buffer to i8**
  %storage = load i8*, i8** %0, align 8
  tail call void @rt_swift_slowDealloc(i8* %storage, i64 32, i64 7) #22
  ret void
}

; Function Attrs: nounwind
define linkonce_odr hidden void @_TwxxV4Main8Employee(%swift.opaque* nocapture readonly %object, %swift.type* nocapture readnone %Employee) #2 {
entry:
  %.name._core = bitcast %swift.opaque* %object to %Vs11_StringCore*
  %.name._core._owner = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %.name._core, i64 0, i32 2
  %0 = bitcast %GSqPs9AnyObject__* %.name._core._owner to %objc_object**
  %1 = load %objc_object*, %objc_object** %0, align 8
  tail call void @swift_unknownRelease(%objc_object* %1) #22
  ret void
}

; Function Attrs: nounwind
define linkonce_odr hidden %swift.opaque* @_TwCpV4Main8Employee([24 x i8]* nocapture %dest, %swift.opaque* nocapture readonly %src, %swift.type* nocapture readnone %Employee) #2 {
entry:
  %0 = bitcast %swift.opaque* %src to %V4Main8Employee*
  %1 = tail call noalias i8* @rt_swift_slowAlloc(i64 32, i64 7) #22
  %2 = bitcast [24 x i8]* %dest to i8**
  store i8* %1, i8** %2, align 8
  %.name1._core = bitcast %swift.opaque* %src to %Vs11_StringCore*
  %3 = bitcast %swift.opaque* %src to <2 x i64>*
  %4 = load <2 x i64>, <2 x i64>* %3, align 8
  %5 = bitcast i8* %1 to <2 x i64>*
  store <2 x i64> %4, <2 x i64>* %5, align 8
  %.name._core._owner = getelementptr inbounds i8, i8* %1, i64 16
  %.name1._core._owner = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %.name1._core, i64 0, i32 2
  %6 = bitcast i8* %.name._core._owner to %objc_object**
  %7 = bitcast %GSqPs9AnyObject__* %.name1._core._owner to %objc_object**
  %8 = load %objc_object*, %objc_object** %7, align 8
  store %objc_object* %8, %objc_object** %6, align 8
  %.age = getelementptr inbounds i8, i8* %1, i64 24
  %9 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 1, i32 0
  %10 = bitcast i8* %.age to i64*
  %11 = load i64, i64* %9, align 8
  store i64 %11, i64* %10, align 8
  %12 = bitcast i8* %1 to %swift.opaque*
  tail call void @swift_unknownRetain(%objc_object* %8) #22
  ret %swift.opaque* %12
}

; Function Attrs: nounwind
define linkonce_odr hidden %swift.opaque* @_TwcpV4Main8Employee(%swift.opaque* %dest, %swift.opaque* nocapture readonly %src, %swift.type* nocapture readnone %Employee) #2 {
entry:
  %0 = bitcast %swift.opaque* %dest to %V4Main8Employee*
  %1 = bitcast %swift.opaque* %src to %V4Main8Employee*
  %.name._core = bitcast %swift.opaque* %dest to %Vs11_StringCore*
  %.name1._core = bitcast %swift.opaque* %src to %Vs11_StringCore*
  %2 = bitcast %swift.opaque* %src to i64*
  %3 = load i64, i64* %2, align 8
  %4 = bitcast %swift.opaque* %dest to i64*
  store i64 %3, i64* %4, align 8
  %5 = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %.name1._core, i64 0, i32 1, i32 0
  %6 = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %.name._core, i64 0, i32 1, i32 0
  %7 = load i64, i64* %5, align 8
  store i64 %7, i64* %6, align 8
  %.name._core._owner = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %.name._core, i64 0, i32 2
  %.name1._core._owner = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %.name1._core, i64 0, i32 2
  %8 = bitcast %GSqPs9AnyObject__* %.name._core._owner to %objc_object**
  %9 = bitcast %GSqPs9AnyObject__* %.name1._core._owner to %objc_object**
  %10 = load %objc_object*, %objc_object** %9, align 8
  store %objc_object* %10, %objc_object** %8, align 8
  %11 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %1, i64 0, i32 1, i32 0
  %12 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 1, i32 0
  %13 = load i64, i64* %11, align 8
  store i64 %13, i64* %12, align 8
  tail call void @swift_unknownRetain(%objc_object* %10) #22
  ret %swift.opaque* %dest
}

; Function Attrs: nounwind
define linkonce_odr hidden %swift.opaque* @_TwcaV4Main8Employee(%swift.opaque* %dest, %swift.opaque* nocapture readonly %src, %swift.type* nocapture readnone %Employee) #2 {
entry:
  %0 = bitcast %swift.opaque* %dest to %V4Main8Employee*
  %1 = bitcast %swift.opaque* %src to %V4Main8Employee*
  %.name._core = bitcast %swift.opaque* %dest to %Vs11_StringCore*
  %.name1._core = bitcast %swift.opaque* %src to %Vs11_StringCore*
  %2 = bitcast %swift.opaque* %src to i64*
  %3 = load i64, i64* %2, align 8
  %4 = bitcast %swift.opaque* %dest to i64*
  store i64 %3, i64* %4, align 8
  %.name._core._countAndFlags._value = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %.name._core, i64 0, i32 1, i32 0
  %.name1._core._countAndFlags._value = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %.name1._core, i64 0, i32 1, i32 0
  %5 = load i64, i64* %.name1._core._countAndFlags._value, align 8
  store i64 %5, i64* %.name._core._countAndFlags._value, align 8
  %.name._core._owner = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %.name._core, i64 0, i32 2
  %.name1._core._owner = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %.name1._core, i64 0, i32 2
  %6 = bitcast %GSqPs9AnyObject__* %.name._core._owner to %objc_object**
  %7 = bitcast %GSqPs9AnyObject__* %.name1._core._owner to %objc_object**
  %8 = load %objc_object*, %objc_object** %6, align 8
  %9 = load %objc_object*, %objc_object** %7, align 8
  store %objc_object* %9, %objc_object** %6, align 8
  tail call void @swift_unknownRetain(%objc_object* %9) #22
  tail call void @swift_unknownRelease(%objc_object* %8) #22
  %.age._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 1, i32 0
  %.age2._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %1, i64 0, i32 1, i32 0
  %10 = load i64, i64* %.age2._value, align 8
  store i64 %10, i64* %.age._value, align 8
  ret %swift.opaque* %dest
}

; Function Attrs: nounwind
define linkonce_odr hidden %swift.opaque* @_TwTkV4Main8Employee([24 x i8]* nocapture %dest, %swift.opaque* nocapture readonly %src, %swift.type* nocapture readnone %Employee) #2 {
entry:
  %0 = tail call noalias i8* @rt_swift_slowAlloc(i64 32, i64 7) #22
  %1 = bitcast [24 x i8]* %dest to i8**
  store i8* %0, i8** %1, align 8
  %2 = bitcast %swift.opaque* %src to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %2, i64 32, i32 8, i1 false)
  %3 = bitcast i8* %0 to %swift.opaque*
  ret %swift.opaque* %3
}

; Function Attrs: norecurse nounwind
define linkonce_odr hidden i8* @__swift_memcpy32_8(i8*, i8* nocapture readonly, %swift.type* nocapture readnone) #19 {
entry:
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* %0, i8* %1, i64 32, i32 8, i1 false)
  ret i8* %0
}

; Function Attrs: nounwind
define linkonce_odr hidden %swift.opaque* @_TwtaV4Main8Employee(%swift.opaque* %dest, %swift.opaque* nocapture readonly %src, %swift.type* nocapture readnone %Employee) #2 {
entry:
  %0 = bitcast %swift.opaque* %dest to %V4Main8Employee*
  %1 = bitcast %swift.opaque* %src to %V4Main8Employee*
  %.name._core = bitcast %swift.opaque* %dest to %Vs11_StringCore*
  %.name1._core = bitcast %swift.opaque* %src to %Vs11_StringCore*
  %2 = bitcast %swift.opaque* %src to i64*
  %3 = load i64, i64* %2, align 8
  %4 = bitcast %swift.opaque* %dest to i64*
  store i64 %3, i64* %4, align 8
  %.name._core._countAndFlags._value = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %.name._core, i64 0, i32 1, i32 0
  %.name1._core._countAndFlags._value = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %.name1._core, i64 0, i32 1, i32 0
  %5 = load i64, i64* %.name1._core._countAndFlags._value, align 8
  store i64 %5, i64* %.name._core._countAndFlags._value, align 8
  %.name._core._owner = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %.name._core, i64 0, i32 2
  %.name1._core._owner = getelementptr inbounds %Vs11_StringCore, %Vs11_StringCore* %.name1._core, i64 0, i32 2
  %6 = bitcast %GSqPs9AnyObject__* %.name._core._owner to %objc_object**
  %7 = load %objc_object*, %objc_object** %6, align 8
  %8 = bitcast %GSqPs9AnyObject__* %.name1._core._owner to i64*
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %GSqPs9AnyObject__* %.name._core._owner to i64*
  store i64 %9, i64* %10, align 8
  tail call void @swift_unknownRelease(%objc_object* %7) #22
  %.age._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %0, i64 0, i32 1, i32 0
  %.age2._value = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %1, i64 0, i32 1, i32 0
  %11 = load i64, i64* %.age2._value, align 8
  store i64 %11, i64* %.age._value, align 8
  ret %swift.opaque* %dest
}

; Function Attrs: nounwind
define linkonce_odr hidden %swift.opaque* @_TwalV4Main8Employee([24 x i8]* nocapture %buffer, %swift.type* nocapture readnone %Employee) #2 {
entry:
  %0 = tail call noalias i8* @rt_swift_slowAlloc(i64 32, i64 7) #22
  %1 = bitcast [24 x i8]* %buffer to i8**
  store i8* %0, i8** %1, align 8
  %2 = bitcast i8* %0 to %swift.opaque*
  ret %swift.opaque* %2
}

; Function Attrs: norecurse nounwind
define linkonce_odr hidden i8* @__swift_copy_outline_pointer(i8** nocapture, i8** nocapture readonly, %swift.type* nocapture readnone) #19 {
entry:
  %3 = load i8*, i8** %1, align 8
  store i8* %3, i8** %0, align 8
  ret i8* %3
}

; Function Attrs: nounwind
define linkonce_odr hidden void @_TwXxV4Main8Employee(%swift.opaque* nocapture readonly %array, i64 %count, %swift.type* nocapture readnone %Employee) #2 {
entry:
  %0 = icmp eq i64 %count, 0
  br i1 %0, label %exit, label %loop.preheader

loop.preheader:                                   ; preds = %entry
  %1 = bitcast %swift.opaque* %array to %V4Main8Employee*
  br label %loop

loop:                                             ; preds = %loop.preheader, %loop
  %2 = phi %V4Main8Employee* [ %7, %loop ], [ %1, %loop.preheader ]
  %3 = phi i64 [ %6, %loop ], [ %count, %loop.preheader ]
  %.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %2, i64 0, i32 0, i32 0, i32 2
  %4 = bitcast %GSqPs9AnyObject__* %.name._core._owner to %objc_object**
  %5 = load %objc_object*, %objc_object** %4, align 8
  tail call void @swift_unknownRelease(%objc_object* %5) #22
  %6 = add i64 %3, -1
  %7 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %2, i64 1
  %8 = icmp eq i64 %6, 0
  br i1 %8, label %exit.loopexit, label %loop

exit.loopexit:                                    ; preds = %loop
  br label %exit

exit:                                             ; preds = %exit.loopexit, %entry
  ret void
}

; Function Attrs: nounwind
define linkonce_odr hidden %swift.opaque* @_TwCcV4Main8Employee(%swift.opaque* %dest, %swift.opaque* nocapture readonly %src, i64 %count, %swift.type* nocapture readnone %Employee) #2 {
entry:
  %0 = icmp eq i64 %count, 0
  br i1 %0, label %exit, label %loop.preheader

loop.preheader:                                   ; preds = %entry
  %1 = bitcast %swift.opaque* %src to %V4Main8Employee*
  %2 = bitcast %swift.opaque* %dest to %V4Main8Employee*
  br label %loop

loop:                                             ; preds = %loop.preheader, %loop
  %3 = phi %V4Main8Employee* [ %20, %loop ], [ %1, %loop.preheader ]
  %4 = phi %V4Main8Employee* [ %19, %loop ], [ %2, %loop.preheader ]
  %5 = phi i64 [ %18, %loop ], [ %count, %loop.preheader ]
  %6 = bitcast %V4Main8Employee* %3 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = bitcast %V4Main8Employee* %4 to i64*
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %3, i64 0, i32 0, i32 0, i32 1, i32 0
  %10 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %4, i64 0, i32 0, i32 0, i32 1, i32 0
  %11 = load i64, i64* %9, align 8
  store i64 %11, i64* %10, align 8
  %.name._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %4, i64 0, i32 0, i32 0, i32 2
  %.name1._core._owner = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %3, i64 0, i32 0, i32 0, i32 2
  %12 = bitcast %GSqPs9AnyObject__* %.name._core._owner to %objc_object**
  %13 = bitcast %GSqPs9AnyObject__* %.name1._core._owner to %objc_object**
  %14 = load %objc_object*, %objc_object** %13, align 8
  store %objc_object* %14, %objc_object** %12, align 8
  %15 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %3, i64 0, i32 1, i32 0
  %16 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %4, i64 0, i32 1, i32 0
  %17 = load i64, i64* %15, align 8
  store i64 %17, i64* %16, align 8
  %18 = add i64 %5, -1
  %19 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %4, i64 1
  %20 = getelementptr inbounds %V4Main8Employee, %V4Main8Employee* %3, i64 1
  %21 = icmp eq i64 %18, 0
  tail call void @swift_unknownRetain(%objc_object* %14) #22
  br i1 %21, label %exit.loopexit, label %loop

exit.loopexit:                                    ; preds = %loop
  br label %exit

exit:                                             ; preds = %exit.loopexit, %entry
  ret %swift.opaque* %dest
}

; Function Attrs: norecurse nounwind
define linkonce_odr hidden i8* @__swift_memmove_array32_8(i8*, i8* nocapture readonly, i64, %swift.type* nocapture readnone) #19 {
entry:
  %4 = shl nuw i64 %2, 5
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* %0, i8* %1, i64 %4, i32 8, i1 false)
  ret i8* %0
}

; Function Attrs: nounwind
define private %swift.type** @get_field_types_Employee(%swift.type* nocapture readnone %Employee) #2 {
entry:
  %0 = load %swift.type**, %swift.type*** @field_type_vector_Employee, align 8
  %1 = icmp eq %swift.type** %0, null
  br i1 %1, label %build_field_types, label %done

build_field_types:                                ; preds = %entry
  %2 = tail call noalias i8* @rt_swift_slowAlloc(i64 16, i64 7) #22
  %3 = bitcast i8* %2 to %swift.type**
  %4 = bitcast i8* %2 to <2 x %swift.type*>*
  store <2 x %swift.type*> <%swift.type* @_TMSS, %swift.type* @_TMSi>, <2 x %swift.type*>* %4, align 8
  %5 = ptrtoint i8* %2 to i64
  %6 = cmpxchg i64* bitcast (%swift.type*** @field_type_vector_Employee to i64*), i64 0, i64 %5 seq_cst seq_cst
  %7 = extractvalue { i64, i1 } %6, 1
  br i1 %7, label %done, label %race_lost

race_lost:                                        ; preds = %build_field_types
  %8 = extractvalue { i64, i1 } %6, 0
  tail call void @rt_swift_slowDealloc(i8* %2, i64 16, i64 7) #22
  %9 = inttoptr i64 %8 to %swift.type**
  br label %done

done:                                             ; preds = %race_lost, %build_field_types, %entry
  %10 = phi %swift.type** [ %0, %entry ], [ %3, %build_field_types ], [ %9, %race_lost ]
  ret %swift.type** %10
}

; Function Attrs: nounwind
define private %swift.type** @get_field_types_Company(%swift.type* nocapture readnone %Company) #2 {
entry:
  %0 = load %swift.type**, %swift.type*** @field_type_vector_Company, align 8
  %1 = icmp eq %swift.type** %0, null
  br i1 %1, label %build_field_types, label %done

build_field_types:                                ; preds = %entry
  %2 = tail call noalias i8* @rt_swift_slowAlloc(i64 16, i64 7) #22
  %3 = bitcast i8* %2 to %swift.type**
  store %swift.type* @_TMSS, %swift.type** %3, align 8
  %4 = getelementptr inbounds i8, i8* %2, i64 8
  %5 = bitcast i8* %4 to %swift.type**
  %6 = load %swift.type*, %swift.type** @_TMLGSaV4Main8Employee_, align 8
  %7 = icmp eq %swift.type* %6, null
  br i1 %7, label %cacheIsNull.i, label %_TMaGSaV4Main8Employee_.exit

cacheIsNull.i:                                    ; preds = %build_field_types
  %8 = tail call %swift.type* @_TMaSa(%swift.type* nonnull bitcast (i64* getelementptr inbounds (<{ i8**, i64, i64, %swift.type*, i64, i64 }>, <{ i8**, i64, i64, %swift.type*, i64, i64 }>* @_TMfV4Main8Employee, i64 0, i32 1) to %swift.type*)) #17
  store atomic %swift.type* %8, %swift.type** @_TMLGSaV4Main8Employee_ release, align 8
  br label %_TMaGSaV4Main8Employee_.exit

_TMaGSaV4Main8Employee_.exit:                     ; preds = %build_field_types, %cacheIsNull.i
  %9 = phi %swift.type* [ %6, %build_field_types ], [ %8, %cacheIsNull.i ]
  store %swift.type* %9, %swift.type** %5, align 8
  %10 = ptrtoint i8* %2 to i64
  %11 = cmpxchg i64* bitcast (%swift.type*** @field_type_vector_Company to i64*), i64 0, i64 %10 seq_cst seq_cst
  %12 = extractvalue { i64, i1 } %11, 1
  br i1 %12, label %done, label %race_lost

race_lost:                                        ; preds = %_TMaGSaV4Main8Employee_.exit
  %13 = extractvalue { i64, i1 } %11, 0
  tail call void @rt_swift_slowDealloc(i8* nonnull %2, i64 16, i64 7) #22
  %14 = inttoptr i64 %13 to %swift.type**
  br label %done

done:                                             ; preds = %race_lost, %_TMaGSaV4Main8Employee_.exit, %entry
  %15 = phi %swift.type** [ %0, %entry ], [ %3, %_TMaGSaV4Main8Employee_.exit ], [ %14, %race_lost ]
  ret %swift.type** %15
}

; Function Attrs: noinline nounwind
define linkonce_odr hidden %objc_class* @rt_swift_getInitializedObjCClass(%objc_class*) #15 {
entry:
  %load = load %objc_class* (%objc_class*)*, %objc_class* (%objc_class*)** @_swift_getInitializedObjCClass, align 8
  %1 = tail call %objc_class* %load(%objc_class* %0) #22
  ret %objc_class* %1
}

; Function Attrs: nounwind
define private %swift.type** @get_field_types_PaperCompany(%swift.type* nocapture readnone %PaperCompany) #2 {
entry:
  %0 = load %swift.type**, %swift.type*** @field_type_vector_PaperCompany, align 8
  %1 = icmp eq %swift.type** %0, null
  br i1 %1, label %build_field_types, label %done

build_field_types:                                ; preds = %entry
  %2 = tail call noalias i8* @rt_swift_slowAlloc(i64 0, i64 7) #22
  %3 = bitcast i8* %2 to %swift.type**
  %4 = ptrtoint i8* %2 to i64
  %5 = cmpxchg i64* bitcast (%swift.type*** @field_type_vector_PaperCompany to i64*), i64 0, i64 %4 seq_cst seq_cst
  %6 = extractvalue { i64, i1 } %5, 1
  br i1 %6, label %done, label %race_lost

race_lost:                                        ; preds = %build_field_types
  %7 = extractvalue { i64, i1 } %5, 0
  tail call void @rt_swift_slowDealloc(i8* %2, i64 0, i64 7) #22
  %8 = inttoptr i64 %7 to %swift.type**
  br label %done

done:                                             ; preds = %race_lost, %build_field_types, %entry
  %9 = phi %swift.type** [ %0, %entry ], [ %3, %build_field_types ], [ %8, %race_lost ]
  ret %swift.type** %9
}

declare i64 @swift_int64ToString(i8*, i64, i64, i64, i1) #0

declare %swift.type* @_TMaCs18_HeapBufferStorage(%swift.type*, %swift.type*) #0

; Function Attrs: nounwind readnone
declare i64 @_swift_stdlib_malloc_size(i8*) #20

declare i1 @_swift_isClassOrObjCExistentialType(%swift.type*, %swift.type*) #10

declare void @objc_msgSend()

; Function Attrs: nounwind readnone
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #17

; Function Attrs: nounwind readnone
declare { i16, i1 } @llvm.uadd.with.overflow.i16(i16, i16) #17

; Function Attrs: noinline
declare i16 @_TTSfq4gs_n___TFs21_cocoaStringSubscriptFTVs11_StringCoreSi_Vs6UInt16(i64, i64, i64) #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture, i8, i64, i32, i1) #16

define hidden void @_TFC4Main7CompanyD(%C4Main7Company*) #0 {
  %2 = bitcast %C4Main7Company* %0 to %C4Main12PaperCompany*
  tail call void @_TFC4Main12PaperCompanyD(%C4Main12PaperCompany* %2) #0
  ret void
}

; Function Attrs: nounwind
define hidden %swift.refcounted* @_TFC4Main7Companyd(%C4Main7Company* readonly) #2 {
  %2 = bitcast %C4Main7Company* %0 to %C4Main12PaperCompany*
  %3 = tail call %swift.refcounted* @_TFC4Main12PaperCompanyd(%C4Main12PaperCompany* readonly %2) #2
  ret %swift.refcounted* %3
}

; Function Attrs: norecurse nounwind
define hidden %C4Main7Company* @_TFC4Main7CompanycfT4nameSS9employeesGSaVS_8Employee__S0_(i64, i64, i64, %swift.bridge*, %C4Main7Company*) #1 {
  %6 = bitcast %C4Main7Company* %4 to %C4Main12PaperCompany*
  %7 = tail call %C4Main12PaperCompany* @_TFC4Main12PaperCompanycfT4nameSS9employeesGSaVS_8Employee__S0_(i64 %0, i64 %1, i64 %2, %swift.bridge* %3, %C4Main12PaperCompany* %6) #1
  %8 = bitcast %C4Main12PaperCompany* %7 to %C4Main7Company*
  ret %C4Main7Company* %8
}

declare void @swift_unknownRetain_n(%swift.refcounted*, i32)

declare void @swift_unknownRelease_n(%swift.refcounted*, i32)

; Function Attrs: noinline nounwind
define linkonce_odr hidden void @rt_swift_release_n(%swift.refcounted*, i32) #15 {
entry:
  %load = load void (%swift.refcounted*, i32)*, void (%swift.refcounted*, i32)** @_swift_release_n
  tail call void %load(%swift.refcounted* %0, i32 %1)
  ret void
}

attributes #0 = { "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+fxsr,+mmx,+sse,+sse2,+sse3" }
attributes #1 = { norecurse nounwind "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+fxsr,+mmx,+sse,+sse2,+sse3" }
attributes #2 = { nounwind "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+fxsr,+mmx,+sse,+sse2,+sse3" }
attributes #3 = { norecurse nounwind readnone "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+fxsr,+mmx,+sse,+sse2,+sse3" }
attributes #4 = { norecurse nounwind readonly "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+fxsr,+mmx,+sse,+sse2,+sse3" }
attributes #5 = { noinline norecurse nounwind readnone "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+fxsr,+mmx,+sse,+sse2,+sse3" }
attributes #6 = { noinline readonly "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+fxsr,+mmx,+sse,+sse2,+sse3" }
attributes #7 = { norecurse nounwind readnone "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "target-cpu"="core2" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3" }
attributes #8 = { readonly "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+fxsr,+mmx,+sse,+sse2,+sse3" }
attributes #9 = { noinline "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "target-cpu"="core2" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3" }
attributes #10 = { "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "target-cpu"="core2" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3" }
attributes #11 = { noinline "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+fxsr,+mmx,+sse,+sse2,+sse3" }
attributes #12 = { noinline noreturn "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+fxsr,+mmx,+sse,+sse2,+sse3" }
attributes #13 = { noinline nounwind "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "target-cpu"="core2" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3" }
attributes #14 = { nounwind readnone "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "target-cpu"="core2" "target-features"="+ssse3,+cx16,+fxsr,+mmx,+sse,+sse2,+sse3" }
attributes #15 = { noinline nounwind }
attributes #16 = { argmemonly nounwind }
attributes #17 = { nounwind readnone }
attributes #18 = { noreturn nounwind }
attributes #19 = { norecurse nounwind }
attributes #20 = { nounwind readnone "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="core2" "target-features"="+cx16,+fxsr,+mmx,+sse,+sse2,+sse3,+ssse3" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #21 = { noinline }
attributes #22 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3, !4, !5, !26, !27}

!0 = !{i32 1, !"Objective-C Version", i32 2}
!1 = !{i32 1, !"Objective-C Image Info Version", i32 0}
!2 = !{i32 1, !"Objective-C Image Info Section", !"__DATA, __objc_imageinfo, regular, no_dead_strip"}
!3 = !{i32 4, !"Objective-C Garbage Collection", i32 1024}
!4 = !{i32 1, !"Objective-C Class Properties", i32 64}
!5 = !{i32 6, !"Linker Options", !6}
!6 = !{!7, !8, !9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25}
!7 = !{!"-lswiftCore"}
!8 = !{!"-lswiftFoundation"}
!9 = !{!"-framework", !"Foundation"}
!10 = !{!"-lswiftObjectiveC"}
!11 = !{!"-lswiftDarwin"}
!12 = !{!"-framework", !"CoreServices"}
!13 = !{!"-lswiftIOKit"}
!14 = !{!"-framework", !"IOKit"}
!15 = !{!"-lswiftDispatch"}
!16 = !{!"-framework", !"CoreFoundation"}
!17 = !{!"-framework", !"DiskArbitration"}
!18 = !{!"-framework", !"CFNetwork"}
!19 = !{!"-framework", !"Security"}
!20 = !{!"-lswiftCoreGraphics"}
!21 = !{!"-framework", !"CoreGraphics"}
!22 = !{!"-framework", !"ApplicationServices"}
!23 = !{!"-framework", !"CoreText"}
!24 = !{!"-framework", !"ImageIO"}
!25 = !{!"-lobjc"}
!26 = !{i32 1, !"PIC Level", i32 2}
!27 = !{i32 1, !"Swift Version", i32 4}
!28 = !{i64 0, i64 9223372036854775807}
!29 = !{}
!30 = !{!31}
!31 = distinct !{!31, !32, !"_TF4Main4loaduRxS_8Loadablexzwx6LoadedrFT8iteratorGVs11AnyIteratorSS__x: argument 0"}
!32 = distinct !{!32, !"_TF4Main4loaduRxS_8Loadablexzwx6LoadedrFT8iteratorGVs11AnyIteratorSS__x"}
!33 = !{!34}
!34 = distinct !{!34, !35, !"_TF4Main4loaduRxS_8Loadablexzwx6LoadedrFT8iteratorGVs11AnyIteratorSS__x: argument 0"}
!35 = distinct !{!35, !"_TF4Main4loaduRxS_8Loadablexzwx6LoadedrFT8iteratorGVs11AnyIteratorSS__x"}
!36 = !{!"branch_weights", i32 4, i32 64}
!37 = !{!"branch_weights", i32 64, i32 4}
!38 = !{!"branch_weights", i32 4096, i32 272, i32 256}
!39 = !{!"branch_weights", i32 528, i32 4096}
!40 = !{i64 160}
